[
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": " Chapter 1 Basics Discover what PrestaShop is all about and the core concepts behind it.\n Introduction   Installation   Keep PrestaShop up-to-date   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": " Configuration Data can be saved in the shop database without requiring a module specific table to be created.\nThe table configuration contains a list of key =\u0026gt; value(s) properties which can be accessed from anywhere, including in a module. The Configuration class is the interface allowing each module developer to get or store data in this table.\nStore configuration data Configuration::updateValue(string $key, mixed $value);  $key will be the reference to your data to reuse later. $value can be any scalar type (int, string, bool, array\u0026hellip;).\nCheck a configuration data exists Configuration::hasKey(string $key);  $key is the name of the configuration data to check. The method returns true is the data exists, false otherwise.\nRetrieve configuration data Single key Configuration::get(string $key);  With $key as the data to retrieve. If the key does not exist, the returned value will be null.\nExample:\nConfiguration::get('PS_VERSION_DB'); ==\u0026gt; '1.7.4.0'  Multiple keys Configuration::getMultiple(array $keys);  With $keys as an array of keys to retrieve.\nThis returns an array, containing the values stored in the configuration table or null if a key does not exist.\nExample:\nConfiguration::getMultiple(array('PS_VERSION_DB', 'UNKNOWN_KEY')); ==\u0026gt; array( 'PS_VERSION_DB' =\u0026gt; '1.7.4.0', 'UNKNOWN_KEY' =\u0026gt; null, )  Use widgets "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/database/dbquery/",
	"title": "DBQuery class",
	"tags": [],
	"description": "",
	"content": " The DBQuery class The DBQuery class is a query builder which helps you create SQL queries. For instance:\n$sql = new DbQuery(); $sql-\u0026gt;select('*'); $sql-\u0026gt;from('cms', 'c'); $sql-\u0026gt;innerJoin('cms_lang', 'l', 'c.id_cms = l.id_cms AND l.id_lang = '.(int)$id_lang); $sql-\u0026gt;where('c.active = 1'); $sql-\u0026gt;orderBy('position'); return Db::getInstance()-\u0026gt;executeS($sql);  Main methods  __toString()  Generate and get the query. build()  Generate and get the query (return a string). from(string $table, mixed $alias = null)  Set table for FROM clause. groupBy(string $fields)  Add a GROUP BY restriction. having(string $restriction)  Add a restriction in the HAVING clause (each restriction will be separated by an AND statement). innerJoin(string $table, string $alias = null, string $on = null)  Add a INNER JOIN clause\nE.g. $this-\u0026gt;innerJoin('product p ON ...'). join(string $join)  Add a JOIN clause\nE.g. $this-\u0026gt;join('RIGHT JOIN'.DB_PREFIX.'produc t p ON ...');. leftJoin(string $table, string $alias = null, string $on = null)  Add a LEFT JOIN clause. leftOuterJoin(string $table, string $alias = null, string $on = null)  Add a LEFT OUTER JOIN clause. limit(string $limit, mixed $offset = 0)  Limit results in query. naturalJoin(string $table, string $alias = null)  Add a NATURAL JOIN clause. orderBy(string $fields)  Add an ORDER BY restriction. select(string $fields)  Add fields in query selection. where(string $restriction)  Add a restriction in WHERE clause (each restriction will be separated by an AND statement).   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/getting-started/",
	"title": "Getting started with theme development",
	"tags": [],
	"description": "",
	"content": " Getting started "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/getting-started/guidelines/",
	"title": "Guidelines and coding standards",
	"tags": [],
	"description": "",
	"content": " Guidelines and coding standards Compatibility PHP Code Your PHP code should be compatible with the following versions:\n PrestaShop 1.7.0  ~ 1.7.3  : at least PHP 5.4 PrestaShop 1.7.4  : at least PHP 5.6  HTML / CSS / Javascript Your HTML/CSS/JS code should work with at least:\n IE9+ Edge Firefox 45 Chrome 29.  Mobile-wise:\n iOS 8.4 Android Browser 4.4  Standards General Use spaces for indentation in every language (PHP, HTML, CSS, etc.):\n4 spaces for PHP files, 2 spaces for all other file types.\nUse our .editorconfig file in order to easily configure your editor: https://github.com/PrestaShop/PrestaShop/blob/develop/.editorconfig\nPHP files You should follow the PSR-2 standard, just like PrestaShop does.\nIn general, we tend to follow the Symfony coding standards.\nHTML files Use HTML 5 tags:\n \u0026lt;br /\u0026gt; → \u0026lt;br\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;section\u0026gt; etc.  All open tags must be closed in the same file (a \u0026lt;div\u0026gt; should not be opened in header.tpl then closed in footer.tpl). Subtemplates (templates meant to be included in another template) must reside inside a /_partials/ folder.\nCSS files Use CSS3.\nWe recommend that you follow the RSCSS structure\nJavascript Make sure your linter tool follows our .eslint file: https://github.com/PrestaShop/PrestaShop/blob/develop/.eslintrc\nIf you wish to write ECMAScript 2015 (ES6) code, we recommend using the Babel compiler to maximize compatibility.\nA good JS practice consists in splitting files per use, and then compiling them into one.\nLearn more about the ES2015 standard: https://babeljs.io/docs/learn-es2015/\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/scale/benchmark/",
	"title": "How to benchmark your PrestaShop",
	"tags": [],
	"description": "",
	"content": " How to setup the benchmark of your PrestaShop shop Prerequisite  git php-7+ composer The prestashop version you want to bench  Prepare your benchmark Prepare your dataset Before launching a benchmark of PrestaShop, you need to put a few entries in your database.\nThe prestashop shop Generator will help you to do this.\nFirst clone the project from the following url, and set the number of entries you want for each main entities:\ngit clone https://github.com/PrestaShop/prestashop-shop-creator cd prestashop-shop-creator composer install  The default settings is a rather small shop (about 100 products).\nCreating the \u0026quot;app/config/config.yml\u0026quot; file Some parameters are missing. Please provide them. shop_id (1): customers (100): manufacturers (100): suppliers (10): addresses (100): aliases (100): categories (100): warehouses (2): carriers (3): specific_prices (100): attribute_groups (10): products (100): attributes (10): carts (1000): cart_rules (100): customizations (10): features (100): feature_values (5): orders (10): guests (10): order_histories (6): range_prices (100): range_weights (100): product_attributes (5): images (100): order_messages (100): deliveries (100): connections (1000): product_suppliers (10): order_carriers (2): order_details (10): feature_products (5): stores (100): profiles (10): stock_availables (1): langs ([fr_FR, en_US]):  If you want to customize later the number of entities, just modify the file app/config/config.yml\nThen run the following command to generate your initial dataset, which will be stored in the generated_data directory\nphp app/console.php  How to use this dataset during Prestashop install? Actually it\u0026rsquo;s quite simple. Just copy the content of the generated_data folders (three folders should be there: data, img and langs) in the prestashop install/fixtures/fashion folders (overwrite the folders already there).\nThen launch a standard prestashop install.\nPrepare your shop Make sure your not in debug mode! In config/defines.inc.php you should have:\ndefine('_PS_MODE_DEV_', false);  The smarty cache should be enabled, but the multi-front synchronisation should be disabled for best performances. (those are the default settings).\nMake sure also to have at least french and english enabled and the internationalization page.\nIf you are running a prestashop version from source, properly setup your environment for production:\nexport SYMFONY_ENV=prod export SYMFONY_DEBUG=0 composer dump-autoload --optimize php bin/console cache:clear --env=prod --no-debug  Write down your settings Write down all the relevant informations which have an impact on your benchmark results:\n Server configuration (CPU / Memory / Disks\u0026hellip;) PHP / Apache / MySQL settings PrestaShop configuration and version  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/work-with-bulk-actions/",
	"title": "How to work with Bulk Actions?",
	"tags": [],
	"description": "",
	"content": " Do you know how to do it? Please feel free to contribute to the docs!\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/documentation/shortcodes/ref/",
	"title": "Internal and cross links",
	"tags": [],
	"description": "",
	"content": " Internal and cross links Cross links To link to another page in the documentation, use ref:\n[This is a link to Configuration]({{\u0026lt; ref \u0026quot;1.7/basics/configuration.md\u0026quot; \u0026gt;}})  Rendered result:\nThis is a link to Configuration\n Don\u0026rsquo;t forget to put the link between double quotes.\n Internal links To a link that points to a specific point in the current page, use relref:\n[This is a link to the first title]({{\u0026lt; relref \u0026quot;#cross-links\u0026quot; \u0026gt;}})  Rendered result:\nThis is a link to the first title\n Internal links need to be \u0026ldquo;slugified\u0026rdquo; to work.\nIf you feel lost, here\u0026rsquo;s a tool that will slugify your titles.\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Introduction Technical principles behind a module A PrestaShop module consists of a main PHP file with as many other PHP files as needed, as well as the necessary template (.tpl) files and assets (images, JavaScript, CSS, etc.) to display the module\u0026rsquo;s interface, whether to the customer (on the front office) or to the merchant (on the back office).\nAny PrestaShop module, once installed on an online shop, can interact with one or more \u0026ldquo;hooks\u0026rdquo;. Hooks enable you to hook/attach your code to the current View at the time of the code parsing (i.e., when displaying the cart or the product sheet, when displaying the current stock, etc.). Specifically, a hook is a shortcut to the various methods available from the Module object, as assigned to that hook.\nModules\u0026rsquo; operating principles Modules are the ideal way to let your talent and imagination as a developer express themselves, as the creative possibilities are many and you can do pretty much anything with PrestaShop\u0026rsquo;s module API.\nAny module:\n can display a variety of content (blocks, text, etc.), perform many tasks (batch update, import, export, etc.), interface with other tools, and much much more. can be made as configurable as necessary; the more configurable it is, the easier it will be to use, and thus will be able to address the needs of a wider range of users. can add functionalities to PrestaShop without having to edit its core files, thus making it easier to perform an update of PrestaShop without having the transpose all core changes. Indeed, you should always strive to stay away from core files when building a module, even though this may seem necessary in some situations.  Main differences between 1.6 and 1.7 modules PrestaShop 1.7 was built so that modules that were written for PS 1.6 could work almost as-is \u0026ndash; save for minor changes and a cosmetic update, the template files being in need of adapting to the 1.7 default theme.\nThe major module development changes in PrestaShop 1.7 are explained in details in this Build article, and are integrated into this updated documentation. If you already know how to create a module that works with PS 1.6, we strongly advise you to read that article from top to bottom in order to get up to speed with 1.7 development.\nA few native modules have been split between 1.6 \u0026amp; 1.7 versions of PrestaShop, as listed here:\n   Original module for PrestaShop 1.6 Updated module for PrestaShop 1.7     advancedeucompliance ps_legalcompliance   bankwire ps_wirepayment   blockadvertising ps_advertising   blockbanner ps_banner   blockbestsellers ps_bestsellers   blockcart ps_shoppingcart   blockcategories ps_categorytree   blockcms ps_linklist   blockcmsinfo ps_customtext   blockcontact ps_contactinfo   blockcurrencies ps_currencyselector   blockcustomerprivacy ps_dataprivacy   blocklanguages ps_languageselector   blocklayered ps_facetedsearch   blockmanufacturer ps_brandlist   blockmyaccount ps_customeraccountlinks   blocknewsletter ps_emailsubscription   blocknewproducts ps_newproducts   blockrss ps_rssfeed   blocksearch ps_searchbar   blocksocial ps_socialfollow   blockspecials ps_specials   blocksupplier ps_supplierlist   blocktopmenu ps_mainmenu   blockuserinfo ps_customersignin   blockviewed ps_viewedproduct   carriercompare ps_carriercomparison   cashondelivery ps_cashondelivery   cheque ps_checkpayment   crossselling ps_crossselling   feeder ps_feeder   followup ps_reminder   ganalytics ps_googleanalytics   homefeatured ps_featuredproducts   homeslider ps_imageslider   mailalerts ps_emailalerts   onboarding welcome   productscategory ps_categoryproducts   producttooltip ps_productinfo   socialsharing ps_sharebuttons    Modules folder PrestaShop\u0026rsquo;s modules are found in the /modules folder, which is at the root of the PrestaShop main folder. This is true for both default modules (provided with PrestaShop) and 3rd-party modules that are subsequently installed.\nModules can also be part of a theme if they are really specific to it. In that case, they would be in the theme\u0026rsquo;s own /modules folder, and therefore under the following path: /themes/[my-theme]/modules\nEach module has its own sub-folder inside the /modules folder: /bankwire, /birthdaypresent, etc.\nAbout the cache The /cache/class_index.php file contains the link between the class and the declaration file. If there is a caching issue, this file can safely be deleted.\nThe /config/xml folder contains the list of all the base modules:\ndefault_country_modules_list.xml must_have_modules_list.xml tab_modules_list.xml  When the store\u0026rsquo;s front-end doesn\u0026rsquo;t quite reflect your changes and emptying the browser\u0026rsquo;s cache is not effective, you should try emptying the following folders:\n/cache/smarty/cache /cache/smarty/compile  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/webservice/tutorials/prestashop-webservice-lib/",
	"title": "PrestaShop Webservice lib",
	"tags": [],
	"description": "",
	"content": " Install the lib Pre-requisites  You need a server with mod_rewrite enabled You need the curl extension enabled in PHP  Installing with Composer If you are starting a new project you can init your composer project along with the dependency:\ncomposer init --require=\u0026quot;Prestashop/Prestashop-webservice-lib:dev-master\u0026quot; -n composer install  Or if you already have an existing project simply add the dependency:\ncomposer require \u0026quot;Prestashop/Prestashop-webservice-lib\u0026quot;  The library is not PSR compliant and has no namespace therefore you need to update your composer.json file to include the class in your autoload:\n{ \u0026quot;require\u0026quot;: { \u0026quot;Prestashop/Prestashop-webservice-lib\u0026quot;: \u0026quot;dev-master\u0026quot; }, \u0026quot;autoload\u0026quot;: { \u0026quot;files\u0026quot;: [ \u0026quot;vendor/prestaShop/prestaShop-webservice-lib/PSWebServiceLibrary.php\u0026quot; ] } }  And regenerate your autoload:\ncomposer dump-autoload  Read a resource Then you will be able to use the PrestaShopWebservice class:\n\u0026lt;?php require_once 'vendor/autoload.php'; $url = 'http://example.com'; $key = 'YOUR_GENERATED_API_ACCESS_KEY'; $debug = false; $webService = new PrestaShopWebservice($url, $key, $debug); $xmlResponse = $webService-\u0026gt;get(['resource' =\u0026gt; 'addresses']); foreach ($xmlResponse-\u0026gt;addresses-\u0026gt;address as $address) { $addressId = (int) $address['id']; $addressXmlResponse = $webService-\u0026gt;get(['resource' =\u0026gt; 'addresses', 'id' =\u0026gt; $addressId]); $address = $addressXmlResponse-\u0026gt;address[0]; echo sprintf('ID: %s, alias: %s' . PHP_EOL, $address-\u0026gt;id, $address-\u0026gt;alias); }  Create a resource To help you create a resource you can use the synopsis url of the target resource, it will provide you a basic xml object that you can fill\n\u0026lt;?php require_once 'vendor/autoload.php'; $url = 'http://example.com'; $key = 'YOUR_GENERATED_API_ACCESS_KEY'; $debug = false; $webService = new PrestaShopWebservice($url, $key, $debug); $xmlResponse = $webService-\u0026gt;get(['url' =\u0026gt; $url . '/api/addresses?schema=blank']); $addressXML = $xmlResponse-\u0026gt;address[0]; $addressXML-\u0026gt;alias = 'My address'; $addressXML-\u0026gt;lastname = 'DOE'; $addressXML-\u0026gt;firstname = 'John'; $addressXML-\u0026gt;address1 = '5 oxford street'; $addressXML-\u0026gt;postcode = '75009'; $addressXML-\u0026gt;city = 'Paris'; $addressXML-\u0026gt;id_country = 1; try { $addedAddressResponse = $webService-\u0026gt;add([ 'resource' =\u0026gt; 'addresses', 'postXml' =\u0026gt; $xmlResponse-\u0026gt;asXML(), ]); $addressXML = $addedAddressResponse-\u0026gt;address[0]; echo sprintf(\u0026quot;Successfully create address with ID: %s\u0026quot;, (string) $addressXML-\u0026gt;id); } catch (PrestaShopWebserviceException $e) { echo $e-\u0026gt;getMessage(); }  Update a resource This is the same principle as the creation, except you request an existing resource as your XML source.\n\u0026lt;?php require_once 'vendor/autoload.php'; $url = 'http://example.com'; $key = 'YOUR_GENERATED_API_ACCESS_KEY'; $debug = false; $webService = new PrestaShopWebservice($url, $key, $debug); $xmlResponse = $webService-\u0026gt;get(['resource' =\u0026gt; 'addresses', 'id' =\u0026gt; 1]); $addressXML = $xmlResponse-\u0026gt;address[0]; $addressXML-\u0026gt;lastname = 'MOUSE'; $addressXML-\u0026gt;firstname = 'Mickey'; try { $addedAddressResponse = $webService-\u0026gt;edit([ 'resource' =\u0026gt; 'addresses', 'id' =\u0026gt; (int) $addressXML-\u0026gt;id, 'putXml' =\u0026gt; $xmlResponse-\u0026gt;asXML(), ]); $addressXML = $addedAddressResponse-\u0026gt;address[0]; echo sprintf(\u0026quot;Successfully updated address with ID: %s\u0026quot;, (string) $addressXML-\u0026gt;id); } catch (PrestaShopWebserviceException $e) { echo $e-\u0026gt;getMessage(); }  Delete a resource Deleting a resource is actually the simplest of the actions.\n\u0026lt;?php require_once 'vendor/autoload.php'; $url = 'http://example.com'; $key = 'YOUR_GENERATED_API_ACCESS_KEY'; $debug = false; $webService = new PrestaShopWebservice($url, $key, $debug); try { $webService-\u0026gt;delete([ 'resource' =\u0026gt; 'addresses', 'id' =\u0026gt; 1, ]); echo \u0026quot;Successfully deleted address\u0026quot;; } catch (PrestaShopWebserviceException $e) { echo $e-\u0026gt;getMessage() . ' ' .$e-\u0026gt;getTraceAsString(); }  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/documentation/why/",
	"title": "Why write documentation",
	"tags": [],
	"description": "",
	"content": " Why write technical documentation?  The best documentation is no documentation: code should be self-explanatory.\nAll the lazy developers in history\n Writing documentation is hard.\nWe try to find excuses and rationalize and lie to ourselves so we can feel better about with the fact that we should be doing it, but it\u0026rsquo;s \u0026ldquo;too much work\u0026rdquo;.\nHere are two good reasons to try and convince you to start writing documentation, and help you while you help others, too:\n1. You won\u0026rsquo;t remember that 6 months from now Just fixed a bug? Written a new feature? Cool! You may think you know your code now, but if you come back to it 6 months later, you will have forgotten most about. It will be as if someone else had written it.\nWrite it down now that it\u0026rsquo;s fresh on your mind. You will be happy you did it when you come back later looking for help finding out how \u0026ldquo;this\u0026rdquo; was done and how does \u0026ldquo;that\u0026rdquo; work.\nWhich bring us to\u0026hellip;\n2. Grep is sub-optimal Why browse the sources and reverse-engineer code when you can read a paragraph that\u0026rsquo;s written for humans? It\u0026rsquo;s not efficient to read 600 lines of code and run them in your head when you could simply google it.\nRemember, code is for computers and documentation is for humans. If you are reading this, that means you\u0026rsquo;re probably a human. Optimize for your time, too.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/controllers/admin-controllers/tabs/",
	"title": "Adding module links in the back-office side menu",
	"tags": [],
	"description": "",
	"content": " Adding module links in the back-office side menu  On the PrestaShop back office, the links on the side menu are linked to AdminControllers and ModuleAdminController classes. The first ones come from the PrestaShop Core, but the second ones are defined by the modules. If you want to add a link to your ModuleAdminControllers in the back office sidebar, this guide is for you.\nTabs registration In order to register new links, open your main module class.\nWe will now use a property called $tabs, storing an array of link details. Each of them contains a class (= link) to add in the side menu.\nHow to define a tab in the menu Depending on the options you provide, your links won’t be displayed the same way:\n class_name: Mandatory, this is the file called when the merchant will click on your link. This is the class name without the Controller part. name: Optional, this is the name displayed in the menu. If not provided, the class name is shown instead. parent_class_name: Optional if you want to display it in a subcategory. Go farther in this document to see available values. icon: Optional, will display an icon when the menu is reduced. visible: Optional, is of boolean type to determine whether you want to display the tab or not.  How to add names and their translations to a tab Be default, your tab will be displayed in the menu with its class name. If you want to use something more explicit, you can set the name property.\nOption 1: Use the same name for all languages If you want to add the same name to all available and active languages available on the shop, just set the ‘name’ key with a single string:\npublic $tabs = array( array( 'name' =\u0026gt; 'Merchant Expertise', // One name for all langs 'class_name' =\u0026gt; 'AdminGamification', 'visible' =\u0026gt; true, 'parent_class_name' =\u0026gt; 'ShopParameters', ));  Option 2: Use a different name for each language You can also add your translations per locale (ex.: fr-FR) or per language (ex.: fr), both are valid.\nIf a language is installed on the shop but is not found in your translated names, it will be automatically associated to the first value of the array.\nHence, we advise you to define the English value first.\npublic $tabs = array( array( 'name' =\u0026gt; array( 'en' =\u0026gt; 'Merchant Expertise', // Default value should be first 'fr' =\u0026gt; 'Expertise PrestaShop', ... ), 'class_name' =\u0026gt; 'AdminGamification', 'parent_class_name' =\u0026gt; 'ShopParameters', ));  Which parent to choose? Here is the default structure of the side-menu from PrestaShop at the moment this page is written. You can choose an element from this list to use as a parent.\n AdminDashboard SELL  AdminParentOrders  AdminOrders AdminInvoices AdminSlip AdminDeliverySlip AdminCarts  AdminCatalog  AdminProducts  AdminCategories AdminTracking AdminParentAttributesGroups AdminParentManufacturers AdminAttachments AdminParentCartRules   AdminParentCustomer  AdminCustomers AdminAddresses AdminOutstanding  AdminParentCustomerThreads  AdminCustomerThreads AdminOrderMessage AdminReturn  AdminStats AdminStock  AdminWarehouses AdminParentStockManagement AdminSupplyOrders AdminStockConfiguration   IMPROVE  AdminParentModulesSf  AdminModulesSf AdminModules AdminAddonsCatalog  AdminParentThemes  AdminThemes AdminThemesCatalog AdminCmsContent AdminModulesPositions AdminImages AdminParentShipping AdminParentPayment  AdminInternational  AdminParentLocalization AdminParentCountries AdminParentTaxes AdminTranslations   CONFIGURE  ShopParameters  AdminParentPreferences AdminParentOrderPreferences AdminPPreferences AdminParentCustomerPreferences AdminParentStores AdminParentMeta AdminParentSearchConf  AdminAdvancedParameters  AdminInformation AdminPerformance AdminAdminPreferences AdminEmails AdminImport AdminParentEmployees AdminParentRequestSql AdminLogs AdminWebservice AdminShopGroup AdminShopUrl    How to check the tabs registration Once you\u0026rsquo;re done, just install (or reset) your module.\nThe $tabs property will be read from PrestaShop and the tabs will be automatically displayed on the side menu. They will stay as long as your module is installed.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/webservice/tutorials/change_product_image/",
	"title": "Change product image",
	"tags": [],
	"description": "",
	"content": " Adding a new image to a product To create a new image we are going to use the /images/products API. We won\u0026rsquo;t use the PrestaShopWebservice class here but a simple curl request.\n\u0026lt;?php $url = 'http://example.com'; $key = 'YOUR_GENERATED_API_ACCESS_KEY'; $psProductId = 19; $urlImage = $url.'/api/images/products/'.$psProductId.'/'; //Here you set the path to the image you need to upload $image_path = '/path/to/the/image.jpg'; $image_mime = 'image/jpg'; $args['image'] = new CurlFile($image_path, $image_mime); $ch = curl_init(); curl_setopt($ch, CURLOPT_HEADER, 1); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLINFO_HEADER_OUT, 1); curl_setopt($ch, CURLOPT_URL, $urlImage); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_USERPWD, $key.':'); curl_setopt($ch, CURLOPT_POSTFIELDS, $args); $result = curl_exec($ch); $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch); if (200 == $httpCode) { echo 'Product image was successfully created.'; }  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/documentation/how/",
	"title": "Contribute",
	"tags": [],
	"description": "",
	"content": " Contribute to PrestaShop\u0026rsquo;s Developer Documentation This documentation is collaborative, hosted on GitHub and served through GitHub Pages. Contributions are welcome!\nTL;DR – Contributing is super easy! Edit any page by clicking on the \u0026ldquo;Improve this page\u0026rdquo; link at the top right corner of your screen.\nWhat to contribute We are happy that you want to contribute to the project! Here are some examples on how you can help.\nWrite If you know your way around the guts of PrestaShop and you are comfortable writing in English:\n Pick up a subject that is either insufficiently or not at all covered by the documentation already, and write about it. If the subject is already covered, you can improve it by adding screenshots or examples. You can also write short tutorials.  Plan Found a subject that is not covered or needs to be developed? Let us know by submitting an issue on GitHub. That way we will know where to focus on.\nReview \u0026amp; proofread You can help us by reviewing new contributions. Even if you aren\u0026rsquo;t that technical, if your English is good, you can help by proofreading.\nIf you find an error, you can let us know by submitting an issue, or even fix it by yourself (read below for how).\nSee the all the current open Pull Requests.\nHow to edit a page To contribute, you\u0026rsquo;ll need a GitHub account. If you don\u0026rsquo;t have one, don\u0026rsquo;t worry! It\u0026rsquo;s free and it only takes a couple minutes. Create your GitHub account.\nThere are two ways to contribute to this documentation, each having its advantages:\n Edit any page on Github – Best if you don\u0026rsquo;t know git or you just want to quickly correct something. Edit on your computer – Best if you know git and/or you want to see how your changes look.  Editing on your computer is recommended if you already know your way around git and the GitHub workflow, or if you want to work on the site itself. It will also allow you to build the site locally and check out exactly how your changes will look.\n Regardless of the path you choose to contribute, you\u0026rsquo;ll end up creating a Pull Request – don\u0026rsquo;t forget to submit it!.\nOnce your PR is submitted, the team will promptly reviewed it and do its best to see that your contribution is added to the documentation!\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/contribute_using_docker/",
	"title": "Contribute using Docker",
	"tags": [],
	"description": "",
	"content": " How to become a Core Contributor using Docker If you\u0026rsquo;re reading this, thank you! This means you\u0026rsquo;re interested on contributing to PrestaShop. You probably are a PrestaShop developer, and your use of the project is slighty different from ours. For instance, there are little differences between PrestaShop 1.7 (the release) and the branch 1.7 of PrestaShop in GitHub repository. This is because we create a release usable by everyone from our sources.\nTo be able to contribute you need:\n a GitHub account, to know basics of git, to have docker installed in your computer;  No need to \u0026ldquo;know\u0026rdquo; docker, but you should have \u0026ldquo;docker\u0026rdquo; command available in your terminal.\n If you need to install \u0026ldquo;docker\u0026rdquo;, you can follow their Documentation.\n Install PrestaShop Core To install the core, you need to fork PrestaShop repository. A fork is a copy of original project on GitHub. If you don\u0026rsquo;t know what is a fork or how to fork a project on GitHub, you can follow the GitHub tutorial.\nOnce you have a forked the project, you need to download it on your computer.\nFor instance, if your GitHub nickname is preston, this is what you should do in your terminal:\ngit clone https://github.com/preston/PrestaShop.git   Of course, you need to replace \u0026ldquo;preston\u0026rdquo; by your own nickname here.\n Then you can start the effective installation:\ncd PrestaShop docker-compose up   The installation can take between 10-15 minutes, don\u0026rsquo;t close the terminal!\n You\u0026rsquo;ll see a lot of information displayed in your terminal, you should spot the following ones:\nprestashop-git | \\n* Installing PrestaShop, this may take a while ... prestashop-git | -- Installation successful! -- prestashop-git | \\n* Almost ! Starting web server now\\n  At this point, your PrestaShop installation is ready and the website is available at http://localhost:8001.\n You can now close the terminal if you want.\n Make your first contribution The very first step to create a pull request is to create your own git branch.\nLet\u0026rsquo;s say you want to suggest a new feature, like emoticon support everywhere. A correct name for your git branch could be \u0026ldquo;add-emoticons-support\u0026rdquo;:\ngit checkout -b \u0026quot;add-emoticons-support\u0026quot;  Then you can start to do changes on PrestaShop Core, and create commits: YaY!\n A good practice is to have meaningful commits labels: it\u0026rsquo;s better to have \u0026ldquo;corrected type hinting in FooBar\u0026rdquo; than \u0026ldquo;fixed stuff\u0026rdquo;.\n Launch the test suite Your changes now sounds ok, and you\u0026rsquo;re almost ready to share your changes with the community. Before all, you may ensure your changes doesn\u0026rsquo;t break everything: this is why we have a test suite you can use.\nYou can execute it in your dockerized PrestaShop application without alter your website (it uses a specific database).\ndocker exec prestashop-git sh tests/check_phpunit.sh  Publish your contribution on GitHub Once your changes sounds good and tests pass in your local computer, it\u0026rsquo;s time to publish your work online and make a pull request.\nThe last thing you need to do in the terminal is to publish your branch on GitHub:\ngit push origin add-emoticons-support   You\u0026rsquo;ll need to use your GitHub credentials, this is totally ok.\n Then, you can create your Pull Request on GitHub! If you don\u0026rsquo;t know how to do it, you can read GitHub documentation.\n Don\u0026rsquo;t forget to complete the contribution table, this is really important for the Core Team to really understand what is the value of your contribution.\n Syncing your fork PrestaShop Core is a really active project with more than 30 contributions accepted per week, so your copy will become outdated really fast. To make your own copy up to date with the original project, only few commands are required:\n You need to execute these commands at the root of your copy/fork.\n git remote add ps https://github.com/PrestaShop/PrestaShop.git git fetch ps git rebase -i ps/develop git push -f origin develop  What we have done here? We have added the location of original project to git so he can retrieve the latest commits, and the we apply this \u0026ldquo;history\u0026rdquo; to our local project. Note, here we have updated develop branch of PrestaShop project and same commands can be used to refresh every git branch.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/",
	"title": "Core Development",
	"tags": [],
	"description": "",
	"content": " Chapter 2 Core Development This section describes technical aspects of the PrestaShop Core.\n The PrestaShop Webservices   Coding standards   Naming conventions   The PrestaShop architecture   Database   PrestaShop components   Internationalization   Register a new hook   How to compile assets   How to send e-mails   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/creation/module-file-structure/",
	"title": "Folder structure",
	"tags": [],
	"description": "",
	"content": " Module file structure A module is made of a lot of files, all stored in a folder that bears the same name as the module, that folder being in turn stored in the /modules folder at the root of the main PrestaShop folder: /modules/\u0026lt;name_of_the_module\u0026gt;/.\nHere are the possible files and folders for a PrestaShop 1.7 module:\n➜ module tree -L 3 . ├── config │ └── services.yml ├── config.xml ├── controllers ├── logo.png ├── module_name.php ├── override ├── themes │ └── theme_name │ └── modules ├── translations ├── upgrade └── views ├── css ├── img ├── js └── templates 13 directories, 4 files  Main file: module_name.php The main PHP file should have the same name as the module’s root folder. For instance, for the BlockCMS module:\n Folder name: /modules/blockcms Main file name: /modules/blockcms/blockcms.php  Icon files: logo.png \u0026amp;\u0026amp; logo.gif This needs to be a 32*32 pixels PNG file.\nTemplating: the views folder This folder contains your module’s template files (.tpl or .html.twig files).\nDepending on your needs, your files are located in differents subfolders:\n /views/templates/admin: For template files used by the module’s administration legacy controllers. /views/templates/front: For template files used by the module’s front office controllers. /views/templates/hook: For template files used by the module’s hooks.  If you want to override a Twig template file from Back Office, declare your own following the same path in /views/PrestaShop subfolder. For instance, if you want to override product.html.twig template located in Admin/Product/ProductPage, create your own file in /views/PrestaShop/Admin/ProductPage/product.html.twig.\nEvery asset you need to use in the module (css, js or image files) must be located in their folders: /views/{js, css, img, fonts}.\nMake actions and pages: the controllers folder This folder contains the Controller files. You can use the same sub-folder paths as for the View files.\nFor instance, /modules/\u0026lt;module_name\u0026gt;/controllers/front/payment.php is a valid path to share an action with your Front Office.\nOverride Core classes of PrestaShop: the override folder  Try to avoid the overriding of Core classes, this make the upgrade of your application risky.\n You need to follow the same path as the PrestaShop application in your module. For instance:\n Shop class  PrestaShop class =\u0026gt; classes/shop/Shop.php Module override =\u0026gt; modules/\u0026lt;module_name\u0026gt;/override/classes/shop/Shop.php   If /modules/\u0026lt;module_name\u0026gt;/override/classes/Shop.php exists in your module and is not overriden by any more module later, this class will be used instead of the native ShopCore class everywhere in your application.\nTranslate your strings: the translations folder This folder contains a php file for each locale: fr.php, es.php. Translating your module can be done within your shop administration panel, in International \u0026gt; Translations \u0026gt; Installed modules translations.\nAdapt behavior of others modules: the themes/\u0026lt;theme_name\u0026gt;/modules folder This folder is essential during modifications of an existing module, so that you can adapt it without having to touch its original files. Notably, it enables you to handle the module’s template files in various ways, depending on the current theme.\nManage the upgrade: the upgrade folder When releasing a new version of the module, the older might need an upgrade of its data or files. This can be done using this folder.\nConfiguration file: services.yml In services.yml file, you can register your own classes as a Symfony service and alter the ones provided by PrestaShop.\nCache file: config.xml If it does not exist yet, config.xml file is automatically generated by PrestaShop when the module is installed.\nIt contains some properties on the main module class and optimizes the loading of the module list in the back office.\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; ?\u0026gt; \u0026lt;module\u0026gt; \u0026lt;name\u0026gt;mymodule\u0026lt;/name\u0026gt; \u0026lt;displayName\u0026gt;\u0026lt;![CDATA[My module]]\u0026gt;\u0026lt;/displayName\u0026gt; \u0026lt;version\u0026gt;\u0026lt;![CDATA[1.0]]\u0026gt;\u0026lt;/version\u0026gt; \u0026lt;description\u0026gt;\u0026lt;![CDATA[Description of my module.]]\u0026gt;\u0026lt;/description\u0026gt; \u0026lt;author\u0026gt;\u0026lt;![CDATA[Firstname Lastname]]\u0026gt;\u0026lt;/author\u0026gt; \u0026lt;tab\u0026gt;\u0026lt;![CDATA[front_office_features]]\u0026gt;\u0026lt;/tab\u0026gt; \u0026lt;confirmUninstall\u0026gt;Are you sure you want to uninstall?\u0026lt;/confirmUninstall\u0026gt; \u0026lt;is_configurable\u0026gt;0\u0026lt;/is_configurable\u0026gt; \u0026lt;need_instance\u0026gt;0\u0026lt;/need_instance\u0026gt; \u0026lt;limited_countries\u0026gt;\u0026lt;/limited_countries\u0026gt; \u0026lt;/module\u0026gt;  A few details:\n is_configurable indicates whether the module has a configuration page or not. need_instance indicates whether an instance of the module must be created when it is displayed in the module list. This can be useful if the module has to perform checks on the PrestaShop configuration, and display warning message accordingly. limited_countries is used to indicate the countries to which the module is limited. For instance, if the module must be limited to France and Spain, use \u0026lt;limited_countries\u0026gt;fr,es\u0026lt;/limited_countries\u0026gt;.  External libraries All external library you\u0026rsquo;d use should be put in a dedicated folder.\nThat folder can use one of these names: \u0026lsquo;lib\u0026rsquo;, \u0026lsquo;libs\u0026rsquo;, \u0026lsquo;libraries\u0026rsquo;, \u0026lsquo;sdk\u0026rsquo;, \u0026lsquo;vendor\u0026rsquo;, \u0026lsquo;vendors\u0026rsquo;.\nChoose the most appropriate one for your library (indeed, \u0026lsquo;libraries\u0026rsquo; doesn\u0026rsquo;t not have the same meaning as \u0026lsquo;sdk\u0026rsquo;). You can have more than one such folder, for instance /sdk and /vendor.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/controllers/front-controllers/",
	"title": "Front controllers",
	"tags": [],
	"description": "",
	"content": " Front controllers These class are accessible from the front-office and add features to the customers.\nCreating a front controller In order to have a front controller read by PrestaShop, these 3 rules have to be followed:\n it is stored in the subfolder controllers/front/ of the module. in CamelCase, the class name follows this format: \u0026lt;ModuleName\u0026gt;\u0026lt;FileName\u0026gt;ModuleFrontController. it extends the class ModuleFrontController.  Minimum controller example Let\u0026rsquo;s say we want a controller responsible of payments validation in our module cheque.\nWe create a file /modules/cheque/controllers/front/validation.php and its class:\n/** * \u0026lt;ModuleName\u0026gt; =\u0026gt; cheque * \u0026lt;FileName\u0026gt; =\u0026gt; validation.php * Format expected: \u0026lt;ModuleName\u0026gt;\u0026lt;FileName\u0026gt;ModuleFrontController */ class ChequeValidationModuleFrontController extends ModuleFrontController { }  That\u0026rsquo;s all, methods added to the class will be taken in account by PrestaShop automatically.\nAdding methods to the controller There are basically two kinds of HTTP calls possible for a controller:\n Calls with GET, used to only retrieve data, Calls with POST, used as soon as some data is modified on the shop.  Depending of the request made to the controller, a different method will be called by the core.\nDisplay content (GET) Handling GET requests can be done by implementing the method initContent() in the front controller. Note the parent class also implements it, do not forget to call it as well.\nIts purpose should be assigning the variables to smarty, and setting the template to be displayed.\nAssign variables to smarty The smarty engine is available in the context property of the controller. Assigning variables can be done with its method assign(array $vars).\npublic function initContent() { // In the template, we need the vars paymentId \u0026amp; paymentStatus to be defined $this-\u0026gt;context-\u0026gt;smarty-\u0026gt;assign( array( 'paymentId' =\u0026gt; Tools::getValue('id'), // Retrieved from GET vars 'paymentStatus' =\u0026gt; [...], )); }  Display HTML content This is the second part we expect in the method initContent().\nHTML content should be stored in a smarty template, available in the module subfolder views/templates/front/.\nThe method setTemplate(...) expect the template file name as parameter. There is no need to write its complete path, as PrestaShop expects to find it in the folder views/templates/front/ of the same module.\npublic function initContent() { // In the template, we need the vars paymentId \u0026amp; paymentStatus to be defined $this-\u0026gt;context-\u0026gt;smarty-\u0026gt;assign( array( 'paymentId' =\u0026gt; Tools::getValue('id'), // Retrieved from GET vars 'paymentStatus' =\u0026gt; [...], )); // Will use the file modules/cheque/views/templates/front/validation.tpl $this-\u0026gt;setTemplate('module:cheque/views/templates/front/validation.tpl'); }  Handle actions (POST) POST requests will be managed from the method postProcess().\nIt does not receive parameters and does not expect any value to be returned, but user input can be checked with Tools::getIsset(...) and retrieved with Tools::getValue(...).\nWhen done, controllers generally redirects to another route, by using Tools::redirect(\u0026lt;url\u0026gt;).\nAccessing a module front controller Addresses to your controller can be generated easily with the class Link:\npublic function Link::getModuleLink($module, $controller, array $params = array());  $module is the technical name of the module, $controller is the controller file name (without \u0026lsquo;.php\u0026rsquo;), and $params is an array of variables to add in a customized route or simply as GET params.\nThe generated address handles automatically HTTP or HTTPS environments, with or without URL rewriting.\nExample of method calls Context::getContext()-\u0026gt;link-\u0026gt;getModuleLink('cheque', 'validation', array('idPayment' =\u0026gt; 1337);   Without URL rewriting: http://\u0026lt;shop_domain\u0026gt;/index.php?idPayment=1337\u0026amp;fc=module\u0026amp;module=cheque\u0026amp;controller=validation\u0026amp;id_lang=1 With URL rewriting: http://\u0026lt;shop_domain\u0026gt;/en/module/cheque/validation?idPayment=1337  Restricting access Logged customers only Set the property $auth to true if you want guests to be redirected to the login page automatically.\npublic $auth = true; public $guestAllowed = false;  To everybody, temporarily You can force the maintenance page to be displayed when a customer reaches a controller.\nprotected $maintenance = true;  Non-SSL calls When SSL is enabled to a shop, you can force a call to a controller to be secured by redirecting it to HTTPS.\npublic $ssl = true;  Addendum: Execution order of the controller’s functions  __construct(): Sets all the controller’s member variables. init(): Initializes the controller. setMedia() or setMobileMedia(): Adds all JavaScript and CSS specifics to the page so that they can be combined, compressed and cached (see PrestaShop’s CCC tool, in the back office “Performance” page, under # the “Advanced preferences” menu). postProcess(): Handles ajaxProcess. initHeader(): Called before initContent(). initContent(): Initializes the content. initFooter(): Called after initContent(). display() or displayAjax(): Displays the content.  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/scale/benchmark/front-office/",
	"title": "Front-Office Benchmark",
	"tags": [],
	"description": "",
	"content": " How to benchmark your PrestaShop Shop (Front-office) Benchmark methodology In order to benchmark the performances of your shop, you will use the siege testing tool. Try to always use the latest available version HERE.\nSetup siege configuration Create a txt file url.txt with various urls from your shop: (prepend with the domain of your shop)\nhttp://localhost:8080/ http://localhost:8080/panier http://localhost:8080/meilleures-ventes http://localhost:8080/nouveaux-produits http://localhost:8080/promotions http://localhost:8080/men/1-1-hummingbird-printed-t-shirt.html#/1-taille-s/8-couleur-blanc http://localhost:8080/accessories/3-mug-the-best-is-yet-to-come.html http://localhost:8080/3-clothes http://localhost:8080/6-accessories http://localhost:8080/3-clothes?q=Prix-€-28-34 http://localhost:8080/magasins http://localhost:8080/fournisseur http://localhost:8080/recherche?controller=search\u0026amp;s=sweater http://localhost:8080/2-accueil  Run the siege benchmark Then run a siege benchmark using this file:\nsiege -b -i -c 1 -t 20S --no-parser -f url.txt  We will first warmup the cache by testing 1 time with 1 concurrent user, and then progressively raise the number of concurrent users until the performances actually decreases.\nRaise the concurrent parameter (-c 1) to the number of concurrent users you want to test.\nEx for 10 concurrent users without MySQL query cache:\nsiege -b -i -c 10 -t 20S --no-parser -f url.txt Lifting the server siege... Transactions:\t879 hits Availability:\t100.00 % Elapsed time:\t19.26 secs Data transferred:\t37.32 MB Response time:\t0.22 secs Transaction rate:\t45.64 trans/sec Throughput:\t1.94 MB/sec Concurrency:\t9.92 Successful transactions: 879 Failed transactions:\t0 Longest transaction:\t0.68 Shortest transaction:\t0.03  With MySQL query cache enabled:\nLifting the server siege... Transactions:\t1114 hits Availability:\t100.00 % Elapsed time:\t19.46 secs Data transferred:\t46.70 MB Response time:\t0.17 secs Transaction rate:\t57.25 trans/sec Throughput:\t2.40 MB/sec Concurrency:\t9.93 Successful transactions: 1114 Failed transactions:\t0 Longest transaction:\t0.57 Shortest transaction:\t0.02  Interpret the results In the siege result output, here is the useful results:\nTransactions The total number of pages loaded during the benchmark. The higher the better.\nAvailability It tells you the amount of pages which have failed to load.\nResponse time The average response time of your pages. The lower the better.\nTransaction rate The number of pages loaded by second. The higher the better.\nConcurrency The number of concurrent transaction the software has been able to run. Should be close to the requested concurrent user setting.\nFailed transactions Closely related to Availability, the number of pages which have failed to load (404, 503, \u0026hellip;)\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/hooks/",
	"title": "Hooks",
	"tags": [],
	"description": "",
	"content": " Hooks Hooks are a way to associate your code to some specific PrestaShop events.\nMost of the time, they are used to insert content in a page. The place it will be added (header, footer, left or right column \u0026hellip;) will depend on the hook you choose.\nHooks can also be used to perform specific actions under certain circumstances (i.e. sending an e-mail to the client on an order creation).\nNaming scheme Hook names are prefixed with \u0026ldquo;action\u0026rdquo; or \u0026ldquo;display\u0026rdquo;. This prefix indicates if a hook is triggered by an event or if it\u0026rsquo;s used to display content:\n action\u0026lt;Something\u0026gt; Triggered by specific events that take place in PrestaShop. display\u0026lt;Something\u0026gt; Result in something being displayed, either in the front-end or the back-end.  Using hooks Registration Every hook you want to use must be registered first. This is usually done during the installation of your module, by calling the method Module::registerHook($hookName).\npublic function install() { // [...] $this-\u0026gt;registerHook('displayHeader'); $this-\u0026gt;registerHook('displayFooter'); // [...] }  If you do not know where you can register, a list of available hooks is available.\nExecution For each registered hook, you must create a non-static public method, starting with the \u0026ldquo;hook\u0026rdquo; keyword followed by the name of the hook you want to use (starting with either \u0026ldquo;display\u0026rdquo; or \u0026ldquo;action\u0026rdquo;).\nThis method receives one (and only one) argument: an array of the contextual information sent to the hook.\npublic function hookDisplayHeader(array $params) { // Your code. } public function hookDisplayFooter(array $params) { // Your code. } public function hookActionOtherHook(array $params) { // Your code. }  Remember, in order for a module to respond to a hook call, it must be registered within PrestaShop.\nTriggering a hook In a controller It is easy to call a hook from within a controller: you simply have to use its name with the Hook::exec($hook_name, $hook_args = array()) method. Some parameters can be sent as well.\nFor instance:\n$this-\u0026gt;context-\u0026gt;smarty-\u0026gt;assign( 'HOOK_LEFT_COLUMN', Hook::exec('displayLeftColumn') );  In a theme It is easy to call a hook from within a template file (.tpl): you simply have to use its name with the hook function. You can add the name of a module that you want the hook execute.\nBasic call of a hook:\n{hook h='displayLeftColumn'}  Call of a hook for a specific module:\n{hook h='displayLeftColumn' mod='blockcart'}  Going further: Creating your own hook You can create new PrestaShop hooks by adding a new record in the Hook table. This can be done with the Hook class, which inherit ObjectModel features:\n$hook = new Hook(); $hook-\u0026gt;name = 'displayAtSpecificPlace'; $hook-\u0026gt;title = 'The name of your hook', $hook-\u0026gt;description = 'This is a custom hook!'; $hook-\u0026gt;add(); // return true on success  \u0026hellip;but PrestaShop enables you to do it the easy way:\n$this-\u0026gt;registerHook('displayAtSpecificPlace');  If the hook \u0026ldquo;displayAtSpecificPlace\u0026rdquo; doesn\u0026rsquo;t exist, PrestaShop will create it for you.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/contribute-reporting-issues/",
	"title": "How to use GitHub to report an issue",
	"tags": [],
	"description": "",
	"content": " How to use GitHub to report an issue PrestaShop is using GitHub to track bugs and issues. This is the best place to describe bugs you are witnessing on your PrestaShop installation, and have the developers try to fix it.\nCreating your account In order to participate, you need to create an account to use the bug tracker.\nCreate your account here.\nFill all fields and validate your account request, then follow the different steps.\nOnce your account is validated, click here to log in.\nCreating an issue You can now create your first issue:\n Go to the list of issues Click on the \u0026ldquo;New issue\u0026rdquo; button on the right. Choose between a \u0026ldquo;Bug report\u0026rdquo;, or a \u0026ldquo;Feature request\u0026rdquo;, and click on \u0026ldquo;Get started\u0026rdquo;  A text editors appears:\nIn order to fill the required information, just use the text editor. You can use the \u0026ldquo;preview\u0026rdquo; tab to see how your issue will be published.\nThere are four main sections:\n Describe the bug, a clear and concise description of what the bug is. To Reproduce, describe the different steps and information to reproduce the issue. Screenshots, add screenshots in this section. Additionnal information, like your version of PHP and Mysql and your server configuration. Click the \u0026ldquo;Submit new issue\u0026rdquo; button when you are done.  Best practices for writing an issue When writing a bug report, please use these guidelines:\n Make sure you can reproduce your bug every time. Make sure your software is up to date.  Ideally, test an in-development version to see whether your bug has already been fixed.  Search the Forge to see whether your bug has already been reported. Write a clear summary. Write precise steps to reproduce. Be specific and verbose: do not fear to give details on how you did reproduce the bug.  After your steps, precisely describe the observed result and the expected result.   These are inspired from Mozilla\u0026rsquo;s own guidelines.\nGitHub provides a very good documentation about how to write issues with it\u0026rsquo;s flavoured Markdown. It is possible to highlight code syntax, add pictures, or even to link issues and pull requests.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/work-with-grid-actions/",
	"title": "How to work with Grid Actions?",
	"tags": [],
	"description": "",
	"content": " Do you know how to do it? Please feel free to contribute to the docs!\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/hooks/list-of-hooks/",
	"title": "List of hooks",
	"tags": [],
	"description": "",
	"content": " List of hooks in PrestaShop 1.7 Update notes A couple of hooks were modified between 1.7.0.x and 1.7.1.x.\n actionDeleteProductInCartAfter has been divided into two hooks:  actionObjectProductInCartDeleteBefore. actionObjectProductInCartDeleteAfter.  displayProductButtons has been renamed into displayProductAdditionalInfo.\nDon’t worry, we kept an alias :)  Full list  action\u0026lt;AdminControllerName\u0026gt;\u0026lt;Action\u0026gt;After Called after performing \u0026lt;Action\u0026gt; in any \u0026lt;AdminController\u0026gt;\nLocated in: /classes/controller/AdminController.php\nParameters:\narray( 'controller' =\u0026gt; (AdminController), 'return' =\u0026gt; (mixed) );  action\u0026lt;AdminControllerName\u0026gt;\u0026lt;Action\u0026gt;Before Called before performing \u0026lt;Action\u0026gt; in any \u0026lt;AdminController\u0026gt;\nLocated in: /classes/controller/AdminController.php\nParameters:\narray( 'controller' =\u0026gt; (AdminController) );  action\u0026lt;AdminControllerName\u0026gt;FormModifier Called when rendering a form in any \u0026lt;AdminController\u0026gt;\nLocated in: /classes/controller/AdminController.php\nParameters:\narray( 'object' =\u0026gt; \u0026amp;(ObjectModel), 'fields' =\u0026gt; \u0026amp;(array), 'fields_value' =\u0026gt; \u0026amp;(array), 'form_vars' =\u0026gt; \u0026amp;(array), );  action\u0026lt;AdminControllerName\u0026gt;ListingFieldsModifier Located in: /classes/controller/AdminController.php\nParameters:\narray( 'select' =\u0026gt; \u0026amp;(string), 'join' =\u0026gt; \u0026amp;(string), 'where' =\u0026gt; \u0026amp;(string), 'group_by' =\u0026gt; \u0026amp;(string), 'order_by' =\u0026gt; \u0026amp;(string), 'order_way' =\u0026gt; \u0026amp;(string), 'fields' =\u0026gt; \u0026amp;(array) );  action\u0026lt;AdminControllerName\u0026gt;OptionsModifier Located in: /classes/controller/AdminController.php\nParameters:\narray( 'options' =\u0026gt; \u0026amp;(array), 'option_vars' =\u0026gt; \u0026amp;(array), );  actionAdmin\u0026lt;Action\u0026gt;After Called after performing \u0026lt;Action\u0026gt; in any admin controller\nLocated in: /classes/controller/AdminController.php\nParameters:\narray( 'controller' =\u0026gt; (AdminController), 'return' =\u0026gt; (mixed) );  actionAdmin\u0026lt;Action\u0026gt;Before Called before performing \u0026lt;Action\u0026gt; in any admin controller\nLocated in: /classes/controller/AdminController.php\nParameters:\narray( 'controller' =\u0026gt; (AdminController) );  actionAdminControllerSetMedia Located in: /classes/controller/AdminController.php\nParameters:\nN/A  actionAdminLoginControllerSetMedia Called after adding media to admin login page header\nLocated in: /controllers/admin/AdminLoginController.php\nParameters:\nN/A  actionAdminMetaAfterWriteRobotsFile Called after generating the robots.txt file\nLocated in: /classes/Tools.php\nParameters:\narray( 'rb_data' =\u0026gt; (array) File data, 'write_fd' =\u0026gt; \u0026amp;(resource) File handle );  actionAdminMetaBeforeWriteRobotsFile Called before generating the robots.txt file\nLocated in: /classes/Tools.php\nParameters:\narray( 'rb_data' =\u0026gt; \u0026amp;(array) File data );  actionAdminMetaSave Called after saving the configuration in AdminMeta\nLocated in: /controllers/admin/AdminMetaController.php\nParameters:\nN/A  actionAdminOrdersTrackingNumberUpdate Located in: /controllers/admin/AdminOrdersController.php\nParameters:\narray( 'order' =\u0026gt; (Order), 'customer' =\u0026gt; (Customer), 'carrier' =\u0026gt; (Carrier) );  actionAdminProductsListingFieldsModifier Located in: /src/Adapter/Product/AdminProductDataProvider.php\nParameters:\narray( '_ps_version' =\u0026gt; (string) PrestaShop version, 'sql_select' =\u0026gt; \u0026amp;(array), 'sql_table' =\u0026gt; \u0026amp;(array), 'sql_where' =\u0026gt; \u0026amp;(array), 'sql_order' =\u0026gt; \u0026amp;(array), 'sql_limit' =\u0026gt; \u0026amp;(string), );  actionAdminProductsListingResultsModifier Located in: /src/Adapter/Product/AdminProductDataProvider.php\nParameters:\narray( '_ps_version' =\u0026gt; (string) PrestaShop version, 'products' =\u0026gt; \u0026amp;(PDOStatement), 'total' =\u0026gt; (int), );  actionAdminThemesControllerUpdate_optionsAfter Located in: /controllers/admin/AdminThemesController.php\nParameters:\nN/A  actionAjaxDie\u0026lt;ControllerName\u0026gt;\u0026lt;Method\u0026gt;Before Located in: /classes/controller/Controller.php\nParameters:\narray( 'value' =\u0026gt; (string) );  actionAjaxDieBefore (deprecated since 1.6.1.1)\nLocated in: /classes/controller/Controller.php\n actionAttributeCombinationDelete Located in: /classes/Combination.php\n actionAttributeCombinationSave Located in: /classes/Combination.php\n actionAttributeDelete Called when deleting an attributes features value\nLocated in: /classes/Attribute.php\n actionAttributeGroupDelete Called while deleting an attributes group\nLocated in: /classes/AttributeGroup.php\n actionAttributeGroupSave Called while saving an attributes group\nLocated in: /classes/AttributeGroup.php\n actionAttributeSave Called while saving an attributes features value\nLocated in: /classes/Attribute.php\n actionAuthentication After successful customer authentication\nLocated in: /classes/form/CustomerLoginForm.php\n actionAuthenticationBefore Before a customer successfully signs in\nLocated in: /classes/form/CustomerLoginForm.php\n actionBeforeAjaxDie\u0026lt;ControllerName\u0026gt;\u0026lt;Method\u0026gt; (deprecated since 1.6.1.1) → actionAjaxDie\u0026lt;ControllerName\u0026gt;\u0026lt;Method\u0026gt;Before\nLocated in: /classes/controller/Controller.php\n actionBeforeCartUpdateQty Located in: /classes/Cart.php\n actionCarrierProcess Carrier process\nLocated in: /classes/checkout/CheckoutDeliveryStep.php\n actionCarrierUpdate This hook is called when a carrier is updated\nLocated in:\n /controllers/admin/AdminCarrierWizardController.php /controllers/admin/AdminCarriersController.php   actionCartSave After a product is added to the cart or if the cart\u0026rsquo;s content is modified\nLocated in: /classes/Cart.php\n actionCartSummary Located in: /classes/Cart.php\n actionCartUpdateQuantityBefore Located in: /classes/Cart.php\n actionCategoryAdd Invoked when a category is created\nLocated in: /classes/Category.php\n actionCategoryDelete Invoked when a category is deleted\nLocated in: /classes/Category.php\n actionCategoryUpdate Invoked when a category is modified\nLocated in:\n /classes/Category.php /controllers/admin/AdminProductsController.php   actionClearCache Available since: 1.7.1 \nInvoked when the smarty cache is cleared\nLocated in: /classes/Tools.php\n actionClearCompileCache Available since: 1.7.1 \nInvoked when the smarty compile cache is cleared\nLocated in: /classes/Tools.php\n actionClearSf2Cache Available since: 1.7.1 \nInvoked when the Symfony cache is cleared\nLocated in: /classes/Tools.php\n actionCustomerAccountAdd Invoked when a new customer creates an account successfully\nLocated in: /classes/form/CustomerPersister.php\nParameters:\narray( '_POST' =\u0026gt; (array) $_POST, 'newCustomer' =\u0026gt; (object) Customer object );  actionCustomerAccountUpdate Invoked when a customer updates its account successfully\nLocated in: /classes/form/CustomerPersister.php\n actionCustomerAddGroups Located in: /classes/Customer.php\n actionCustomerBeforeUpdateGroup Located in: /classes/Customer.php\n actionCustomerLogoutAfter Located in: /classes/Customer.php\n actionCustomerLogoutBefore Located in: /classes/Customer.php\n actionDeliveryPriceByPrice Located in: /classes/Carrier.php\n actionDeliveryPriceByWeight Located in: /classes/Carrier.php\n actionDispatcher Located in: /classes/Dispatcher.php\n actionDispatcherAfter Available since: 1.7.1 \nThis hook is called at the end of the dispatch method of the Dispatcher\nLocated in: /classes/Dispatcher.php\n actionDispatcherBefore Available since: 1.7.1 \nThis hook is called at the beginning of the dispatch method of the Dispatcher\nLocated in: /classes/Dispatcher.php\n actionDownloadAttachment Located in: /controllers/front/AttachmentController.php\n actionEmailAddAfterContent Add extra content after mail content This hook is called just after fetching mail template\nLocated in: /classes/Mail.php\n actionEmailAddBeforeContent Add extra content before mail content This hook is called just before fetching mail template\nLocated in: /classes/Mail.php\n actionEmailSendBefore Before sending an email This hook is used to filter the content or the metadata of an email before sending it or even prevent its sending\nLocated in: /classes/Mail.php\n actionFeatureDelete This hook is called while deleting an attributes features\nLocated in: /classes/Feature.php\n actionFeatureSave This hook is called while saving an attributes features\nLocated in: /classes/Feature.php\n actionFeatureValueDelete This hook is called while deleting an attributes features value\nLocated in: /classes/FeatureValue.php\n actionFeatureValueSave This hook is called while saving an attributes features value\nLocated in: /classes/FeatureValue.php\n actionFrontControllerSetMedia Located in: /classes/controller/FrontController.php\n actionFrontControllerSetVariables Available since: 1.7.5 \nAdd variables to javascript object that is available in Front Office.\nLocated in: /classes/controller/FrontController.php\nExample usage:\nYour hook implementation should return array of values that will be added to prestashop object.\npublic function hookActionFrontControllerSetVariables() { return [ 'hello_text' =\u0026gt; 'Hello world', ]; }  In Front Office you can access it globally using:\nconsole.log(prestashop.modules.your_module_name.hello_text); \u0026quot;Hello world\u0026quot;  actionGetExtraMailTemplateVars Located in: /classes/Mail.php\n actionGetIDZoneByAddressID Located in: /classes/Address.php\n actionGetProductPropertiesAfter Located in: /classes/Product.php\n actionGetProductPropertiesBefore Located in: /classes/Product.php\n actionHtaccessCreate After .htaccess creation\nLocated in: /classes/Tools.php\n actionInvoiceNumberFormatted Located in: /classes/order/OrderInvoice.php\n actionModuleInstallAfter Located in: /classes/module/Module.php\n actionModuleInstallBefore Located in: /classes/module/Module.php\n actionModuleRegisterHookAfter Located in: /classes/Hook.php\n actionModuleRegisterHookBefore Located in: /classes/Hook.php\n actionModuleUnRegisterHookAfter Located in: /classes/Hook.php\n actionModuleUnRegisterHookBefore Located in: /classes/Hook.php\n actionObject Located in: /classes/ObjectModel.php\n actionObjectAddAfter Located in: /classes/ObjectModel.php\n actionObjectAddBefore Located in: /classes/ObjectModel.php\n actionObjectAttributeAddBefore Located in: /controllers/admin/AdminAttributesGroupsController.php\n actionObjectAttributeGroupAddBefore Located in: /controllers/admin/AdminAttributesGroupsController.php\n actionObjectDeleteAfter Located in: /classes/ObjectModel.php\n actionObjectDeleteBefore Located in: /classes/ObjectModel.php\n actionObjectProductInCartDeleteAfter Available since: 1.7.1 \nThis hook is called after a product is removed from a cart\nLocated in: /controllers/front/CartController.php\n actionObjectProductInCartDeleteBefore Available since: 1.7.1 \nThis hook is called before a product is removed from a cart\nLocated in: /controllers/front/CartController.php\n actionObjectUpdateAfter Located in: /classes/ObjectModel.php\n actionObjectUpdateBefore Located in: /classes/ObjectModel.php\n actionOnImageCutAfter Located in: /classes/ImageManager.php\n actionOnImageResizeAfter Located in: /classes/ImageManager.php\n actionOrderEdited This hook is called when an order is edited\nLocated in: /controllers/admin/AdminOrdersController.php\nParameters:\narray( 'order' =\u0026gt; (object) Order );  actionOrderHistoryAddAfter This hook is displayed when a customer returns a product\nLocated in: /classes/order/OrderHistory.php\n actionOrderReturn Called after a new Order Return has been made.\nLocated in: /controllers/front/OrderFollowController.php\nParameters:\narray( 'orderReturn' =\u0026gt; (object) OrderReturn );  actionOrderSlipAdd Called when the quantity of a product changes in an order. WARNING: only invoked when a product is actually removed from an order.\nLocated in: /controllers/admin/AdminOrdersController.php\nParameters:\narray( 'order' =\u0026gt; Order, 'productList' =\u0026gt; array( (int) product ID 1, (int) product ID 2, ..., (int) product ID n ), 'qtyList' =\u0026gt; array( (int) quantity 1, (int) quantity 2, ..., (int) quantity n ) ); The order of IDs and quantities is important!  actionOrderStatusPostUpdate Called after the status of an order changes.\nLocated in: /classes/order/OrderHistory.php\nParameters:\narray( 'newOrderStatus' =\u0026gt; (object) OrderState, 'id_order' =\u0026gt; (int) Order ID );  actionOrderStatusUpdate Called before the status of an order changes.\nLocated in: /classes/order/OrderHistory.php\nParameters:\narray( 'newOrderStatus' =\u0026gt; (object) OrderState, 'id_order' =\u0026gt; (int) Order ID );  actionOutputHTMLBefore Available since: 1.7.1 \nBefore HTML output This hook is used to filter the whole HTML page before it is rendered (only front)\nLocated in: /classes/controller/FrontController.php\n actionPasswordRenew Located in: /controllers/front/PasswordController.php\n actionPaymentCCAdd Payment CC added\nLocated in: /classes/order/OrderPayment.php\nParameters:\narray( 'paymentCC' =\u0026gt; (object) OrderPayment object );  actionPaymentConfirmation Called after a payment has been validated\nLocated in: /classes/order/OrderHistory.php\nParameters:\narray( 'id_order' =\u0026gt; (int) Order ID );  actionPDFInvoiceRender Located in:\n /classes/PaymentModule.php /classes/order/OrderHistory.php /controllers/admin/AdminPdfController.php /controllers/front/PdfInvoiceController.php   actionProductAdd This hook is displayed after a product is created\nLocated in: /controllers/admin/AdminProductsController.php\n actionProductAttributeDelete This hook is displayed when a product\u0026rsquo;s attribute is deleted\nLocated in: /classes/Product.php\n actionProductAttributeUpdate This hook is displayed when a product\u0026rsquo;s attribute is updated\nLocated in: /classes/Product.php\n actionProductCancel This hook is called when you cancel a product in an order\nLocated in: /controllers/admin/AdminOrdersController.php\n actionProductCoverage Located in: /classes/stock/StockManager.php\n actionProductDelete This hook is called when a product is deleted\nLocated in: /classes/Product.php\n actionProductOutOfStock This hook displays new action buttons if a product is out of stock\nLocated in:\n /themes/classic/templates/catalog/_partials/product-details.tpl /themes/classic/templates/catalog/product.tpl   actionProductSave This hook is called while saving products\nLocated in: /classes/Product.php\n actionProductSearchAfter Available since: 1.7.1 \nThis hook is called after the product search. Parameters are already filter\nLocated in: /classes/controller/ProductListingFrontController.php\n actionProductUpdate This hook is displayed after a product has been updated\nLocated in:\n /classes/Product.php /controllers/admin/AdminProductsController.php   actionProductFlagsModifier Available since: 1.7.6 \nAdd and remove product labels available on product list\nLocated in: src/Adapter/Presenter/Product/ProductLazyArray.php\nParameters:\narray( 'flags' =\u0026gt; (array) \u0026amp;$flags, 'product' =\u0026gt; (Product) $product, ),  actionSearch Available since: 1.7.1 \nAfter the search in the store. Includes both instant and normal search.\nLocated in: /src/Adapter/Search/SearchProductSearchProvider.php\nParameters:\narray( 'expr' =\u0026gt; (string) Search query, 'total' =\u0026gt; (int) Amount of search results );  actionSetInvoice Located in: /classes/order/Order.php Parameters:\narray( 'Order' =\u0026gt; order object, 'OrderInvoice' =\u0026gt; order invoice object, 'use_existing_payment' =\u0026gt; (bool) );  actionShopDataDuplication After duplicating a shop.\nLocated in: /classes/shop/Shop.php\nParameters:\narray( 'old_id_shop' =\u0026gt; (int) Old shop ID, 'new_id_shop' =\u0026gt; (int) New shop ID );  actionSubmitAccountBefore Available since: 1.7.1 \nLocated in: /controllers/front/AuthController.php\n actionUpdateLangAfter Available since: 1.7.1 \nUpdate \u0026ldquo;lang\u0026rdquo; tables after adding or updating a language\nLocated in: /classes/Language.php\n actionUpdateQuantity After updating the quantity of a product. Quantity is updated only when a customer effectively places their order\nLocated in: /classes/stock/StockAvailable.php\nParameters:\narray( 'id_product' =\u0026gt; (int) Product ID, 'id_product_attribute' =\u0026gt; (int) Product attribute ID, 'quantity' =\u0026gt; (int) New product quantity );  actionValidateCustomerAddressForm This hook is called when a customer submit its address form\nLocated in: /classes/form/CustomerAddressForm.php\nParameters:\narray( 'cart' =\u0026gt; (object) Cart, 'order' =\u0026gt; (object) Order, 'customer' =\u0026gt; (object) Customer, 'currency' =\u0026gt; (object) Currency, 'orderStatus' =\u0026gt; (object) OrderState );  actionValidateOrder After an order has been validated. Doesn\u0026rsquo;t necessarily have to be paid.\nLocated in: /classes/PaymentModule.php\n actionWatermark After a watermark has been added to an image.\nLocated in:\n /classes/FileUploader.php /classes/webservice/WebserviceSpecificManagementImages.php /controllers/admin/AdminImportController.php /controllers/admin/AdminProductsController.php  Parameters:\narray( 'id_image' =\u0026gt; (int) Image ID, 'id_product' =\u0026gt; (int) Product ID );  additionalCustomerFormFields Add fields to the Customer form This hook returns an array of FormFields to add them to the customer registration form\nLocated in: /classes/form/CustomerFormatter.php\n addWebserviceResources This hook is called when webservice resources list in webservice controller\nLocated in: /classes/webservice/WebserviceRequest.php\n dashboardData Located in: /controllers/admin/AdminDashboardController.php\n dashboardZoneOne Located in: /controllers/admin/AdminDashboardController.php\n dashboardZoneTwo Located in: /controllers/admin/AdminDashboardController.php\n displayAdminAfterHeader Located in:\n admin-dev/themes/default/template/header.tpl admin-dev/themes/new-theme/template/layout.tpl   displayAdminCustomers Display new elements in the Back Office, tab AdminCustomers This hook launches modules when the AdminCustomers tab is displayed in the Back Office\nLocated in: admin-dev/themes/default/template/controllers/customers/helpers/view/view.tpl\nParameters:\narray( 'id_customer' = (int) Customer ID );  displayAdminCustomersAddressesItemAction Available since: 1.7.3 \nDisplay new elements in the Back Office, tab AdminCustomers, Addresses actions. This hook launches modules when the Addresses list into the AdminCustomers tab is displayed in the Back Office\nLocated in: /admin-dev/themes/default/template/controllers/customers/helpers/view/view.tpl\nParameters:\narray( 'id_address' =\u0026gt; (int) Address ID )  displayAdminEndContent Available since: 1.7.4 \nAdministration end of content. This hook is displayed at the end of the main content, before the footer\nLocated in:\n /admin-dev/themes/default/template/footer.tpl /admin-dev/themes/new-theme/template/layout.tpl   displayAdminForm Located in: admin-dev/themes/default/template/helpers/form/form.tpl\n displayAdminListAfter Located in:\n admin-dev/themes/default/template/controllers/countries/helpers/list/list_footer.tpl admin-dev/themes/default/template/controllers/tax_rules/helpers/list/list_footer.tpl admin-dev/themes/default/template/helpers/list/list_footer.tpl   displayAdminListBefore Located in:\n admin-dev/themes/default/template/controllers/tax_rules/helpers/list/list_header.tpl admin-dev/themes/default/template/helpers/list/list_header.tpl   displayAdminLogin Located in: admin-dev/themes/default/template/controllers/login/content.tpl\n displayAdminNavBarBeforeEnd Display new elements in the Back Office, tab AdminCustomers This hook launches modules when the AdminCustomers tab is displayed in the Back Office\nLocated in:\n admin-dev/themes/default/template/nav.tpl admin-dev/themes/new-theme/template/components/layout/nav_bar.tpl   displayAdminOptions Located in: admin-dev/themes/default/template/helpers/options/options.tpl\n displayAdminOrder Display new elements in the Back Office, tab AdminOrder This hook launches modules when the AdminOrder tab is displayed in the Back Office\nLocated in: admin-dev/themes/default/template/controllers/orders/helpers/view/view.tpl\nParameters:\narray( 'id_order' = (int) Order ID );  displayAdminOrderContentOrder Display new elements in Back Office, AdminOrder, panel Order This hook launches modules when the AdminOrder tab is displayed in the Back Office and extends / override Order panel content\nLocated in: /controllers/admin/AdminOrdersController.php\n displayAdminOrderContentShip Display new elements in Back Office, AdminOrder, panel Shipping This hook launches modules when the AdminOrder tab is displayed in the Back Office and extends / override Shipping panel content\nLocated in: /controllers/admin/AdminOrdersController.php\n displayAdminOrderLeft Located in: admin-dev/themes/default/template/controllers/orders/helpers/view/view.tpl\n displayAdminOrderRight Located in: admin-dev/themes/default/template/controllers/orders/helpers/view/view.tpl\n displayAdminOrderTabOrder Display new elements in Back Office, AdminOrder, panel Order This hook launches modules when the AdminOrder tab is displayed in the Back Office and extends / override Order panel tabs\nLocated in: /controllers/admin/AdminOrdersController.php\n displayAdminOrderTabShip Display new elements in Back Office, AdminOrder, panel Shipping This hook launches modules when the AdminOrder tab is displayed in the Back Office and extends / override Shipping panel tabs\nLocated in: /controllers/admin/AdminOrdersController.php\n displayAdminProductsExtra  displayAdminProductsCombinationBottom Located in: /src/PrestaShopBundle/Resources/views/Admin/Product/Include/form_combination.html.twig\n displayAdminProductsMainStepLeftColumnBottom Display new elements in back office product page, left column of This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsMainStepLeftColumnMiddle Display new elements in back office product page, left column of This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsMainStepRightColumnBottom Display new elements in back office product page, right column of This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsOptionsStepBottom Display new elements in back office product page, Options tab This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsOptionsStepTop Display new elements in back office product page, Options tab This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsPriceStepBottom Display new elements in back office product page, Price tab This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsQuantitiesStepBottom Display new elements in back office product page, Quantities/Com This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsSeoStepBottom Display new elements in back office product page, SEO tab This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/Include/form_seo.html.twig\n displayAdminProductsShippingStepBottom Display new elements in back office product page, Shipping tab This hook launches modules when the back office product page is displayed\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Product/Include/form_shipping.html.twig\n displayAdminStatsModules Located in: /controllers/admin/AdminStatsTabController.php\n displayAdminView Located in: admin-dev/themes/default/template/helpers/view/view.tpl\n displayAfterBodyOpeningTag Very top of pages Use this hook for advertisement or modals you want to load first\nLocated in:\n /themes/classic/templates/checkout/checkout.tpl /themes/classic/templates/layouts/layout-both-columns.tpl   displayAfterCarrier After carriers list This hook is displayed after the carrier list in Front Office\nLocated in: /classes/checkout/CheckoutDeliveryStep.php\n displayAfterProductThumbs Available since: 1.7.1 \nDisplay extra content below product thumbs This hook displays new elements below product images ex. additional media\nLocated in: /themes/classic/templates/catalog/_partials/product-cover-thumbnails.tpl\n displayAfterThemeInstallation Located in: admin-dev/themes/default/template/controllers/themes/helpers/view/view.tpl\n displayAttributeForm Add fields to the form \u0026lsquo;attribute value\u0026rsquo; This hook adds fields to the form \u0026lsquo;attribute value\u0026rsquo;\nLocated in: admin-dev/themes/default/template/controllers/attributes/helpers/form/form.tpl\n displayAttributeGroupForm Add fields to the form \u0026lsquo;attribute group\u0026rsquo; This hook adds fields to the form \u0026lsquo;attribute group\u0026rsquo;\nLocated in: admin-dev/themes/default/template/controllers/attributes_groups/helpers/form/form.tpl\n displayBackOfficeCategory Display new elements in the Back Office, tab AdminCategories This hook launches modules when the AdminCategories tab is displayed in the Back Office\nLocated in: /controllers/admin/AdminCategoriesController.php\n displayBackOfficeFooter (deprecated since 1.7.0.0)\nDisplayed within the admin panel\u0026rsquo;s footer\nLocated in:\n admin-dev/themes/default/template/footer.tpl admin-dev/themes/new-theme/template/footer.tpl   displayBackOfficeHeader Displayed between the \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; tags on every Back Office page (when logged in).\nLocated in: /classes/controller/AdminController.php\n displayBackOfficeOrderActions Located in: admin-dev/themes/default/template/controllers/orders/helpers/view/view.tpl\n displayBackOfficeTop Shown above the actual content of a Back Office page\nLocated in: /classes/controller/AdminController.php\n displayBanner Available since: 1.7.1 \nLocated in: /themes/classic/templates/_partials/header.tpl\n displayBeforeBodyClosingTag Very bottom of pages Use this hook for your modals or any content you want to load at the very end\nLocated in:\n /themes/classic/templates/checkout/checkout.tpl /themes/classic/templates/layouts/layout-both-columns.tpl   displayBeforeCarrier This hook is displayed before the carrier list on the Front Office\nLocated in: /classes/checkout/CheckoutDeliveryStep.php\nParameters:\narray( 'carriers' =\u0026gt; array( array( 'name' =\u0026gt; (string) Name, 'img' =\u0026gt; (string) Image URL, 'delay' =\u0026gt; (string) Delay text, 'price' =\u0026gt; (float) Total price with tax, 'price_tax_exc' =\u0026gt; (float) Total price without tax, 'id_carrier' =\u0026gt; (int) intified option delivery identifier, 'id_module' =\u0026gt; (int) Module ID )), 'checked' =\u0026gt; (int) intified selected carriers, 'delivery_option_list' =\u0026gt; array(array( 0 =\u0026gt; array( // First address '12,' =\u0026gt; array( // First delivery option available for this address carrier_list =\u0026gt; array( 12 =\u0026gt; array( // First carrier for this option 'instance' =\u0026gt; Carrier Object, 'logo' =\u0026gt; \u0026lt;url to the carrier's logo\u0026gt;, 'price_with_tax' =\u0026gt; 12.4, // Example 'price_without_tax' =\u0026gt; 12.4, // Example 'package_list' =\u0026gt; array( 1, // Example 3, // Example ), ), ), is_best_grade =\u0026gt; true, // Does this option have the biggest grade (quick shipping) for this shipping address is_best_price =\u0026gt; true, // Does this option have the lower price for this shipping address unique_carrier =\u0026gt; true, // Does this option use a unique carrier total_price_with_tax =\u0026gt; 12.5, total_price_without_tax =\u0026gt; 12.5, position =\u0026gt; 5, // Average of the carrier position ), ), )), 'delivery_option' =\u0026gt; array( '\u0026lt;id_address\u0026gt;' =\u0026gt; Delivery option, ... ) );  NOTE: intified means an array of integers \u0026lsquo;intified\u0026rsquo; by Cart::intifier\n displayCarrierExtraContent Display additional content for a carrier (e.g pickup points) This hook calls only the module related to the carrier, in order to add options when needed\nLocated in: /classes/checkout/DeliveryOptionsFinder.php\n displayCarrierList (deprecated since 1.7.0.0)\nDisplay extra carriers in the carrier list.\nLocated in: /classes/Cart.php\nParameters:\narray( 'address' =\u0026gt; (object) Address object );  displayCartExtraProductActions Extra buttons in shopping cart This hook adds extra buttons to the product lines, in the shopping cart\nLocated in: /themes/classic/templates/checkout/_partials/cart-detailed-product-line.tpl\n displayCheckoutSubtotalDetails Located in: /themes/classic/templates/checkout/_partials/cart-detailed-totals.tpl\n displayCheckoutSummaryTop Located in: /themes/classic/templates/checkout/_partials/cart-summary.tpl\n displayCMSDisputeInformation Located in: /themes/classic/templates/cms/page.tpl\n displayCMSPrintButton Located in: /themes/classic/templates/cms/page.tpl\n displayCrossSellingShoppingCart Located in: themes/classic/templates/checkout/cart-empty.tpl\n displayContentWrapperBottom Content wrapper section (bottom) This hook displays new elements in the bottom of the content wrapper\nLocated in:\n themes/classic/templates/layouts/layout-both-columns.tpl themes/classic/templates/layouts/layout-content-only.tpl themes/classic/templates/layouts/layout-full-width.tpl themes/classic/templates/layouts/layout-left-column.tpl themes/classic/templates/layouts/layout-right-column.tpl   displayContentWrapperTop Content wrapper section (top) This hook displays new elements in the top of the content wrapper\nLocated in:\n themes/classic/templates/layouts/layout-both-columns.tpl themes/classic/templates/layouts/layout-content-only.tpl themes/classic/templates/layouts/layout-full-width.tpl themes/classic/templates/layouts/layout-left-column.tpl themes/classic/templates/layouts/layout-right-column.tpl   displayCrossSellingShoppingCart Located in: /themes/classic/templates/checkout/cart-empty.tpl\n displayCustomerAccount Displays new elements on the customer account page in Front Office\nLocated in: /themes/classic/templates/customer/my-account.tpl\n displayCustomerAccountForm Displays information on the customer account creation form\nLocated in: /classes/form/CustomerForm.php\n displayCustomerAccountFormTop Displayed above the customer\u0026rsquo;s account creation form\nLocated in: /controllers/front/AuthController.php\n displayCustomerLoginFormAfter Displays new elements after the login form\nLocated in: /themes/classic/templates/customer/authentication.tpl\n displayCustomization Located in: /classes/Product.php\n displayDashboardToolbarIcons Available since: 1.7.3 \nDisplay new elements in back office page with dashboard, on icons list. This hook launches modules when the back office with dashboard is displayed\nLocated in:\n /src/PrestaShopBundle/Resources/views/Admin/Configure/AdvancedParameters/LogsPage/Blocks/actions.html.twig /src/PrestaShopBundle/Resources/views/Admin/Product/CatalogPage/Blocks/tools.html.twig  displayDashboardToolbarTopMenu Available since: 1.7.3 \nDisplay new elements in back office page with a dashboard, on top Menu. This hook launches modules when a page with a dashboard is displayed\nLocated in:\n /admin-dev/themes/default/template/page_header_toolbar.tpl /admin-dev/themes/new-theme/template/page_header_toolbar.tpl   displayDashboardTop Dashboard Top Displays the content in the dashboard\u0026rsquo;s top area\nLocated in: admin-dev/themes/default/template/page_header_toolbar.tpl\n displayExpressCheckout Located in: /themes/classic/templates/checkout/_partials/cart-detailed-actions.tpl\n displayFeatureForm Add fields to the form \u0026lsquo;feature\u0026rsquo; This hook adds fields to the form \u0026lsquo;feature\u0026rsquo;\nLocated in: admin-dev/themes/default/template/controllers/features/helpers/form/form.tpl\n displayFeaturePostProcess On post-process in admin feature This hook is called on post-process in admin feature\nLocated in: /controllers/admin/AdminFeaturesController.php\n displayFeatureValueForm Add fields to the form \u0026lsquo;feature value\u0026rsquo; This hook adds fields to the form \u0026lsquo;feature value\u0026rsquo;\nLocated in: admin-dev/themes/default/template/controllers/feature_value/helpers/form/form.tpl\n displayFeatureValuePostProcess On post-process in admin feature value This hook is called on post-process in admin feature value\nLocated in: /controllers/admin/AdminFeaturesController.php\n displayFooter Displays new blocks in the footer\nLocated in: /themes/classic/templates/_partials/footer.tpl\n displayFooterAfter Located in: /themes/classic/templates/_partials/footer.tpl\n displayFooterBefore Located in: /themes/classic/templates/_partials/footer.tpl\n displayFooterProduct Added under the product\u0026rsquo;s description\nLocated in: /themes/classic/templates/catalog/product.tpl\n displayHeader Added in the header of every page\nLocated in: /classes/controller/FrontController.php\n displayHome Displayed on the content of the home page.\nLocated in: /controllers/front/IndexController.php\n displayInvoice Invoice This hook displays new blocks on the invoice (order)\nLocated in: admin-dev/themes/default/template/controllers/orders/helpers/view/view.tpl\n displayInvoiceLegalFreeText PDF Invoice - Legal Free Text This hook allows you to modify the legal free text on PDF invoices\nLocated in: /classes/pdf/HTMLTemplateInvoice.php\n displayLeftColumn Displays new elements in the left-hand column\nLocated in: /themes/classic/templates/layouts/layout-both-columns.tpl\n displayLeftColumnProduct Displays new elements in the left-hand column of the product page\nLocated in: /themes/classic/templates/layouts/layout-both-columns.tpl\n displayMaintenance Maintenance Page This hook displays new elements on the maintenance page\nLocated in: /classes/controller/FrontController.php\n displayMyAccountBlock Displays extra information within the \u0026ldquo;my account: block\nLocated in: /themes/classic/modules/ps_customeraccountlinks/ps_customeraccountlinks.tpl\n displayNav1 Located in:\n /themes/classic/templates/_partials/header.tpl /themes/classic/templates/checkout/_partials/header.tpl   displayNav2 Located in:\n /themes/classic/templates/_partials/header.tpl /themes/classic/templates/checkout/_partials/header.tpl   displayNavFullWidth Navigation This hook displays full width navigation menu at the top of your pages\nLocated in:\n /themes/classic/templates/_partials/header.tpl /themes/classic/templates/checkout/_partials/header.tpl   displayNotFound Located in: /themes/classic/templates/errors/not-found.tpl\n displayOrderConfirmation Called within an order\u0026rsquo;s confirmation page\nLocated in: /controllers/front/OrderConfirmationController.php\nParameters:\narray( 'total_to_pay' =\u0026gt; (float) Total amount with tax, 'currency' =\u0026gt; (string) Currency sign, 'objOrder' =\u0026gt; (object) Order, 'currencyObj' =\u0026gt; (object) Currency );  displayOrderConfirmation1 Located in: /themes/classic/templates/checkout/order-confirmation.tpl\n displayOrderConfirmation2 Located in: /themes/classic/templates/checkout/order-confirmation.tpl\n displayOrderDetail Displayed within the order\u0026rsquo;s details in Front Office\nLocated in:\n /controllers/front/GuestTrackingController.php /controllers/front/OrderDetailController.php  Parameters:\narray( 'order' =\u0026gt; (object) Order object );  displayPaymentByBinaries Payment form generated by binaries This hook displays form generated by binaries during the checkout\nLocated in: /themes/classic/templates/checkout/_partials/steps/payment.tpl\n displayPaymentEU Located in: /modules/ps_legalcompliance/ps_legalcompliance.php\n displayPaymentReturn Payment return\nLocated in: /controllers/front/OrderConfirmationController.php\n displayPaymentTop Top of payment page This hook is displayed at the top of the payment page\nLocated in: /themes/classic/templates/checkout/_partials/steps/payment.tpl\n displayProductAdditionalInfo Available since: 1.7.1 \nProduct page additional info This hook adds additional information on the product page\nLocated in:\n /themes/classic/templates/catalog/_partials/product-additional-info.tpl /themes/classic/templates/catalog/_partials/quickview.tpl   displayProductExtraContent Available since: 1.7.0 \nDisplay extra content on the product page. This hook expects ProductExtraContent instances, which will be properly displayed by the template on the product page\nLocated in: /controllers/front/ProductController.php\nParameters:\narray( 'product' =\u0026gt; (object) Product object ),  displayProductListReviews Available since: 1.7.1 \nLocated in: /themes/classic/templates/catalog/_partials/miniatures/product.tpl\n displayProductPageDrawer Available since: 1.7.1 \nProduct Page Drawer. This hook displays content in the right sidebar of the product page\nLocated in: /src/PrestaShopBundle/Controller/Admin/ProductController.php\nParameters:\narray( 'product' =\u0026gt; (object) Product object ),  displayProductPriceBlock Located in:\n /themes/classic/templates/catalog/_partials/miniatures/product.tpl /themes/classic/templates/catalog/_partials/product-prices.tpl /themes/classic/templates/checkout/_partials/cart-summary-product-line.tpl /themes/classic/templates/checkout/_partials/order-confirmation-table.tpl   displayReassurance Located in:\n /themes/classic/templates/catalog/product.tpl /themes/classic/templates/checkout/cart.tpl /themes/classic/templates/checkout/checkout.tpl   displayRightColumn Displays new elements in the right-hand column\nLocated in: /themes/classic/templates/layouts/layout-both-columns.tpl\nParameters:\narray( 'cart' =\u0026gt; (object) Cart object ); Note that the Cart object can also be retrieved from the current Context.  displayRightColumnProduct Displays new elements in the right-hand column of the product page\nLocated in: /themes/classic/templates/layouts/layout-both-columns.tpl\n displaySearch Located in: /themes/classic/templates/errors/not-found.tpl\n displayShoppingCart Displays new action buttons within the shopping cart\nLocated in: /themes/classic/templates/checkout/cart.tpl\n displayShoppingCartFooter Shopping cart footer This hook displays some specific information on the shopping cart\u0026rsquo;s page\nLocated in: /themes/classic/templates/checkout/cart.tpl\n displayTop Top of pages This hook displays additional elements at the top of your pages\nLocated in:\n /themes/classic/templates/_partials/header.tpl /themes/classic/templates/checkout/_partials/header.tpl   displayWrapperBottom Main wrapper section (bottom) This hook displays new elements in the bottom of the main wrapper\nLocated in:\n themes/classic/templates/checkout/checkout.tpl themes/classic/templates/layouts/layout-both-columns.tpl   displayWrapperTop Main wrapper section (top) This hook displays new elements in the top of the main wrapper\nLocated in:\n themes/classic/templates/checkout/checkout.tpl themes/classic/templates/layouts/layout-both-columns.tpl  filterCategoryContent Available since: 1.7.1 \nFilter the content page category. This hook is called just before fetching content page category\nLocated in: /controllers/front/listing/CategoryController.php\nParameters:\narray( 'object' =\u0026gt; (object) Category object ),  filterCmsCategoryContent Filter the content page category This hook is called just before fetching content page category\nLocated in: /controllers/front/CmsController.php\n filterCmsContent Filter the content page This hook is called just before fetching content page\nLocated in: /controllers/front/CmsController.php\n filterHtmlContent Filter HTML field before rending a page This hook is called just before fetching a page on HTML field\nLocated in: /src/Adapter/ObjectPresenter.php\n filterManufacturerContent Filter the content page manufacturer This hook is called just before fetching content page manufacturer\nLocated in: /controllers/front/listing/ManufacturerController.php\n filterProductContent Filter the content page product This hook is called just before fetching content page product\nLocated in: /controllers/front/ProductController.php\n filterProductSearch Available since: 1.7.1 \nLocated in: /classes/controller/ProductListingFrontController.php\n filterSupplierContent Located in: /controllers/front/listing/SupplierController.php\n moduleRoutes Located in: /classes/Dispatcher.php\n overrideMinimalPurchasePrice Located in:\n /classes/controller/ModuleFrontController.php /src/Adapter/Cart/CartPresenter.php   sendMailAlterTemplateVars Located in: /prestashop/classes/Mail.php\n termsAndConditions Located in: /classes/checkout/ConditionsToApproveFinder.php\n updateProduct Located in:\n /classes/Product.php /classes/webservice/WebserviceSpecificManagementImages.php   validateCustomerFormFields Located in: /classes/form/CustomerForm.php\n   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/database/objectmodel/",
	"title": "ObjectModel class",
	"tags": [],
	"description": "",
	"content": " The ObjectModel class When needing to dive deep, you have to use the ObjectModel class. This is the main object of PrestaShop’s object model. It can be overridden… with precaution.\nIt is an Active Record kind of class (see: http://en.wikipedia.org/wiki/Active_record_pattern). The table attributes or view attributes of PrestaShop’s database are encapsulated in this class. Therefore, the class is tied to a database record. After the object has been instantiated, a new record is added to the database. Each object retrieves its data from the database; when an object is updated, the record to which it is tied is updated as well. The class implements accessors for each attribute.\nDefining the model You must use the $definition static variable in order to define the model.\nFor instance:\n/** * Example from the CMS model (CMSCore) */ public static $definition = [ 'table' =\u0026gt; 'cms', 'primary' =\u0026gt; 'id_cms', 'multilang' =\u0026gt; true, 'fields' =\u0026gt; array( 'id_cms_category' =\u0026gt; ['type' =\u0026gt; self::TYPE_INT, 'validate' =\u0026gt; 'isUnsignedInt'], 'position' =\u0026gt; ['type' =\u0026gt; self::TYPE_INT], 'active' =\u0026gt; ['type' =\u0026gt; self::TYPE_BOOL], // Language fields 'meta_description' =\u0026gt; [ 'type' =\u0026gt; self::TYPE_STRING, 'lang' =\u0026gt; true, 'validate' =\u0026gt; 'isGenericName', 'size' =\u0026gt; 255 ], 'meta_keywords' =\u0026gt; [ 'type' =\u0026gt; self::TYPE_STRING, 'lang' =\u0026gt; true, 'validate' =\u0026gt; 'isGenericName', 'size' =\u0026gt; 255 ], 'meta_title' =\u0026gt; [ 'type' =\u0026gt; self::TYPE_STRING, 'lang' =\u0026gt; true, 'validate' =\u0026gt; 'isGenericName', 'required' =\u0026gt; true, 'size' =\u0026gt; 128 ], 'link_rewrite' =\u0026gt; [ 'type' =\u0026gt; self::TYPE_STRING, 'lang' =\u0026gt; true, 'validate' =\u0026gt; 'isLinkRewrite', 'required' =\u0026gt; true, 'size' =\u0026gt; 128 ], 'content' =\u0026gt; [ 'type' =\u0026gt; self::TYPE_HTML, 'lang' =\u0026gt; true, 'validate' =\u0026gt; 'isString', 'size' =\u0026gt; 3999999999999 ], ) ];  Multiple stores and/or languages In order to retrieve an object in many languages:\n'multilang' =\u0026gt; true  In order to retrieve an object depending on the current store:\n'multishop' =\u0026gt; true  In order to retrieve an object which depends on the current store, and in many languages:\n'multilang_shop' =\u0026gt; true  Main methods  __construct($id = NULL, $id_lang = NULL)  Build object. add($autodate = true, $nullValues = false)  Save current object to database (add or update). associateTo(integer|array $id_shops)  Associate an item to its context. delete()  Delete current object from database. deleteImage(mixed $force_delete = false)  Delete images associated with the object. deleteSelection($selection)  Delete several objects from database. getFields()  Prepare fields for ObjectModel class (add, update). getValidationRules($className = _CLASS_)  Return object validation rules (field validity). save($nullValues = false, $autodate = true)  Save current object to database (add or update). toggleStatus()  Toggle object\u0026rsquo;s status in database. update($nullValues = false)  Update current object to database. validateFields($die = true, $errorReturn = false)  Check for field validity before database interaction.   ObjectModel lifecycle Thanks to the hooks, you can alter the Object Model or execute functions during the lifecycle of your models. Every hook receive an instance of the manipulated object model:\n  ObjectModel lifecycle   As an exemple, this is how you can retrieve information about a product when we delete it from the database:\nuse Product; // In a module public function hookActionObjectProductDeleteAfter(Product $product) { PrestaShopLogger::addLog( sprintf('Product with id %s was deleted with success', $product-\u0026gt;id_product) ); }  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/faceted-search/",
	"title": "The Faceted Search component",
	"tags": [],
	"description": "",
	"content": " The Faceted Search Architecture This document describes the faceted search architecture that is being implemented in PrestaShop 1.7.\nPlease also read the extensive comments in classes/controller/ProductListingFrontControllerCore, as this document is only a high-level explanation.\nThe target audience is anybody who wants to develop a well-integrated search module that replaces the way the PrestaShop core searches for products.\nAt the moment this proof of concept works only on the CategoryController but it is easy to extend to the other product controllers (manufacturers, supplier\u0026hellip;).\nWhy, oh why? Efficient product search is at the heart of E-Commerce. Customers need to find what they\u0026rsquo;re looking for easily.\nWhen developing the StarterTheme we realized the way blocklayered and similar modules interact with the theme is very complicated and hard to extend. The modules try to emulate the CategoryController and fetch templates from the theme without any guarantee of the templates being there.\nIf we change the behavior of the CategoryController or rename a template, then all blocklayered-like modules need to be adapted. If your theme doesn\u0026rsquo;t have a file called product-list.tpl then the module fails, etc.\nWe have analyzed the way search modules work and we offer a set of standard objects and behaviors that allow us to reason about faceted search and improve it. This is all based on what we\u0026rsquo;ve observed, we\u0026rsquo;re mostly just putting a name on things and giving guidelines.\nKey Concepts Overview of the rendering process for displaying products on a category page  The core CategoryController executes a hook basically asking modules \u0026ldquo;hey, does anybody want to fetch the products for the category with id_category === 4 or should I do it myself?\u0026rdquo; A module (e.g. blocklayered) responds by returning an instance of a ProductSearchProviderInterface of its choosing The CategoryController notices the ProductSearchProviderInterface returned by the module and uses it to get the products (this is the equivalent of what hookActionProductListOverride did, only we work with well defined objects that are easy to reason about). The search provider returns a ProductSearchResult, it contains:  the products, obviously (which may just be an array like [['id_product' =\u0026gt; 2], ['id_product' =\u0026gt; 3]] - the core will add the missing data!) the pagination information (total number of pages, total number or results, etc.) cleanly wrapped inside a Pagination the new, updated filters the sort options that are supported to sort the list (array of SortOrders)  The CategoryController hydrates the product list, formats it, renders it. It also renders the filters, the pagination, and the sort options (price ascending, etc.).  Bottom line is, the search module only needs to worry about two things: - executing a pure database query (internal or external database) that returns a list of product ids (no more getProductProperties, addColorsToProductList, etc.) - optionally (if it wants to produce nice URLs), encode and decode the filters in a way that fits inside a URL\nWith this we reduced the size of the code in blocklayered by a factor of about 2.\nTerminology We did not make the words up, see for instance this article about Facets vs Filters.\nFacets and Filters Filters We call a filter any assertion that can be used to filter a list of products and does not contain logical operators such as \u0026ldquo;and\u0026rdquo; or \u0026ldquo;or\u0026rdquo; when expressed in plain English.\nFor instance \u0026ldquo;Blue products\u0026rdquo; is a filter. \u0026ldquo;Red or blue products\u0026rdquo; is not a filter. It\u0026rsquo;s a facet\u0026hellip;\nA Filter is represented by the PrestaShop\\PrestaShop\\Core\\Product\\Search\\Filter class.\nFacets We call a facet a set of filters combined with logical operators.\nFor instance \u0026ldquo;Blue products or red products\u0026rdquo; is a facet.\nFilters within a facet may be active or not, and are usually combined with the \u0026ldquo;or\u0026rdquo; operator even though it is defined by the implementation and not necessarily so. Still, there seems to be a strong UX convention that filters inside a facet are combined with \u0026ldquo;or\u0026rdquo;, meaning for instance that if I check the \u0026ldquo;Blue\u0026rdquo; and the \u0026ldquo;Red\u0026rdquo; filter I won\u0026rsquo;t get products that are both blue and red, but a mix of blue products and red products.\nA facet is represented by the PrestaShop\\PrestaShop\\Core\\Product\\Search\\Facet class. It is basically a collection of Filters.\nThe ProductSearchQuery object We introduce the PrestaShop\\PrestaShop\\Core\\Product\\Search\\ProductSearchQuery object to hold all search query information.\nBasically, this object contains: - something that tells modules where the query came from (id_category, id_supplier for SupplierController etc.). This is the minimal filter that the search module is supposed to implement. - the SortOrder that is requested - the page number that is requested - the resultsPerPage, i.e. the number of products per page that is expected\nThe search delegation mechanism In order for modules to replace the core search mechanism, we introduce a delegation mechanism in the form of the productSearchProvider hook.\nThe hook is executed with a ProductSearchQuery $query param, which allows modules to return an instance of a ProductSearchProviderInterface that is able to handle the query.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/",
	"title": "The Grid component",
	"tags": [],
	"description": "",
	"content": " The Grid component  Introduction Grid component provides tools which allows you to build, manage and display your data tables. The most important parts of Grid component are:\n Grid definition - defines structural information about grid. Grid data - stores data for grid. Search criteria - stores sorting, pagination and filters data for grid.  Grid definition This is the most fundamental part of Grid component. Grid definition stores structural information about your Grid that defines:\n Id - unique id for Grid identification. It is used to dispatch hooks and identify Grid in other parts of the application. Name - human readable name, it is recommended to make it translatable. Columns - definition of columns that your Grid table has. Filters - definition of filters that are supported by Grid. Grid actions - actions that apply to a whole grid. It is common to have \u0026ldquo;Export\u0026rdquo;, \u0026ldquo;Import\u0026rdquo;, \u0026ldquo;Show SQL query\u0026rdquo; and similar grid actions. Bulk actions - actions that can be applied to multiple records in the Grid. It is common to have \u0026ldquo;Delete selected\u0026rdquo;, \u0026ldquo;Enable selected\u0026rdquo; and similar bulk actions.  Creating Grid Definition You don\u0026rsquo;t have to create the Grid Definition by yourself but instead rely on a PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\GridDefinitionFactoryInterface. PrestaShop already provides you with an abstract factory implementation PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\AbstractGridDefinitionFactory that you can use to create Grid definitions.\nWhen creating Grid definition it is recommended to use PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\AbstractGridDefinitionFactory as it allows you to define your structure, but takes care of definition creation.\n To create new grid definition, we will use AbstractGridDefinitionFactory.\nnamespace PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory; use PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\AbstractGridDefinitionFactory; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\DataColumn; final class ProductGridDefinitionFactory extends AbstractGridDefinitionFactory { protected function getId() { return 'products'; } protected function getName() { return $this-\u0026gt;trans('Products', [], 'Admin.Advparameters.Feature'); } protected function getColumns() { return (new ColumnCollection()) -\u0026gt;add((new DataColumn('id_product')) -\u0026gt;setName($this-\u0026gt;trans('ID', [], 'Admin.Global')) -\u0026gt;setOptions([ 'field' =\u0026gt; 'id_product', ]) ) -\u0026gt;add((new DataColumn('reference')) -\u0026gt;setName($this-\u0026gt;trans('Reference', [], 'Admin.Advparameters.Feature')) -\u0026gt;setOptions([ 'field' =\u0026gt; 'reference', ]) ) -\u0026gt;add((new DataColumn('name')) -\u0026gt;setName($this-\u0026gt;trans('Name', [], 'Admin.Advparameters.Feature')) -\u0026gt;setOptions([ 'field' =\u0026gt; 'name', ]) ) ; } }  We have just created a basic Grid Definition factory in which we defined our Grid\u0026rsquo;s id products, translatable name Products and 3 data columns.\nIt is recommended to keep your name translatable. To make that easy AbstractGridDefinitionFactory provides access to translator via trans() method.\n And finally register your Grid definition factory as a service.\nprestashop.core.grid.definition.factory.product_grid_definition_factory: class: 'PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\ProductGridDefinitionFactory' parent: 'prestashop.core.grid.definition.factory.abstract_grid_definition' public: true  Most of the time you won\u0026rsquo;t be creating Grid Definition by yourself but delegating this task to other services. But in case you need to create Grid Definition by hand, here\u0026rsquo;s how you can do that.\n$productsGridDefinitionFactory = $container-\u0026gt;get('prestashop.core.grid.definition.factory.product_grid_definition_factory'); $productsGridDefinition = $productsGridDefinitionFactory-\u0026gt;getDefinition(); // you can access all information thats was defined $productsGridDefinition-\u0026gt;getColumns(); // collection of defined columns $productsGridDefinition-\u0026gt;getName(); // \u0026quot;Products\u0026quot; $productsGridDefinition-\u0026gt;getId(); // \u0026quot;products\u0026quot;  Search Criteria In Grid component Search Criteria is used for Grid\u0026rsquo;s data sorting, paginating \u0026amp; filtering. Search Criteria can be loaded from database, URL query or anywhere else.\nGrid component itself does not manage Search Criteria but instead it provides interface for it. In PrestaShop Filters component is used to resolve Search Criteria for Grid.\n Search Criteria is immutable. This means that once Search Criteria is created it cannot be changed.\n Creating Search Criteria Even though most of the time Search Criteria will be created using Filters component, you can still create it by yourself. Grid provides simple implementation for it.\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Search\\SearchCriteria; $filters = [ 'id_product' =\u0026gt; 4, 'name' =\u0026gt; 'mug', ]; $searchCriteria = new SearchCriteria( $filters, 'id_product', 'asc', 0, 10 ); $searchCriteria-\u0026gt;getFilters(); // $filters array $searchCriteria-\u0026gt;getOrderBy(); // \u0026quot;id_product\u0026quot; $searchCriteria-\u0026gt;getOrderWay(); // \u0026quot;asc\u0026quot; $searchCriteria-\u0026gt;getOffset(); // 0 $searchCriteria-\u0026gt;getLimit(); // 10  Class PrestaShop\\PrestaShop\\Core\\Grid\\Search\\SearchCriteria is only available since 1.7.6 \n When creating Search Criteria you can skip some or all it\u0026rsquo;s data. If you set both orderWay and orderBy to null it will disable sorting. If you set both offset and limit to null it will disable pagination.\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Search\\SearchCriteria; // both sorting, pagination and filtering are disabled with this search criteria $emptySearchCriteria = new SearchCriteria(); // only pagination is set // that means sorting (and filters as it's an empty array) will be disabled for search criteria $emptySortingSearchCriteria = new SearchCriteria( [], null, null, 2, 10 );  Grid Data The final part of Grid component is data. Grid Data is stored in PrestaShop\\PrestaShop\\Core\\Grid\\Data\\GridData.\nCreating Grid Data Grid component does not create Grid Data directly but instead relies on PrestaShop\\PrestaShop\\Core\\Grid\\Data\\Factory\\GridDataFactoryInterface. PrestaShop provides you with DoctrineGridDataFactory implementation out of the box which supports retrieving data from MySQL database using Doctrine. However, if you need to load data from REST API, Elasticsearch or any other data store, you can implement your own Grid Data factory.\nWe will be using DoctrineGridDataFactory to create data for our Grid. When using DoctrineGridDataFactory you have to implement DoctrineQueryBuilderInterface which will be used by data factory to build Doctrine queries.\nWhen implementing DoctrineQueryBuilderInterface it is recommended to use PrestaShop\\PrestaShop\\Core\\Grid\\Query\\AbstractDoctrineQueryBuilder as it provides access to Doctrine Connection and database tables prefix.\n use PrestaShop\\PrestaShop\\Core\\Grid\\Query\\AbstractDoctrineQueryBuilder; final class ProductQueryBuilder extends AbstractDoctrineQueryBuilder { /** * @var int */ private $contextLangId; /** * @var int */ private $contextShopId; /** * @param Connection $connection * @param string $dbPrefix * @param int $contextLangId * @param int $contextShopId */ public function __construct(Connection $connection, $dbPrefix, $contextLangId, $contextShopId) { parent::__construct($connection, $dbPrefix); $this-\u0026gt;contextLangId = $contextLangId; $this-\u0026gt;contextShopId = $contextShopId; } // Get Search query builder returns QueryBuilder that is used to fetch filtered, sorted and paginated data from database. // This query builder is also used to get SQL query that was executed. public function getSearchQueryBuilder(SearchCriteriaInterface $searchCriteria) { $qb = $this-\u0026gt;getBaseQuery(); $qb-\u0026gt;select('p.id_product, p.reference, pl.name') -\u0026gt;orderBy( $searchCriteria-\u0026gt;getOrderBy(), $searchCriteria-\u0026gt;getOrderWay() ) -\u0026gt;setFirstResult($searchCriteria-\u0026gt;getOffset()) -\u0026gt;setMaxResults($searchCriteria-\u0026gt;getLimit()); foreach ($searchCriteria-\u0026gt;getFilters() as $filterName =\u0026gt; $filterValue) { if ('id_product' === $filterName) { $qb-\u0026gt;andWhere(\u0026quot;p.id_product = :$filterName\u0026quot;); $qb-\u0026gt;setParameter($filterName, $filterValue); continue; } $qb-\u0026gt;andWhere(\u0026quot;$filterName LIKE :$filterName\u0026quot;); $qb-\u0026gt;setParameter($filterName, '%'.$filterValue.'%'); } return $qb; } // Get Count query builder that is used to get total count of all records (products) public function getCountQueryBuilder(SearchCriteriaInterface $searchCriteria) { $qb = $this-\u0026gt;getBaseQuery(); $qb-\u0026gt;select('COUNT(p.id_product)'); return $qb; } // Base query can be used for both Search and Count query builders private function getBaseQuery() { return $this-\u0026gt;connection -\u0026gt;createQueryBuilder() -\u0026gt;from($this-\u0026gt;dbPrefix.'product', 'p') -\u0026gt;leftJoin( 'p', $this-\u0026gt;dbPrefix.'product_lang', 'pl', 'p.id_product = pl.id_product AND pl.id_lang = :context_lang_id AND pl.id_shop = :context_shop_id' ) -\u0026gt;setParameter('context_lang_id', $this-\u0026gt;contextLangId) -\u0026gt;setParameter('context_shop_id', $this-\u0026gt;contextShopId) ; } }  Once Query builder is done, last step is to register it and configure DoctrineGridDataFactory to use it.\n# Register ProductQueryBuilder prestashop.core.grid.query.product_query_builder: class: 'PrestaShop\\PrestaShop\\Core\\Grid\\Query\\ProductQueryBuilder' parent: 'prestashop.core.grid.abstract_query_builder' arguments: - \u0026quot;@=service('prestashop.adapter.legacy.context').getContext().language.id\u0026quot; - \u0026quot;@=service('prestashop.adapter.legacy.context').getContext().shop.id\u0026quot; public: true # Configure Grid Data factory to use query builder that we registered above prestashop.core.grid.data.factory.product_data_factory: class: 'PrestaShop\\PrestaShop\\Core\\Grid\\Data\\Factory\\DoctrineGridDataFactory' arguments: - '@prestashop.core.grid.query.product_query_builder' # service id of our query builder - '@prestashop.core.hook.dispatcher' # every doctrine query builder needs hook dispatcher - '@prestashop.core.grid.query.doctrine_query_parser' # parser to get raw SQL query - 'products' # this should match your grid id, in our case it's \u0026quot;products\u0026quot;  And that\u0026rsquo;s it! Now we can use our Grid Data factory together with Search Criteria to get sorted, paginated and filtered data for our Grid.\n$searchCriteria = ... /** PrestaShop\\PrestaShop\\Core\\Grid\\Data\\Factory\\GridDataFactoryInterface $productGridDataFactory */ $productGridDataFactory = $container-\u0026gt;get('prestashop.core.grid.data.factory.product_data_factory'); $productGridData = $productDataFactory-\u0026gt;getData($searchCriteria); $productGridData-\u0026gt;getRecords(); // returns RecordCollection that contains products data $productGridData-\u0026gt;getRecordsTotal(); // returns total count of products $productGridData-\u0026gt;getQuery(); // get last executed query which was used to get RecordCollection  Working with Grid We already know how to create and use Grid Definition and Grid Data factories. Now it\u0026rsquo;s time to combine those services to create our Grid!\nConfiguring Grid factory As always, you should not create Grid by hand, PrestaShop already comes with PrestaShop\\PrestaShop\\Core\\Grid\\GridFactory whose primary job is to create Grid.\nIt is recommended to use PrestaShop\\PrestaShop\\Core\\Grid\\GridFactory to create Grids although you may need to create your own Grid factory is some rare cases.\n Let\u0026rsquo;s configure GridFactory with our Grid Definition and Grid Data factories.\n# Configure Grid factory to use services we have implemented prestashop.core.grid.product_grid_factory: class: 'PrestaShop\\PrestaShop\\Core\\Grid\\GridFactory' arguments: - '@prestashop.core.grid.definition.factory.product_grid_definition_factory' # our definition factory - '@prestashop.core.grid.data.factory.product_data_factory' # our data factory - '@prestashop.core.grid.filter.form_factory' # core service needed by grid factory - '@prestashop.core.hook.dispatcher' # core service needed by grid factory  And we are done! Let\u0026rsquo;s see how to use it and render it in the page.\nRendering Grid In Back Office controllers, you can use the Grid Factory to create a Grid and render it.\nuse Symfony\\Component\\HttpFoundation\\Request; use Symfony\\Component\\HttpFoundation\\Response; class ProductController extends FrameworkBundleAdminController { /** * @return Response */ public function indexAction() { $searchCriteria = ... $productGridFactory = $this-\u0026gt;get('prestashop.core.grid.product_grid_factory'); $productGrid = $productGridFactory-\u0026gt;getGrid($searchCriteria); return $this-\u0026gt;render('@PrestaShop/Admin/Product/products.html.twig', [ // $this-\u0026gt;presentGrid() is helper method provided by FrameworkBundleAdminController 'productsGrid' =\u0026gt; $this-\u0026gt;presentGrid($productGrid), ]); } }  To see Grid in your page you have to include it\u0026rsquo;s template which is provided by PrestaShop.\n{# @PrestaShop/Admin/Product/products.html.twig #} {% include '@PrestaShop/Admin/Common/Grid/grid_panel.html.twig' with {'grid': productsGrid} %}  It is possible to include provided template and modify some parts of it or you can create your own template to render Grid.\nWorkflows Main workflow   Main workflow of the Grid Component    You can update this schema using the source XML file importable in services like draw.io.\n Hooks   Available hooks when creating a Grid    You can update this schema using the source XML file importable in services like draw.io.\n Learn more Reference  Columns reference Bulk Actions reference Grid Actions reference  Tutorials  How to work with the Bulk actions? How to work with the Grid actions? How to work with the Search Form? How to extend a Grid with Javascript extensions? How to modify an existing Grid in a module? How to customize the Grid templates? How to create a custom Bulk Action? How to create a custom Grid Action? How to create a custom Column Type?  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/import/",
	"title": "The Import component",
	"tags": [],
	"description": "",
	"content": " The Import component The legacy import page is not fully migrated to new architecture yet.\n Introduction The import workflow consists of the following steps:\n Configuration in import step 1 (such as data source, separators, other settings). Entity fields matching to data source columns in import step 2. Data validation process. Import process.  When using word entity, we are referring to a business entity from PrestaShop, such as Product, Category, Address, etc.\n Import step 1 This page consists of import configuration, where you select the import data source and choose wanted options, such as field separators, import language, whether old data should be truncated or not, etc. All configuration which is selected in this page, is represented by the PrestaShop\\PrestaShop\\Core\\Import\\Configuration\\ImportConfigInterface.\n  Import step 1   Import configuration The default implementation of the mentioned configuration interface (PrestaShop\\PrestaShop\\Core\\Import\\Configuration\\ImportConfigInterface) in PrestaShop can be seen in PrestaShop\\PrestaShop\\Core\\Import\\Configuration\\ImportConfig class. This class is a value object, which values are not supposed to change during one import operation.\nThe default ImportConfig implementation can be instantiated using the factory PrestaShop\\PrestaShop\\Core\\Import\\Configuration\\ImportConfigFactory.\nImport step 2 In the second import step we can configure only two things that are directly related to the import:\n Number of rows to skip from the top of import file. Entity fields matching to data source columns.    Import step 2   Number of rows to skip The number of rows to skip from the top of import file value is also held in the default ImportConfig implementation and is exposed by the PrestaShop\\PrestaShop\\Core\\Import\\Configuration\\ImportConfigInterface. The interface fits well for this configuration value, because the value is not supposed to change during the import operation.\nEntity fields matching Entity fields matching can be explained as selecting which of the available entity fields is represented by which column in the import file.\n There are a couple of classes implemented in PrestaShop, that ease up the entity fields matching:\n Import entity - represented by PrestaShop\\PrestaShop\\Core\\Import\\Entity. Entity field - represented by PrestaShop\\PrestaShop\\Core\\Import\\EntityField\\EntityField. Data row - represented by PrestaShop\\PrestaShop\\Core\\Import\\File\\DataRow\\DataRow.  Import entity This class holds all import types, that are available by default in PrestaShop and allows to retrieve them easily:\n// src/Core/Import/Entity.php final class Entity { const TYPE_CATEGORIES = 0; const TYPE_PRODUCTS = 1; const TYPE_COMBINATIONS = 2; const TYPE_CUSTOMERS = 3; const TYPE_ADDRESSES = 4; const TYPE_MANUFACTURERS = 5; const TYPE_SUPPLIERS = 6; const TYPE_ALIAS = 7; const TYPE_STORE_CONTACTS = 8; \u0026lt;...\u0026gt; }  Entity field Entity field is described by an implementation of PrestaShop\\PrestaShop\\Core\\Import\\EntityField\\EntityFieldInterface.\nEntity fields are stored in collections, by implementing PrestaShop\\PrestaShop\\Core\\Import\\EntityField\\EntityFieldCollectionInterface. Entity field collection default implementation is this class: PrestaShop\\PrestaShop\\Core\\Import\\EntityField\\EntityFieldCollection.\nEntity field collections are provided by providers, which implement PrestaShop\\PrestaShop\\Core\\Import\\EntityField\\Provider\\EntityFieldsProviderInterface. Every entity, which is available for import in PrestaShop, has it\u0026rsquo;s own fields provider in the PrestaShop\\PrestaShop\\Core\\Import\\EntityField\\Provider namespace.\nFor example, the entity fields provider for Customer entity builds the entity fields collection in the following way:\n// src/Core/Import/EntityField/Provider/CustomerFieldsProvider.php final class CustomerFieldsProvider implements EntityFieldsProviderInterface { public function getCollection() { $fields = [ new EntityField('id', $this-\u0026gt;trans('ID', 'Admin.Global')), new EntityField('active', $this-\u0026gt;trans('Active (0/1)')), new EntityField('id_gender', $this-\u0026gt;trans('Titles ID (Mr = 1, Ms = 2, else 0)')), new EntityField('email', $this-\u0026gt;trans('Email', 'Admin.Global'), '', true), new EntityField('passwd', $this-\u0026gt;trans('Password', 'Admin.Global'), '', true), new EntityField('birthday', $this-\u0026gt;trans('Birth date (yyyy-mm-dd)')), new EntityField('lastname', $this-\u0026gt;trans('Last name', 'Admin.Global'), '', true), new EntityField('firstname', $this-\u0026gt;trans('First name', 'Admin.Global'), '', true), new EntityField('newsletter', $this-\u0026gt;trans('Newsletter (0/1)')), new EntityField('optin', $this-\u0026gt;trans('Partner offers (0/1)')), new EntityField('date_add', $this-\u0026gt;trans('Registration date (yyyy-mm-dd)')), new EntityField('group', $this-\u0026gt;trans('Groups (x,y,z...)')), new EntityField('id_default_group', $this-\u0026gt;trans('Default group ID')), new EntityField( 'id_shop', $this-\u0026gt;trans('ID / Name of shop'), $this-\u0026gt;trans('Ignore this field if you don\\'t use the Multistore tool. If you leave this field empty, the default shop will be used.', 'Admin.Advparameters.Help') ), ]; return EntityFieldCollection::createFromArray($fields); } // ... }  Data row DataRow is an object representation of a data row from import source file.\nDataRow is described by an interface PrestaShop\\PrestaShop\\Core\\Import\\File\\DataRow\\DataRowInterface and can be used in collections to represent multiple rows of data.\nDataRow collections can be built using DataRowCollectionFactory, which should implement the PrestaShop\\PrestaShop\\Core\\Import\\File\\DataRow\\Factory\\DataRowCollectionFactoryInterface.\nCurrently there is one DataRowCollectionFactory implementation available in PrestaShop, which builds the DataRowCollection by reading a data file:\n// src/Core/Import/File/DataRow/Factory/DataRowCollectionFactory.php final class DataRowCollectionFactory implements DataRowCollectionFactoryInterface { // ... public function buildFromFile(SplFileInfo $file, $maxRowsInCollection = null) { $dataRowCollection = new DataRowCollection(); $rowIndex = 0; foreach ($this-\u0026gt;fileReader-\u0026gt;read($file) as $dataRow) { if (null !== $maxRowsInCollection \u0026amp;\u0026amp; $rowIndex \u0026gt;= $maxRowsInCollection) { break; } $dataRowCollection-\u0026gt;addDataRow($dataRow); ++$rowIndex; } return $dataRowCollection; } }  Import operation The import operation can be imaged as multiple smaller import processes running one after another, until the data is fully imported or critical errors occur.\nImport operation can be described by three essential parts:\n Import configuration preparation. The import handler. The importer.  Import configuration preparation To run the import process we have to prepare the configuration for it. As mentioned in previous topics, there are two configuration objects (ImportConfig and ImportRuntimeConfig), that have to be prepared for the import process. Both of them can be built using factories, which are described by interfaces PrestaShop\\PrestaShop\\Core\\Import\\Configuration\\ImportConfigFactoryInterface and PrestaShop\\PrestaShop\\Core\\Import\\Configuration\\ImportRuntimeConfigFactoryInterface.\nThere is one implementation of each of the two configuration interfaces in PrestaShop. Both of them are available to build the relevant import config object out of Symfony Request:\n// src/Core/Import/Configuration/ImportConfigFactory.php final class ImportConfigFactory implements ImportConfigFactoryInterface { public function buildFromRequest(Request $request) { $separator = $request-\u0026gt;request-\u0026gt;get( 'separator', $request-\u0026gt;getSession()-\u0026gt;get('separator', ImportSettings::DEFAULT_SEPARATOR) ); $multivalueSeparator = $request-\u0026gt;request-\u0026gt;get( 'multiple_value_separator', $request-\u0026gt;getSession()-\u0026gt;get('multiple_value_separator', ImportSettings::DEFAULT_MULTIVALUE_SEPARATOR) ); return new ImportConfig( $request-\u0026gt;request-\u0026gt;get('csv', $request-\u0026gt;getSession()-\u0026gt;get('csv')), $request-\u0026gt;request-\u0026gt;getInt('entity', $request-\u0026gt;getSession()-\u0026gt;get('entity', 0)), $request-\u0026gt;request-\u0026gt;get('iso_lang', $request-\u0026gt;getSession()-\u0026gt;get('iso_lang')), $separator, $multivalueSeparator, $request-\u0026gt;request-\u0026gt;getBoolean('truncate', $request-\u0026gt;getSession()-\u0026gt;get('truncate', false)), $request-\u0026gt;request-\u0026gt;getBoolean('regenerate', $request-\u0026gt;getSession()-\u0026gt;get('regenerate', false)), $request-\u0026gt;request-\u0026gt;getBoolean('match_ref', $request-\u0026gt;getSession()-\u0026gt;get('match_ref', false)), $request-\u0026gt;request-\u0026gt;getBoolean('forceIDs', $request-\u0026gt;getSession()-\u0026gt;get('forceIDs', false)), $request-\u0026gt;request-\u0026gt;getBoolean('sendemail', $request-\u0026gt;getSession()-\u0026gt;get('sendemail', true)), $request-\u0026gt;request-\u0026gt;getInt('skip', 0) ); } }  // src/Core/Import/Configuration/ImportRuntimeConfigFactory.php final class ImportRuntimeConfigFactory implements ImportRuntimeConfigFactoryInterface { public function buildFromRequest(Request $request) { $sharedData = $request-\u0026gt;request-\u0026gt;get('crossStepsVars', []); return new ImportRuntimeConfig( $request-\u0026gt;request-\u0026gt;getBoolean('validateOnly'), $request-\u0026gt;request-\u0026gt;getInt('offset'), $request-\u0026gt;request-\u0026gt;getInt('limit'), json_decode($sharedData, true), $request-\u0026gt;request-\u0026gt;get('type_value', []) ); } }  Import handler To handle the import process we must prepare an ImportHandler, which will have access to our specific logic for import operation. The ImportHandler should implement PrestaShop/PrestaShop/Core/Import/Handler/ImportHandlerInterface.\nThere are three main methods exposed by the interface, which are essential for import logic execution:\n// src/Core/Import/Handler/ImportHandlerInterface.php interface ImportHandlerInterface { /** * Executed before import process is started. */ public function setUp(ImportConfigInterface $importConfig, ImportRuntimeConfigInterface $runtimeConfig); /** * Imports one data row. */ public function importRow( ImportConfigInterface $importConfig, ImportRuntimeConfigInterface $runtimeConfig, DataRowInterface $dataRow ); /** * Executed when the import process is completed. */ public function tearDown(ImportConfigInterface $importConfig, ImportRuntimeConfigInterface $runtimeConfig); // ... }   setUp() - executed before each import process. You can set prerequisites in this method, log some data, or execute additional operations that should be executed before starting the import. The method has both ImportConfigInterface and ImportRuntimeConfigInterface as arguments, meaning you can access the configuration if needed for import preparation. importRow() - executed for every row that\u0026rsquo;s being imported. This method should run the logic, that imports the data for one row. In addition to import configuration, this method also has a PrestaShop\\PrestaShop\\Core\\Import\\File\\DataRow\\DataRowInterface as an argument, which is an object representation of the current row from the import data source. tearDown() - executed when the import process is finished. Useful for actions that have to be done only once after each process.  Importer The Importer is responsible for running the import logic from ImportHandler, and applying the import configuration properly during the process. Importer is an object that implements the PrestaShop\\PrestaShop\\Core\\Import\\ImporterInterface. PrestaShop comes with one Importer implementation (PrestaShop\\PrestaShop\\Core\\Import\\Importer), which can be easily used for your needs.\nThe PrestaShop\\PrestaShop\\Core\\Import\\ImporterInterface exposes only one method:\n// src/Core/Import/ImporterInterface.php interface ImporterInterface { /** * Process the import. */ public function import( ImportConfigInterface $importConfig, ImportRuntimeConfigInterface $runtimeConfig, ImportHandlerInterface $importHandler ); }  import() method accepts the import configurations and the import handler implementation as arguments and will execute the import logic automatically.\nImport execution example in a controller The processImportAction() controller action (from the example below) imports one batch of the import data at a time. It can be run multiple times, until all data is fully imported.\nThe controller action below is being called multiple times (via AJAX) by the JavaScript part of the import component, until all data is imported from the source file:\n// src/PrestaShopBundle/Controller/Admin/Configure/AdvancedParameters/ImportController.php public function processImportAction(Request $request) { $importer = $this-\u0026gt;get('prestashop.core.import.importer'); $importConfigFactory = $this-\u0026gt;get('prestashop.core.import.config_factory'); $runtimeConfigFactory = $this-\u0026gt;get('prestashop.core.import.runtime_config_factory'); $importHandlerFinder = $this-\u0026gt;get('prestashop.adapter.import.handler_finder'); // Building the configuration objects $importConfig = $importConfigFactory-\u0026gt;buildFromRequest($request); $runtimeConfig = $runtimeConfigFactory-\u0026gt;buildFromRequest($request); // Running the import process $importer-\u0026gt;import( $importConfig, $runtimeConfig, $importHandlerFinder-\u0026gt;find($importConfig-\u0026gt;getEntityType()) // Finding import handler ); return $this-\u0026gt;json($runtimeConfig-\u0026gt;toArray()); }  Related JavaScript Since the import operation can be heavy and take many resources to complete (depending on the amount of data to be imported), in PrestaShop it is being executed in smaller processes. To achieve that, some JavaScript code is being used, which continuously fires AJAX requests that trigger the import processing on the server, until the import finishes.\nAll JavaScript code, which is used by the import component, can be found under admin-dev/themes/new-theme/js/pages/import-data/ directory. We can find different JavaScript components there, which are explained below.\nEntityFieldsValidator Responsible for validating selected entity fields in import page 2 data table. It makes sure that you don\u0026rsquo;t miss any required fields, prevents you from selecting same field twice and shows error messages if you do.\n  Validation in import step 2 - duplicate fields   ImportBatchSizeCalculator Calculates the most reasonable batch size for each import process, depending on server\u0026rsquo;s response time. It adapts the batch size of the next import iteration by measuring how long it took for the server to process the data in previous import iteration.\nImportDataTable Responsible for pagination functionality in the import data preview table. The pagination arrows appear below the data table and can be used to peek the source file preview forward or backwards.\n  Import step 2 data preview table - pagination arrows   ImportMatchConfiguration Responsible for saving, loading or deleting import matches configurations. Import match configuration allows saving the matched entity fields for later reusability.\n  Import match configuration interface   PostSizeChecker Responsible for checking if POST size limit is being reached. It\u0026rsquo;s used in each import process, to make sure it won\u0026rsquo;t reach the limits.\nImportProgressModal Responsible for displaying the import progress for the end user in a modal window. It updates the progress bar of the modal, displays messages, shows/hides the buttons in modal when asked for.\n  Import modal   Importer Executes import process and fires AJAX import requests continuously. It uses the PostSizeChecker, ImportBatchCalculator and ImportProgressModal components internally and connects them to execute the import process.\nImportDataPage Responsible for running the Importer component when the end user clicks Import button. Collects data from the import match configuration form and passes it to the Importer.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/position-updater/",
	"title": "The Position Updater component",
	"tags": [],
	"description": "",
	"content": " The Position updater component  Introduction Order elements position is a common use case in any CMS or a shop back-office. You may need to order, categories, products, modules or adds. The use cases are endless. Which is why we developed a generic component to help you manage your position updates quickly and efficiently. Combined with our Grid component this will help you build entity lists more easily. This component will be divided into \u0026hellip; components:\n PositionDefinition: it defined the basic information to compute and update the position( table, id field, position field, \u0026hellip;) PositionUpdate: this object contains all the atomic modifications that needs to be done on your list (symbolized by PositionModification objects) PositionUpdateFactory: this service allows you to build a PositionUpdate easily base on your PositionDefinition and basic modification data GridPositionUpdater: it is the main part of the component which gives you interfaces to perform position modifications  PositionDefinition The first thing, and nearly only thing, you need to create is you PositionDefinition which will hold the basic structure to manage the positions in your list. To allow our component to automatically compute position updates we need a few data:\n table: which table is being ordered and contains the position (ps_category, ps_product, \u0026hellip;) idField: what is the name of the field containing the id of this table (id_category, id_product) positionField: what is the name of the field containing the position in this table (position, pos, rank, \u0026hellip;) parentIdField (optional): in some cases the position depends on a parent context and your table will contains different positions based on a different parent (id_category, id_parent, \u0026hellip;)  Manual definition You can define this PositionDefinition manually:\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionDefinition; $positionDefinition = new PositionDefinition( 'product', 'id_product', 'position', 'id_category_default' );  Service definition Or you can define a service to avoid duplicating your code:\nservices: _defaults: public: true prestashop.product.grid.position_definition: class: 'PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionDefinition' arguments: - 'product' - 'id_product' - 'position' - 'id_category_default'  Building your PositionUpdate The good news is that you now made the hardest part, all other computing and database queries will be managed by our component. The only thing you have to do now is provide the updates you want to apply to your list positions. We provide a default PositionUpdateFactory to help you build your update, it is defined as a Symfony service accessible via prestashop.core.grid.position.position_update_factory.\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionUpdateFactory; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionDefinition; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionUpdate; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\Exception\\PositionDataException; $positionsData = [ 'positions' =\u0026gt; [ [ 'rowId' =\u0026gt; 12, 'oldPosition' =\u0026gt; 0, 'newPosition' =\u0026gt; 1, ], [ 'rowId' =\u0026gt; 15, 'oldPosition' =\u0026gt; 5, 'newPosition' =\u0026gt; 3, ] ], 'parentId' =\u0026gt; $categoryId, ]; /** @var PositionDefinition $positionDefinition */ $positionDefinition = $this-\u0026gt;get('prestashop.product.grid.position_definition'); /** @var PositionUpdateFactory $positionUpdateFactory */ $positionUpdateFactory = $this-\u0026gt;get('prestashop.core.grid.position.position_update_factory'); try { /** @var PositionUpdate $positionUpdate */ $positionUpdate = $positionUpdateFactory-\u0026gt;buildPositionUpdate($positionsData, $positionDefinition); } catch (PositionDataException $e) { //An exception is thrown if the input data doesn't respect the expected format $errors = [$e-\u0026gt;toArray()]; $this-\u0026gt;flashErrors($errors); }  The format of the input data is not random nor fixed, it actually matches the definition of our PositionUpdateFactory which you can see in the service definition:\n# In src/PrestaShopBundle/Resources/config/services/core/grid.yml ... # Grid position updater prestashop.core.grid.position.position_update_factory: class: 'PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionUpdateFactory' arguments: - 'positions' - 'rowId' - 'oldPosition' - 'newPosition' - 'parentId'  If you need this component to match another input format you can instanciate your own factory with the appropriate settings.\n Update your positions Now that you built your PositionUpdate object all you need to do is perform the modification, to do this you can use the GridPositionUpdater service which id is PrestaShop\\PrestaShop\\Core\\Grid\\Position\\GridPositionUpdater\nuse PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionUpdate; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\GridPositionUpdaterInterface; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\Exception\\PositionUpdateException; /** @var PositionUpdate $positionUpdate */ $positionUpdate = buildPositionUpdate(); /** @var GridPositionUpdaterInterface $updater */ $updater = $this-\u0026gt;get('prestashop.core.grid.position.doctrine_grid_position_updater'); try { $updater-\u0026gt;update($positionUpdate); $this-\u0026gt;clearModuleCache(); $this-\u0026gt;addFlash('success', $this-\u0026gt;trans('Successful update.', 'Admin.Notifications.Success')); } catch (PositionUpdateException $e) { $errors = [$e-\u0026gt;toArray()]; $this-\u0026gt;flashErrors($errors); }  Example This is a example to sum up what you just learnt, here is a simple controller used in a grid in the ps_linklist module.\n# Route definition for the controller admin_link_block_update_positions: path: /link-widget/update-positions/{hookId} methods: [POST] defaults: _controller: 'PrestaShop\\Module\\LinkList\\Controller\\Admin\\Improve\\Design\\LinkBlockController::updatePositionsAction' _legacy_controller: AdminLinkWidget requirements: hookId: \\d+  namespace PrestaShop\\Module\\LinkList\\Controller\\Admin\\Improve\\Design; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\Exception\\PositionDataException; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\Exception\\PositionUpdateException; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\GridPositionUpdaterInterface; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionUpdateFactory; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionDefinition; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionUpdate; use PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController; use PrestaShopBundle\\Security\\Annotation\\AdminSecurity; use PrestaShopBundle\\Security\\Annotation\\ModuleActivated; use Symfony\\Component\\HttpFoundation\\RedirectResponse; use Symfony\\Component\\HttpFoundation\\Request; use Symfony\\Component\\HttpFoundation\\Response; /** * Class LinkBlockController. * * @ModuleActivated(moduleName=\u0026quot;ps_linklist\u0026quot;, redirectRoute=\u0026quot;admin_module_manage\u0026quot;) */ class LinkBlockController extends FrameworkBundleAdminController { /** * @AdminSecurity(\u0026quot;is_granted('update', request.get('_legacy_controller'))\u0026quot;, message=\u0026quot;Access denied.\u0026quot;) * * @param Request $request * @param int $hookId * * @throws \\Exception * * @return RedirectResponse */ public function updatePositionsAction(Request $request, $hookId) { $positionsData = [ 'positions' =\u0026gt; $request-\u0026gt;request-\u0026gt;get('positions', null), 'parentId' =\u0026gt; $hookId, ]; /** @var PositionDefinition $positionDefinition */ $positionDefinition = $this-\u0026gt;get('prestashop.module.link_block.grid.position_definition'); /** @var PositionUpdateFactory $positionUpdateFactory */ $positionUpdateFactory = $this-\u0026gt;get('prestashop.core.grid.position.position_update_factory'); try { /** @var PositionUpdate $positionUpdate */ $positionUpdate = $positionUpdateFactory-\u0026gt;buildPositionUpdate($positionsData, $positionDefinition); } catch (PositionDataException $e) { $errors = [$e-\u0026gt;toArray()]; $this-\u0026gt;flashErrors($errors); return $this-\u0026gt;redirectToRoute('admin_link_block_list'); } /** @var GridPositionUpdaterInterface $updater */ $updater = $this-\u0026gt;get('prestashop.core.grid.position.doctrine_grid_position_updater'); try { $updater-\u0026gt;update($positionUpdate); $this-\u0026gt;clearModuleCache(); $this-\u0026gt;addFlash('success', $this-\u0026gt;trans('Successful update.', 'Admin.Notifications.Success')); } catch (PositionUpdateException $e) { $errors = [$e-\u0026gt;toArray()]; $this-\u0026gt;flashErrors($errors); } return $this-\u0026gt;redirectToRoute('admin_link_block_list'); } }  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/webservice/",
	"title": "The PrestaShop Webservices",
	"tags": [],
	"description": "",
	"content": " The PrestaShop Webservices PrestaShop enables merchants to give third-party tools access to their shop\u0026rsquo;s database through a CRUD API, otherwise called a web service.\nAbout CRUD \u0026amp; REST The PrestaShop web service uses the REST architecture in order to be available on as many platforms as possible, since the HTTP protocol and XML files are understood by most platforms, if not all.\nCRUD is an acronym that stands for \u0026ldquo;Create, Read, Update, and Delete\u0026rdquo;. These are the four basic operations for managing data in an application.\nREST defines roughly a style of software architecture, which promotes the use of HTTP methods when building web application, instead of custom methods or protocols such as SOAP or WSDL. It defines several rules, including one that is similar to CRUD, which is described below.\n HTTP has several methods that can perform processing on data as defined in the REST architecture, among which are 4 main methods:\n   HTTP/REST CRUD SQL     POST Create INSERT   GET Read SELECT   PUT Update UPDATE   DELETE Delete DELETE    Creating an access to the webservice Before you can do anything, there are few steps you need to do to create an access to the web service.\nEnabling the web service Go in the PrestaShop back office, open the \u0026ldquo;Web service\u0026rdquo; page under the \u0026ldquo;Advanced Parameters\u0026rdquo; menu, and then choose \u0026ldquo;Yes\u0026rdquo; for the \u0026ldquo;Enable PrestaShop Webservice\u0026rdquo; option.\n  Enabling Webservice   Creating an access key In order to have access to the API you need to create an access key, this will allow you to finely tune the permissions you give to the different data of your shop. You will use this key later in each call to the API. Open the \u0026ldquo;Webservice\u0026rdquo; page under the \u0026ldquo;Advanced Parameters\u0026rdquo; menu, and then click the \u0026ldquo;Add New\u0026rdquo; button to access the account configuration section.\n  Creating an access key   Each access key is defined by this information:\n Key - The API key serves as the main identifier for the webservice account you are creating. Click the \u0026ldquo;Generate\u0026rdquo; button to get an unique authentication key. You can also create your own (which must be 32 characters long), but using a generated key prevents wrong-doers from guessing your key too easily. Using this key, you and other selected users will be able to access the webservice. Key description - Helps you remember who you created that key for, what are the access rights assigned to it, etc. The description is not public, but make sure to put all the keywords pertaining to the user, so that you can find their key more quickly. Status - You can disable any key at any time. Permissions - This section is very important, as it enables you to assign rights for each resource you want to make available to this key. Indeed, you might want a user to have read and write access on some resources, but only read access on others – and no access to the more important ones. In the list of permissions, the top left checkbox enables you to define all the rights for a given resource. Likewise, the checkbox at the top of each column enables you to give the select right (View, Modify, etc.) to all the resources. Make sure to only select the rights needed for the usage of that key. Do not give all the rights for all resources to any key, keep that to yours and yours only. Shop association - This only appears in multistore mode. It enables you to choose which of your stores the key owner should have access to.  Accessing the webservice Now that your access key is generated you can test your store\u0026rsquo;s webservice, its endpoint is located in the /api/ folder at the root of your installation of Prestashop. The quickest way to test your API is to use your browser:\n If PrestaShop is installed at the root of your server, you can access the API here: http://example.com/api/ If PrestaShop is installed in a subfolder of your server, you can access the API here: http://example.com/prestashop/api/  The shop should prompt you for a username and a password to enter. The username is the authentication key you created and there is no password to enter.\nThe second and more appropriate way to access the API is to include your access key in the url, this will prevent you from entering any user name. This is also the recommended way to call the API from a javascript client, or any application. Here is an example, assuming your access API key is UCCLLQ9N2ARSHWCXLT74KUKSSK34BFKX:\n At the root of the server: http://UCCLLQ9N2ARSHWCXLT74KUKSSK34BFKX@example.com/api/ In a subfolder of the server: http://UCCLLQ9N2ARSHWCXLT74KUKSSK34BFKX@example.com/prestasshop/api/  To test/call your APIs we recommend you use an API client such as Postman, it is easier to call the APIs than with a browser, especially for write actions.\n As you noticed no password nor authentication process is required to access the APIs which is why you need to be extra careful with you access key rights and how (and whose) you distribute them.\n Using your webservice API Describe a resource When you call the root /api url you will get a summary of the available APIs you can call with your access token. In this example we see that we have all rights on the /api/addresses API:\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026quot;http://www.w3.org/1999/xlink\u0026quot;\u0026gt; \u0026lt;api shopName=\u0026quot;Prestashop\u0026quot;\u0026gt; \u0026lt;addresses xlink:href=\u0026quot;http://example.com/api/addresses\u0026quot; get=\u0026quot;true\u0026quot; put=\u0026quot;true\u0026quot; post=\u0026quot;true\u0026quot; delete=\u0026quot;true\u0026quot; head=\u0026quot;true\u0026quot;\u0026gt; \u0026lt;description xlink:href=\u0026quot;http://example.com/api/addresses\u0026quot; get=\u0026quot;true\u0026quot; put=\u0026quot;true\u0026quot; post=\u0026quot;true\u0026quot; delete=\u0026quot;true\u0026quot; head=\u0026quot;true\u0026quot;\u0026gt; The Customer, Brand and Customer addresses\u0026lt;/description\u0026gt; \u0026lt;schema xlink:href=\u0026quot;http://example.com/api/addresses?schema=blank\u0026quot; type=\u0026quot;blank\u0026quot;/\u0026gt; \u0026lt;schema xlink:href=\u0026quot;http://example.com/api/addresses?schema=synopsis\u0026quot; type=\u0026quot;synopsis\u0026quot;/\u0026gt; \u0026lt;/addresses\u0026gt; \u0026lt;/api\u0026gt; \u0026lt;/prestashop\u0026gt;  Each API comes with two schema APIs:\n /api/RESOURCE?schema=synopsis returns basic info on the API format, the name of fields and their type /api/RESOURCE?schema=blank will return a default blank data which you could use as a base for your write actions  Both calls are very much alike, only synopsis contains more information about the data format and types:\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026quot;http://www.w3.org/1999/xlink\u0026quot;\u0026gt; \u0026lt;address\u0026gt; \u0026lt;id_customer format=\u0026quot;isNullOrUnsignedId\u0026quot;\u0026gt;\u0026lt;/id_customer\u0026gt; \u0026lt;id_manufacturer format=\u0026quot;isNullOrUnsignedId\u0026quot;\u0026gt;\u0026lt;/id_manufacturer\u0026gt; \u0026lt;id_supplier format=\u0026quot;isNullOrUnsignedId\u0026quot;\u0026gt;\u0026lt;/id_supplier\u0026gt; \u0026lt;id_warehouse format=\u0026quot;isNullOrUnsignedId\u0026quot;\u0026gt;\u0026lt;/id_warehouse\u0026gt; \u0026lt;id_country required=\u0026quot;true\u0026quot; format=\u0026quot;isUnsignedId\u0026quot;\u0026gt;\u0026lt;/id_country\u0026gt; \u0026lt;id_state format=\u0026quot;isNullOrUnsignedId\u0026quot;\u0026gt;\u0026lt;/id_state\u0026gt; \u0026lt;alias required=\u0026quot;true\u0026quot; maxSize=\u0026quot;32\u0026quot; format=\u0026quot;isGenericName\u0026quot;\u0026gt;\u0026lt;/alias\u0026gt; \u0026lt;company maxSize=\u0026quot;255\u0026quot; format=\u0026quot;isGenericName\u0026quot;\u0026gt;\u0026lt;/company\u0026gt; \u0026lt;lastname required=\u0026quot;true\u0026quot; maxSize=\u0026quot;255\u0026quot; format=\u0026quot;isName\u0026quot;\u0026gt;\u0026lt;/lastname\u0026gt; \u0026lt;firstname required=\u0026quot;true\u0026quot; maxSize=\u0026quot;255\u0026quot; format=\u0026quot;isName\u0026quot;\u0026gt;\u0026lt;/firstname\u0026gt; \u0026lt;vat_number format=\u0026quot;isGenericName\u0026quot;\u0026gt;\u0026lt;/vat_number\u0026gt; \u0026lt;address1 required=\u0026quot;true\u0026quot; maxSize=\u0026quot;128\u0026quot; format=\u0026quot;isAddress\u0026quot;\u0026gt;\u0026lt;/address1\u0026gt; \u0026lt;address2 maxSize=\u0026quot;128\u0026quot; format=\u0026quot;isAddress\u0026quot;\u0026gt;\u0026lt;/address2\u0026gt; \u0026lt;postcode maxSize=\u0026quot;12\u0026quot; format=\u0026quot;isPostCode\u0026quot;\u0026gt;\u0026lt;/postcode\u0026gt; \u0026lt;city required=\u0026quot;true\u0026quot; maxSize=\u0026quot;64\u0026quot; format=\u0026quot;isCityName\u0026quot;\u0026gt;\u0026lt;/city\u0026gt; \u0026lt;other maxSize=\u0026quot;300\u0026quot; format=\u0026quot;isMessage\u0026quot;\u0026gt;\u0026lt;/other\u0026gt; \u0026lt;phone maxSize=\u0026quot;32\u0026quot; format=\u0026quot;isPhoneNumber\u0026quot;\u0026gt;\u0026lt;/phone\u0026gt; \u0026lt;phone_mobile maxSize=\u0026quot;32\u0026quot; format=\u0026quot;isPhoneNumber\u0026quot;\u0026gt;\u0026lt;/phone_mobile\u0026gt; \u0026lt;dni maxSize=\u0026quot;16\u0026quot; format=\u0026quot;isDniLite\u0026quot;\u0026gt;\u0026lt;/dni\u0026gt; \u0026lt;deleted format=\u0026quot;isBool\u0026quot;\u0026gt;\u0026lt;/deleted\u0026gt; \u0026lt;date_add format=\u0026quot;isDate\u0026quot;\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd format=\u0026quot;isDate\u0026quot;\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/prestashop\u0026gt;  Read a resource Each resource comes with an XLink argument. Using XLink, you will be able to access your various resources. XLink associates an XML file to another XML file via a link. From our root API example we can see that we have access to http://example.com/api/addresses which will return the list of Addresses:\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026quot;http://www.w3.org/1999/xlink\u0026quot;\u0026gt; \u0026lt;addresses\u0026gt; \u0026lt;address id=\u0026quot;2\u0026quot; xlink:href=\u0026quot;http://example.com/api/addresses/2\u0026quot;/\u0026gt; \u0026lt;address id=\u0026quot;3\u0026quot; xlink:href=\u0026quot;http://example.com/api/addresses/3\u0026quot;/\u0026gt; \u0026lt;address id=\u0026quot;1\u0026quot; xlink:href=\u0026quot;http://example.com/api/addresses/1\u0026quot;/\u0026gt; \u0026lt;address id=\u0026quot;4\u0026quot; xlink:href=\u0026quot;http://example.com/api/addresses/4\u0026quot;/\u0026gt; \u0026lt;/addresses\u0026gt; \u0026lt;/prestashop\u0026gt;  You can notice that a resource API url always follow the same pattern:\n http://example.com/api/RESOURCE_NAME list a type of resource http://example.com/api/RESOURCE_NAME/ID_RESOURCE will return the information of the specified resource   Here is what a resource API call could look like (in this case http://example.com/api/addresses/1):\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026quot;http://www.w3.org/1999/xlink\u0026quot;\u0026gt; \u0026lt;address\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[1]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_customer xlink:href=\u0026quot;http://example.com/api/customers/1\u0026quot;\u0026gt;\u0026lt;![CDATA[1]]\u0026gt;\u0026lt;/id_customer\u0026gt; \u0026lt;id_manufacturer\u0026gt;\u0026lt;![CDATA[0]]\u0026gt;\u0026lt;/id_manufacturer\u0026gt; \u0026lt;id_supplier\u0026gt;\u0026lt;![CDATA[0]]\u0026gt;\u0026lt;/id_supplier\u0026gt; \u0026lt;id_warehouse\u0026gt;\u0026lt;![CDATA[0]]\u0026gt;\u0026lt;/id_warehouse\u0026gt; \u0026lt;id_country xlink:href=\u0026quot;http://example.com/api/countries/8\u0026quot;\u0026gt;\u0026lt;![CDATA[8]]\u0026gt;\u0026lt;/id_country\u0026gt; \u0026lt;id_state\u0026gt;\u0026lt;![CDATA[0]]\u0026gt;\u0026lt;/id_state\u0026gt; \u0026lt;alias\u0026gt;\u0026lt;![CDATA[Mon adresse]]\u0026gt;\u0026lt;/alias\u0026gt; \u0026lt;company\u0026gt;\u0026lt;![CDATA[My Company]]\u0026gt;\u0026lt;/company\u0026gt; \u0026lt;lastname\u0026gt;\u0026lt;![CDATA[DOE]]\u0026gt;\u0026lt;/lastname\u0026gt; \u0026lt;firstname\u0026gt;\u0026lt;![CDATA[John]]\u0026gt;\u0026lt;/firstname\u0026gt; \u0026lt;vat_number\u0026gt;\u0026lt;/vat_number\u0026gt; \u0026lt;address1\u0026gt;\u0026lt;![CDATA[16, Main street]]\u0026gt;\u0026lt;/address1\u0026gt; \u0026lt;address2\u0026gt;\u0026lt;![CDATA[2nd floor]]\u0026gt;\u0026lt;/address2\u0026gt; \u0026lt;postcode\u0026gt;\u0026lt;![CDATA[75002]]\u0026gt;\u0026lt;/postcode\u0026gt; \u0026lt;city\u0026gt;\u0026lt;![CDATA[Paris ]]\u0026gt;\u0026lt;/city\u0026gt; \u0026lt;other\u0026gt;\u0026lt;/other\u0026gt; \u0026lt;phone\u0026gt;\u0026lt;![CDATA[0102030405]]\u0026gt;\u0026lt;/phone\u0026gt; \u0026lt;phone_mobile\u0026gt;\u0026lt;/phone_mobile\u0026gt; \u0026lt;dni\u0026gt;\u0026lt;/dni\u0026gt; \u0026lt;deleted\u0026gt;\u0026lt;![CDATA[0]]\u0026gt;\u0026lt;/deleted\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[2019-01-15 22:46:55]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[2019-01-15 22:46:55]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/prestashop\u0026gt;  Create a resource To create a resource, you simply need to GET the XML blank data for the resource (example /api/addresses?schema=blank), fill it with your changes, and send POST HTTP request with the whole XML as body content to the /api/addresses/ URL.\nPrestaShop will take care of adding everything in the database, and will return an XML file indicating that the operation has been successful, along with the ID of the newly created customer.\nUpdate a resource To edit an existing resource: GET the full XML file for the resource you want to change (example /api/addresses/1), edit its content as needed, then send a PUT HTTP request with the whole XML file as a body content to the same URL again.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/controllers/admin-controllers/",
	"title": "Admin controllers",
	"tags": [],
	"description": "",
	"content": " Create Admin module controllers   Since 1.7.3 you create and override templates and services in your modules. Since 1.7.4, you can create and override forms and console commands. Since 1.7.5, you can create your own \u0026ldquo;modern\u0026rdquo; controllers!  Starting on PrestaShop 1.7.5, you can rely on the modern environment to add new entry points to your applications.\nUsing modern pages, you will have access to the PrestaShop debug toolbar, the service container, Twig and Doctrine, among others. For your views, the PrestaShop UI Kit is available, built on top of Bootstrap 4 and ensuring your views are consistent with the PrestaShop Back Office.\nHow to declare a new Controller Somewhere in your module declare a new class that will act as a Controller:\n// modules/your-module/controller/DemoController.php use PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController; class DemoController extends FrameworkBundleAdminController { public function demoAction() { return $this-\u0026gt;render('@Modules/your-module/templates/admin/demo.html.twig'); } }  You have access to the Container, to Twig as rendering engine, the Doctrine ORM, everything from Symfony framework ecosystem. Note that you must return a Response object, but this can be a JsonResponse if you plan to make a single point application (or \u0026ldquo;SPA\u0026rdquo;).\nThis controller works exactly the same as the Core Back Office ones.\n You must enable the autoloading for this Controller. For example using a composer.json file for your module.\nExample using PSR-4 namespacing  Use namespace for your Controller file\n// modules/your-module/controller/DemoController.php namespace MyModule\\Controller; use PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;  Configure composer to autoload this namespace\n{ \u0026quot;name\u0026quot;: \u0026quot;you/your-module\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;...\u0026quot;, \u0026quot;autoload\u0026quot;: { \u0026quot;psr-4\u0026quot;: { \u0026quot;MyModule\\\\Controller\\\\\u0026quot;: \u0026quot;controller/\u0026quot; } }, \u0026quot;type\u0026quot;: \u0026quot;prestashop-module\u0026quot; }   Now we have created and loaded your controller, you need to declare a route. A route map an action of your controller to an URI.\nHow to map an action of your controller to a URI This is really simple (and very well documented in Symfony\u0026rsquo;s Routing component documentation):\nFor instance:\n# modules/your-module/config/routes.yml your_route_name: path: your-module/demo methods: [GET] defaults: _controller: 'MyModule\\Controller\\DemoController::demoAction'  Any callable can be used to populate the _controller attribute, you don\u0026rsquo;t even need to create your own controller! You could even use a public function from your module main class. Even so, we strongly suggest using a controller.\n The Controller in the previous example will be available if you browse /admin-dev/modules/your-module/demo.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/scale/benchmark/back-office/",
	"title": "Back-Office Benchmark",
	"tags": [],
	"description": "",
	"content": " How to benchmark your PrestaShop Shop (Back-office) Benchmark methodology In order to benchmark the performances of the backoffice of your shop, you will use the Gatling testing tool.\n Note: Backoffice benchmark is only possible starting with prestashop 1.7.4.0!\nIf you want still want to run the test for version \u0026lt; 1.7.4.0, take a look at this PR: https://github.com/PrestaShop/PrestaShop/pull/8876\n What is Gatling? Gatling is a stress tool. Development is currently focusing on HTTP support. We won’t explain here the fundamentals of Gatling, but for more details I suggest you to have a look at the Gatling project. Download Gatling from here, and in the same way have a look at the Gatling quickstart page.\nOnce unzipping the folder it will look like as shown below:\nYour Gatling is ready to be run Now let\u0026rsquo;s test if our Gatling works well, so you can launch a sample test included natively in the project with the CLI:\n➜ ./bin/gatling.sh  And choose the simulation you want to run\nIn my example I run \u0026ldquo;[1] basic.BasicExempleSimulation\u0026rdquo; Well done! Our Gatling installation is ready! After few minutes you can consult the detailed report generated automatically into \u0026ldquo;results\u0026rdquo; folder.\nInsert and setup your script Download the script \u0026ldquo;parcoursbackoffice.scala\u0026rdquo; and put it under \u0026ldquo;/gatling/user-files/simulations\u0026rdquo;.\nOpen with your editor the parcoursbackoffice.scala file and setup your script:\n URL:  EMAIL:  PASSWORD:   Disable the token To avoid handling the multiple generated token on each back-office page, you can just disable it by following the steps below:\nSetup environnement TOKEN variable to \u0026ldquo;disabled\u0026rdquo; allows you to disable token in urls for Symfony pages and in legacy pages. If you want to test it you need to setup environment variable (SetEnv TOKEN disabled in apache vhost configuration file) and check that Symfony pages (Product, Module, \u0026hellip;) urls doesn\u0026rsquo;t contains _token anymore and legacy pages shouldn\u0026rsquo;t contains token parameter.\nFor example if you site is setup in /etc/apache2/sites-enabled/000-default.conf\nadd the value\nSetEnv _TOKEN_ disabled  before\n\u0026lt; /VirtualHost \u0026gt;   Note: don\u0026rsquo;t forget to restart your apache service! Now the token are disabled on your PrestaShop site Back-office, this mean that everyone who can log-in your Back-office could access to anypage from the url page. That why we recommend you to run the benchmark on a website only dedicated to test. If this is not the case, don\u0026rsquo;t forget to restore it when you finish your performance test.\n Congratulations your performance testing script is ready to be run! Don\u0026rsquo;t forget to improve and share this Gatling script "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/database/structure/",
	"title": "Database structure",
	"tags": [],
	"description": "",
	"content": " Maintaining the database Database structure definition Global definition The database structure of PrestaShop can be found in install/data/db_structure.sql (1.7.3.x releases example).\nIt is used one time, during the installation of PrestaShop. It contains the structure of almost all tables. If a table needs to be added or modified, this the file you should open.\nTable in DB but not in db_structure.sql With PrestaShop 1.7, some tables have been migrated to doctrine entities (i.e stocks). If their ObjectModel (= legacy) equivalent does not exist, the entity is probably only managed by Doctrine.\nIn that case, updating the table can be done by modifying the related entity stored in src/PrestaShopBundle/Entity/.\nDatabase content The default database content is stored in XML files in install/data/xml/. There is one file per entity (= table).\nThese files are used during the PrestaShop installation as well.\nStructure and content upgrades Defining changes Once PrestaShop is installed, the default structure and content files we saw are not used anymore.\nIf a new release of PrestaShop must bring changes to the existing database, an upgrade file must be created along the db_structure.sql update. This SQL file will be stored in the folder /install/upgrade/sql/.\nIts name is the PS version on which the change will be applied.\nFor instance, here is the file 1.7.3.0.sql, used by shops upgrading to 1.7.3.0 or later:\n[...] UPDATE `PREFIX_tab` SET `position` = 0 WHERE `class_name` = 'AdminZones' AND `position` = '1'; UPDATE `PREFIX_tab` SET `position` = 1 WHERE `class_name` = 'AdminCountries' AND `position` = '0'; /* PHP:ps_1730_add_quick_access_evaluation_catalog(); */; /* PHP:ps_1730_move_some_aeuc_configuration_to_core(); */; ALTER TABLE `PREFIX_product` ADD `low_stock_threshold` INT(10) NULL DEFAULT NULL AFTER `minimal_quantity`; [...]  In there we can read the SQL queries to execute when upgrading to 1.7.3.0. Each of them alters the structure and/or modify the existing data. In case you have complex algorithms to run, you can call PHP code with the PHP: keyword.\nTo make the code callable, a dedicated file has to be created in /install/upgrade/php/ with a function in it. This file and function must have the same name as we saw in the SQL upgrade file.\nIf we reuse the previous example, we will find the corresponding file /install/upgrade/php/ps_1730_add_quick_access_evaluation_catalog.php:\nfunction ps_1730_add_quick_access_evaluation_catalog() { // Code inserting values in database [...] }  PrestaShop does not expect these functions to return anything. It will always consider it went well.\nApplying changes Applying the changes on your database can be done:\n by reinstalling the shop from a previous version of PrestaShop, by copying the new files and calling the PHP script install/upgrade/upgrade.php  PrestaShop lists the upgrade files waiting to be applied, by selecting the names fitting between the configuration property PS_VERSION_DB and the constant _PS_INSTALL_VERSION_ defined in install/install_version.php.\nIn the first part of this article, we talked about entities being managed only by Doctrine. Applying the changes on the database is done with the following command:\nphp bin/console prestashop:schema:update-without-foreign  Use php app/console instead of php bin/console for versions prior to 1.7.4 \n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/work-with-search-form/",
	"title": "How to work with the Search Form?",
	"tags": [],
	"description": "",
	"content": " Do you know how to do it? Please feel free to contribute to the docs!\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/testing/",
	"title": "Testing",
	"tags": [],
	"description": "",
	"content": " Chapter 3 How testing works in PrestaShop  Automated tests are located into tests folder. Tests are splitted into unit, integration and functional tests in PHP using PHPUnit testing framework. For end to end tests, we use Mocha.js and webdriver.io as bridge to control Selenium server.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/hooks/",
	"title": "Theme Hooks",
	"tags": [],
	"description": "",
	"content": " Create hooks available in Front Office This section of the documentation is only about front office hooks: display and action.\nCreating a dynamic hook When your module or theme calls a hook, PrestaShop executes it.\nFrom a regular PHP file:\nHook::exec('MyCustomHook');  From a Smarty template:\n{hook h='MyCustomHook'}  Making your hook visible and reusable If you want the user to be able to see your hook in PrestaShop\u0026rsquo;s Position page (in the back office), it has to be registered.\nYou can register your hook from your theme\u0026rsquo;s theme.yml file:\nglobal_settings: hooks: custom_hooks: - name: displayFooterBefore title: displayFooterBefore description: Add a widget area above the footer  You can also register your hook from a module:\n// Create the function for the MyCustomHook hook public function MyCustomHook($params) { // method body } // Register the MyCustomHook hook Hook::register('MyCustomHook'); // Call it from PHP Hook::exec('MyCustomHook');  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/hooks/use-hooks-on-modern-pages/",
	"title": "Use hooks on modern pages",
	"tags": [],
	"description": "",
	"content": " Use hooks on modern pages You know you can already customize your PrestaShop store thanks to many hooks: the good news is that you can still use hooks like you did in the earlier versions of PrestaShop in modern pages.\nStarting from PrestaShop 1.7.3, you can access the modern Services Container into your modules and so on access powerful and customizable features available in Symfony:\n Twig, the most popular templating engine; Swiftmailer, a feature-rich mailer; Doctrine ORM and Doctrine DBAL to manage your database; Filesystem and Finder libraries to manage all filesystem operations; Monolog for every logging operations; Serializer library for whom who need to manipulate Json and Xml formats\u0026hellip;  Of course, you also have access to every service used by the Core of PrestaShop. This means that you can rely on all services defined in PrestaShopBundle/config/ folder, except from the ones declared in adapter folder: they will be removed at some point.\n If you don\u0026rsquo;t know what is a service, take a look at the Symfony documentation about the services container.\n Better modules on modern pages Let\u0026rsquo;s say your customer want an xml export button directly available from list of products on Product Catalog page: such a common need regarding the number of related modules in the Store.\nHow hard it can be to develop a module that provide this button? Well, it\u0026rsquo;s not! Let\u0026rsquo;s do this feature together.\nFirst step: select the right hook Accessing the Product Catalog page in debug mode we can access the list of available hooks in the debug toolbar:\n moduleRoutes displayBackOfficeHeader displayBackOfficeTop actionAdminControllerSetMedia displayDashboardToolbarTopMenu displayDashboardTop hookdisplayDashboardToolbarIcons displayBackOfficeFooter displayAdminNavBarBeforeEnd displayAdminAfterHeader actionDispatcherBefore actionDispatcherAfter  As we need to act on Dashboard but after the header, in the icons toolbar (with others export options) hookdisplayDashboardToolbarIcons sounds like the hook we are looking for.\nSecond step: create and register the Hook Create a new module called foo and register the hook. You should end up with this kind of code in your module:\n// foo.php /* ... */ /** * Module installation. * * @return bool Success of the installation */ public function install() { return parent::install() \u0026amp;\u0026amp; $this-\u0026gt;registerHook('displayDashboardToolbarIcons'); } /** * Add an \u0026quot;XML export\u0026quot; action in Product Catalog page. * * @return bool Success of the installation */ public function hookDisplayDashboardToolbarIcons($hookParams) { if ($this-\u0026gt;isSymfonyContext() \u0026amp;\u0026amp; $hookParams['route'] === 'admin_product_catalog') { // to be continued } }   \u0026lsquo;route\u0026rsquo; property is only available for modern pages to find the route related to a page look at the debug toolbar.\n Third step: create your own product serializer At this point, this is basic PHP code we need to produce. We need to retrieve the list of products from database, and serialize them into XML and dump into a file sent to the user.\nUsing Doctrine (DBAL) to retrieve data Even if using old way to retrieve data is still valid (Product::getProducts or through the webservice), we\u0026rsquo;d like to introduce a best practice here: using a repository and get ride of the Object model. This has a lot of advantages, you rely on database instead of model and you\u0026rsquo;ll have better performances and control on your data.\n// src/Repository/ProductRepository.php namespace Foo\\Repository; use Doctrine\\DBAL\\Connection; class ProductRepository { /** * @var Connection the Database connection. */ private $connection; /** * @var string the Database prefix. */ private $databasePrefix; public function __construct(Connection $connection, $databasePrefix) { $this-\u0026gt;connection = $connection; $this-\u0026gt;databasePrefix = $databasePrefix; } /** * @param int $langId the lang id * @return array the list of products */ public function findAllbyLangId(int $langId) { $prefix = $this-\u0026gt;databasePrefix; $productTable = \u0026quot;${prefix}product\u0026quot;; $productLangTable = \u0026quot;${prefix}product_lang\u0026quot;; $query = \u0026quot;SELECT p.* FROM ${productTable} p LEFT JOIN ${productLangTable} pl ON (p.`id_product` = pl.`id_product`) WHERE pl.`id_lang` = :langId\u0026quot;; $statement = $this-\u0026gt;connection-\u0026gt;prepare($query); $statement-\u0026gt;bindValue('langId', $langId); $statement-\u0026gt;execute(); return $statement-\u0026gt;fetchAll(); } }  And declare your repository as a service:\n# modules/foo/config/services.yml services: product_repository: class: Foo\\Repository\\ProductRepository arguments: ['@doctrine.dbal.default_connection', '%database_prefix%']  You can now use it in your module (and everywhere in PrestaShop modern pages!):\n// foo.php /* ... */ /** * Get the list of products for a specific lang. */ public function hookDisplayDashboardToolbarIcons($hookParams) { if ($this-\u0026gt;isSymfonyContext() \u0026amp;\u0026amp; $hookParams['route'] === 'admin_product_catalog') { $products = $this-\u0026gt;get('product_repository')-\u0026gt;findAllByLangId(1); dump($products); } }  In Product Catalog Page you should see the list of Products in debug toolbar in \u0026ldquo;Dump\u0026rdquo; section:\nUsing the Symfony components to create an XML export file Now we retrieve the product list from our module and that we are able to display the information into the back office, we could already create our XML file with raw PHP. Let\u0026rsquo;s see how we can do it using the components provided by Symfony \u0026ldquo;out of box\u0026rdquo;.\n// foo.php /* ... */ /** * Creates an XML file with list of products in \u0026quot;upload\u0026quot; folder. * * @return bool Success of the installation */ public function hookDisplayDashboardToolbarIcons($hookParams) { if ($this-\u0026gt;isSymfonyContext() \u0026amp;\u0026amp; $hookParams['route'] === 'admin_product_catalog') { $products = $this-\u0026gt;get('product_repository')-\u0026gt;findAllByLangId(1); $productsXml = $this-\u0026gt;get('serializer')-\u0026gt;serialize( $products, 'xml', [ 'xml_root_node_name' =\u0026gt; 'products', 'xml_format_output' =\u0026gt; true, ] ); $this-\u0026gt;get('filesystem')-\u0026gt;dumpFile(_PS_UPLOAD_DIR_.'products.xml', $productsXml); } }  Note: the serializer service is not enabled in PrestaShop 1.7.3 but will be enabled in 1.7.4. If you really want to enable it in 1.7.3,uncomment the following configuration line in your services.yml file of your Shop.\n # app/config/services.yml services: # Enables the serializer framework: serializer: { enable_annotations: true }  Render the icon using Twig templating engine Now we have serialized our products, it\u0026rsquo;s time to render an Icon link with the file to download!\nWe could (of course) use Smarty to render a template, but it\u0026rsquo;s a chance to discover Twig which is also available as a service. First, let\u0026rsquo;s refactor and finalize our hook call:\n/** * Make products export in XML. * * @param $params array */ public function hookDisplayDashboardToolbarIcons($params) { if ($this-\u0026gt;isSymfonyContext() \u0026amp;\u0026amp; $params['route'] === 'admin_product_catalog') { $products = $this-\u0026gt;getProducts(1); $productsXml = $this-\u0026gt;serializeProducts($products); $filepath = _PS_ROOT_DIR_.'/products.xml'; $this-\u0026gt;writeFile($productsXml, $filepath); return $this-\u0026gt;get('twig')-\u0026gt;render('@PrestaShop/Foo/download_link.twig',[ 'filepath' =\u0026gt; _PS_BASE_URL_.'/products.xml', ]); } }  We have extracted business logic into specific functions.\n And now, the template:\n{# in views/PrestaShop/Foo/download_link.twig #} \u0026lt;a id=\u0026quot;desc-product-export\u0026quot; class=\u0026quot;list-toolbar-btn\u0026quot; href=\u0026quot;{{ filepath }}\u0026quot; download\u0026gt; \u0026lt;b data-toggle=\u0026quot;pstooltip\u0026quot; class=\u0026quot;label-tooltip\u0026quot; data-original-title=\u0026quot;{{ \u0026quot;Export XML\u0026quot;|trans({}, 'Module.Foo' }}\u0026quot; data-html=\u0026quot;true\u0026quot; data-placement=\u0026quot;top\u0026quot;\u0026gt; \u0026lt;i class=\u0026quot;material-icons\u0026quot;\u0026gt;cloud_upload\u0026lt;/i\u0026gt; \u0026lt;/b\u0026gt; \u0026lt;/a\u0026gt;  We have used a key for translation, making our own translations available in back office when using Twig.\n And \u0026ldquo;voila!\u0026rdquo;, the module could be of course improved with so many features, adding filters on export for instance, using the request hook parameter and updating the Product repository.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/widgets/",
	"title": "Widgets",
	"tags": [],
	"description": "",
	"content": " Widgets Widget is an advanced concept introduced on PrestaShop 1.7, extending hooks feature.\nLimitation of hooks In their basic use, a display hook will be shown at a specific place in the template. If a module wants to display the same additional content on several places, whatever the merchant chose, it still has to register and implement all the possible hooks.\nWith widgets, module developers can display content everywhere the module is asked to do so. When a module implements widgets in its code, it allows:\n a theme to call the module directly with {widget name=\u0026quot;\u0026lt;module_name\u0026gt;\u0026quot;} the core to fallback on it if a registered hook is called but its method hook\u0026lt;hook_name\u0026gt;() does not exist.  Make a module widgets compliant In order to be widget-compliant, a module needs to follow two steps:\nImplement interface Before calling a module for widgets, the core must be sure your module has this feature available. This can be done by implementing the interface PrestaShop\\PrestaShop\\Core\\Module\\WidgetInterface (Source code).\nDeclare mandatory methods As soon as a module implements the WidgetInterface, two methods must be declared:\npublic function renderWidget($hookName, array $configuration); public function getWidgetVariables($hookName, array $configuration);  The method renderWidget() is the entrypoint for the core in order to get the generated view (fetch smarty template). The method getWidgetVariables() returns the variables you want to assign to smarty.\nThe parameters sent to both functions are the same:\n $hookName: providing the hook name allows the module to have a different behavior according to it.  null when the module is called directly from the widget system. Name of the hook when a non-implemented hook is called.  $configuration: This is the equivalent of the parameter $params when a hook is called.  Call Widgets Once the module has implemented the method renderWidget(), there are two ways to call it.\nThe old way, with hooks The first one is by triggering a hook manually registered to the module, but not implemented by it.\n From a PHP class  Hook::exec($hook_name)   From a Smarty template  {hook h='\u0026lt;hook_name\u0026gt;'}  The method called with be different regarding the module content:\n  Using widget from hooks   With widget The function renderWidget() of a specific module can be called directly:\n From a Smarty template (recommended)  // Generic call {widget name='\u0026lt;module_name\u0026gt;'} // Call with a hook name {widget name='\u0026lt;module_name\u0026gt;' hook='\u0026lt;hook_name\u0026gt;'}   From a PHP class  Hook::coreRenderWidget(Module $module, $hook_name, $params);  The hook name sent to renderWidget will depend on the value provided to the optional hook parameter.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/creation/adding-configuration-page/",
	"title": "Adding a configuration page",
	"tags": [],
	"description": "",
	"content": " Adding a configuration page Your module can get a \u0026ldquo;Configure\u0026rdquo; link in the back office module list, and therefore let the user change some settings. This \u0026ldquo;Configure\u0026rdquo; link appears with addition of the getContent() method to your main class. This is a standard PrestaShop method: its sole existence sends a message to the back office, saying \u0026ldquo;there\u0026rsquo;s a configuration page in this module, display the configuration link\u0026rdquo;.\nBut having a getContent() public method in the MyModule object does only make the \u0026ldquo;Configure\u0026rdquo; link appear; it does not create the configuration page out of nowhere. We are going to explain how to create one, where we will be able to edit the content of the MYMODULE_NAME variable that we stored in the ps_configuration data table.\nThe getContent() method First, here is the complete code for the getContent() method:\npublic function getContent() { $output = null; if (Tools::isSubmit('submit'.$this-\u0026gt;name)) { $myModuleName = strval(Tools::getValue('MYMODULE_NAME')); if ( !$myModuleName || empty($myModuleName) || !Validate::isGenericName($myModuleName) ) { $output .= $this-\u0026gt;displayError($this-\u0026gt;l('Invalid Configuration value')); } else { Configuration::updateValue('MYMODULE_NAME', $myModuleName); $output .= $this-\u0026gt;displayConfirmation($this-\u0026gt;l('Settings updated')); } } return $output.$this-\u0026gt;displayForm(); }  The getContent() method is the first one to be called when the configuration page is loaded. Therefore, we use it to first update any value that might have been submitted by the form that the configuration page contains.\nHere is a line by line explanation:\n Tools::isSubmit() is a PrestaShop-specific method, which checks if the indicated form has been validated. In this case, if the configuration form has not yet been validated, the whole if() block is skipped and PrestaShop will only use the last line, which displays the configuration with the current values, as generated by the displayForm() method. Tools::getValue() is a PrestaShop-specific method, which retrieve the content of the POST or GET array in order to get the value of the specified variable. In this case, we retrieve the value of the MYMODULE_NAME form variable, turn its value into a text string using the strval() method, and stores it in the $myModuleName PHP variable. We then check for the existence of actual content in $myModuleName, including the use of Validate::isGenericName(). The Validate object contains many data validation methods, among which is isGenericName(), a method that helps you keep only strings that are valid PrestaShop names – meaning, a string that does not contain special characters, for short. If any of these checks fail, the configuration will open with an error message, indicating that the form validation failed. The $output variable, which contains the final rendition of the HTML code that makes the configuration page, thus begins with an error message, created using PrestaShop\u0026rsquo;s displayError() method. This method returns the correct HTML code for our need, and since that code is first in \\$output, this means the configuration will open with that message. If all these checks are successful, this means we can store the value in our database. As we saw earlier in this tutorial, the Configuration object has just the method we need: updateValue() will store the new value for MYMODULE_NAME in the configuration data table. To that end, we add a friendly message to the user, indicating that the value has indeed been saved: we use PrestaShop\u0026rsquo;s displayConfirmation() method to add that message as the first data in the \\$output variable – and therefore, at the top of the page. Finally, we use the custom displayForm() method (which we are going to create and explain in the next section) in order to add content to $output (whether the form was submitted or not), and return that content to the page. Note that we could have included the code for displayForm() right within getContent(), but chose to separate the two for readability and separation of concerns.  This form-validation code is nothing new for PHP developers, but uses some of the PrestaShop methods that you will very regularly use.\nDisplaying the form The configuration form itself is displayed with the displayForm() method. Here is its code, which we are going to explain after the jump:\npublic function displayForm() { // Get default language $defaultLang = (int)Configuration::get('PS_LANG_DEFAULT'); // Init Fields form array $fieldsForm[0]['form'] = [ 'legend' =\u0026gt; [ 'title' =\u0026gt; $this-\u0026gt;l('Settings'), ], 'input' =\u0026gt; [ [ 'type' =\u0026gt; 'text', 'label' =\u0026gt; $this-\u0026gt;l('Configuration value'), 'name' =\u0026gt; 'MYMODULE_NAME', 'size' =\u0026gt; 20, 'required' =\u0026gt; true ] ], 'submit' =\u0026gt; [ 'title' =\u0026gt; $this-\u0026gt;l('Save'), 'class' =\u0026gt; 'btn btn-default pull-right' ] ]; $helper = new HelperForm(); // Module, token and currentIndex $helper-\u0026gt;module = $this; $helper-\u0026gt;name_controller = $this-\u0026gt;name; $helper-\u0026gt;token = Tools::getAdminTokenLite('AdminModules'); $helper-\u0026gt;currentIndex = AdminController::$currentIndex.'\u0026amp;configure='.$this-\u0026gt;name; // Language $helper-\u0026gt;default_form_language = $defaultLang; $helper-\u0026gt;allow_employee_form_lang = $defaultLang; // Title and toolbar $helper-\u0026gt;title = $this-\u0026gt;displayName; $helper-\u0026gt;show_toolbar = true; // false -\u0026gt; remove toolbar $helper-\u0026gt;toolbar_scroll = true; // yes - \u0026gt; Toolbar is always visible on the top of the screen. $helper-\u0026gt;submit_action = 'submit'.$this-\u0026gt;name; $helper-\u0026gt;toolbar_btn = [ 'save' =\u0026gt; [ 'desc' =\u0026gt; $this-\u0026gt;l('Save'), 'href' =\u0026gt; AdminController::$currentIndex.'\u0026amp;configure='.$this-\u0026gt;name.'\u0026amp;save'.$this-\u0026gt;name. '\u0026amp;token='.Tools::getAdminTokenLite('AdminModules'), ], 'back' =\u0026gt; [ 'href' =\u0026gt; AdminController::$currentIndex.'\u0026amp;token='.Tools::getAdminTokenLite('AdminModules'), 'desc' =\u0026gt; $this-\u0026gt;l('Back to list') ] ]; // Load current value $helper-\u0026gt;fields_value['MYMODULE_NAME'] = Configuration::get('MYMODULE_NAME'); return $helper-\u0026gt;generateForm($fieldsForm); }  While this might look like a huge block of code for a single value to change, this block actually uses some of PrestaShop\u0026rsquo;s method to make it easier to build forms, most notably the HelperForm object.\nDiving in displayForm() Let\u0026rsquo;s run down that method:\n Using the Configuration::get() method, we retrieve the value of the currently chosen language (\u0026rdquo;PS_LANG_DEFAULT\u0026rdquo;). For security reasons, we cast the variable into an integer using (int). In preparation for the generation of the form, we must build an array of the various titles, textfields and other form specifics.\nTo that end, we create the $fieldsForm variable, which will contain a multidimensional array. Each of the arrays it features contains the detailed description of the tags the form must contain. From this variable, PrestaShop will render the HTML form as it is described.\nIn this example, we define three tags (\u0026lt;legend\u0026gt;, \u0026lt;input\u0026gt; and \u0026lt;submit\u0026gt;) and their attributes using arrays. The format is quite easy to get: the legend and submit arrays simply contain the attributes to each tag, while the input contains as many tags are needed, each being in turn an array which contains the necessary attributes. For instance:  'input' =\u0026gt; [ [ 'type' =\u0026gt; 'text', 'label' =\u0026gt; $this-\u0026gt;l('Configuration value'), 'name' =\u0026gt; 'MYMODULE_NAME', 'size' =\u0026gt; 20, 'required' =\u0026gt; true ] ]  \u0026hellip;generates the following HTML tags:\n\u0026lt;label\u0026gt;Configuration value \u0026lt;/label\u0026gt; \u0026lt;div class=\u0026quot;margin-form\u0026quot;\u0026gt; \u0026lt;input id=\u0026quot;MYMODULE_NAME\u0026quot; class=\u0026quot;\u0026quot; type=\u0026quot;text\u0026quot; size=\u0026quot;20\u0026quot; value=\u0026quot;my friend\u0026quot; name=\u0026quot;MYMODULE_NAME\u0026quot;\u0026gt; \u0026lt;sup\u0026gt;*\u0026lt;/sup\u0026gt; \u0026lt;div class=\u0026quot;clear\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;  As you can see, PrestaShop is quite clever, and generates all the code that is needed to obtain a useful form.\nNote that the value of the main array is actually retrieved later in the form generation code.\n We then create an instance of the HelperForm class. This section of the code is explained in the next section of this chapter. Once the HelperForm settings are all in place, we generate the form based on the content of the $fieldsForm variable.  Using HelperForm HelperForm is one of the helper methods that were added with PrestaShop 1.5, along with HelperOptions, HelperList, HelperView and HelperHelpAccess. They enable you to generate standard HTML elements for the back office as well as for module configuration pages. You can get more information about Helper classes in the \u0026ldquo;Helpers\u0026rdquo; chapter of this developer guide, with a page dedicated to HelperForm.\nHere is our sample code, as a reminder:\n$helper = new HelperForm(); // Module, Token and currentIndex $helper-\u0026gt;module = $this; $helper-\u0026gt;name_controller = $this-\u0026gt;name; $helper-\u0026gt;token = Tools::getAdminTokenLite('AdminModules'); $helper-\u0026gt;currentIndex = AdminController::$currentIndex.'\u0026amp;configure='.$this-\u0026gt;name; // Language $helper-\u0026gt;default_form_language = $defaultLang; $helper-\u0026gt;allow_employee_form_lang = $defaultLang; // title and Toolbar $helper-\u0026gt;title = $this-\u0026gt;displayName; $helper-\u0026gt;show_toolbar = true; // false -\u0026gt; remove toolbar $helper-\u0026gt;toolbar_scroll = true; // yes - \u0026gt; Toolbar is always visible on the top of the screen. $helper-\u0026gt;submit_action = 'submit'.$this-\u0026gt;name; $helper-\u0026gt;toolbar_btn = [ 'save' =\u0026gt; [ 'desc' =\u0026gt; $this-\u0026gt;l('Save'), 'href' =\u0026gt; AdminController::$currentIndex.'\u0026amp;configure='.$this-\u0026gt;name.'\u0026amp;save'.$this-\u0026gt;name. '\u0026amp;token='.Tools::getAdminTokenLite('AdminModules'), ], 'back' =\u0026gt; [ 'href' =\u0026gt; AdminController::$currentIndex.'\u0026amp;token='.Tools::getAdminTokenLite('AdminModules'), 'desc' =\u0026gt; $this-\u0026gt;l('Back to list') ] ]; // Load current value $helper-\u0026gt;fields_value['MYMODULE_NAME'] = Configuration::get('MYMODULE_NAME'); return $helper-\u0026gt;generateForm($fieldsForm);  Our example uses several of HelperForm\u0026rsquo;s attributes: they need to be set before we generate the form itself from the $fieldsForm variable:\n $helper-\u0026gt;module: requires the instance of the module that will use the form. $helper-\u0026gt;name_controller: requires the name of the module. $helper-\u0026gt;token: requires a unique token for the module. getAdminTokenLite() helps us generate one. $helper-\u0026gt;currentIndex: $helper-\u0026gt;default_form_language: requires the default language for the shop. $helper-\u0026gt;allow_employee_form_lang: requires the default language for the shop. $helper-\u0026gt;title: requires the title for the form. $helper-\u0026gt;show_toolbar: requires a boolean value – whether the toolbar is displayed or not. $helper-\u0026gt;toolbar_scroll: requires a boolean value – whether the toolbar is always visible when scrolling or not. $helper-\u0026gt;submit_action: requires the action attribute for the form\u0026rsquo;s \u0026lt;submit\u0026gt; tag. $helper-\u0026gt;toolbar_btn: requires the buttons that are displayed in the toolbar. In our example, the \u0026ldquo;Save\u0026rdquo; button and the \u0026ldquo;Back\u0026rdquo; button. $helper-\u0026gt;fields_value[]: this is where we can define the value of the named tag.  Finally, after all is set and done, we can call the generateForm() method, which will take care of putting it all together and, as its name says, generate the form that the user will use to configure the module\u0026rsquo;s settings.\nHere is the rendition of the form as it is presently written – which you can see by yourself by clicking on the \u0026ldquo;Configure\u0026rdquo; link for the module in the back office:\nChange the value to whichever you like, click on the \u0026ldquo;Save\u0026rdquo; button, then go reload the homepage: your module is indeed updated with the new string!\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/forms/admin-forms/",
	"title": "Alter Back Office forms",
	"tags": [],
	"description": "",
	"content": " Alter forms on modern pages  One of the most common tasks for the PrestaShop developers is to alter the data and make it manageable for customers. In PrestaShop 1.6, a specific Form framework was created to help developers. In PrestaShop 1.7, the system has changed as we now rely on the Symfony Form component.\nLet\u0026rsquo;s see an example on how to add, populate, validate and persist a new form field in PrestaShop 1.7.\nCreate the module and register the hooks # /modules/module_name/module_name.php public function hookActionAdministrationPageForm(\u0026amp;$hookParams) { $formBuilder = $hookParams['form_builder']; $uploadQuotaForm = $formBuilder-\u0026gt;get('upload_quota'); $uploadQuotaForm-\u0026gt;add( 'description', TextType::class, [ 'data' =\u0026gt; 'A description', 'label' =\u0026gt; 'Description' ] ); } public function hookActionAdministrationPageFormSave(\u0026amp;$hookParams) { // retrieve and validate the data dump($hookParams['form_data']['upload_quota']['description']); // if the data is invalid, populate `errors` array dump($hookParams['errors']); }  The form field should be available in the selected form, can be validated and persisted in the database if valid using the provided hooks. If you access the Administration page in Back Office, you should see the new form field:\nTemplating Of course, you can override every template to improve again the rendering of the form (the Back Office theme may be/will be improved in future versions)\n# /modules/module_name/views/PrestaShop/Admin/AdvancedParameters/administration.html.twig {% block administration_form_upload_quota %} \u0026lt;div class=\u0026quot;col\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;card\u0026quot;\u0026gt; \u0026lt;h3 class=\u0026quot;card-header\u0026quot;\u0026gt; \u0026lt;i class=\u0026quot;material-icons\u0026quot;\u0026gt;file_upload\u0026lt;/i\u0026gt; {{ 'Upload quota'|trans }} \u0026lt;/h3\u0026gt; \u0026lt;div class=\u0026quot;card-block\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;card-text\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; {{ ps.label_with_help(('Maximum size for attached files'|trans), ('Set the maximum size allowed for attachment files (in megabytes). This value has to be lower or equal to the maximum file upload allotted by your server (currently: %size% MB).'|trans({'%size%': 'PS_ATTACHMENT_MAXIMUM_SIZE'|configuration}, 'Admin.Advparameters.Help'))) }} {{ form_errors(uploadQuotaForm.max_size_attached_files) }} {{ form_widget(uploadQuotaForm.max_size_attached_files) }} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; {{ ps.label_with_help(('Maximum size for a downloadable product'|trans), ('Define the upload limit for a downloadable product (in megabytes). This value has to be lower or equal to the maximum file upload allotted by your server (currently: %size% MB).'|trans({'%size%': 'PS_LIMIT_UPLOAD_FILE_VALUE'|configuration}, 'Admin.Advparameters.Help'))) }} {{ form_errors(uploadQuotaForm.max_size_downloadable_product) }} {{ form_widget(uploadQuotaForm.max_size_downloadable_product) }} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; {{ ps.label_with_help((\u0026quot;Maximum size for a product's image\u0026quot;|trans), ('Define the upload limit for an image (in megabytes). This value has to be lower or equal to the maximum file upload allotted by your server (currently: %size% MB).'|trans({'%size%': 'PS_LIMIT_UPLOAD_IMAGE_VALUE'|configuration}, 'Admin.Advparameters.Help'))) }} {{ form_errors(uploadQuotaForm.max_size_product_image) }} {{ form_widget(uploadQuotaForm.max_size_product_image) }} \u0026lt;/div\u0026gt; {# Do what you need to do, I'm really bad at designing pages ^o^ #} \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; {{ form_label(uploadQuotaForm.description) }} {{ form_widget(uploadQuotaForm.description) }} {{ form_errors(uploadQuotaForm.description) }} \u0026lt;/div\u0026gt; {{ form_rest(uploadQuotaForm) }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;card-footer\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;d-flex justify-content-end\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-primary\u0026quot;\u0026gt;{{ 'Save'|trans({}, 'Admin.Actions') }}\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock %}  Handle form error in the product page form If we want to manage errors of the product page, adding text in controller-\u0026gt;errors (like in the legacy controllers) is not working, we have to add your error in a specific syntax et return a json array of errors.\nAssuming we want to notify an error when validating the Product form on the field with the id form_step6_myfield, this is the correct method to display an error message to the user.\nIn the hook (actionProductUpdate, actionAdminProductsControllerSaveAfter, \u0026hellip;):\n// add error Context::getContext()-\u0026gt;controller-\u0026gt;errors['step6_myfield'] = [$this-\u0026gt;l('Syntax error in field')]; // return error if (Context::getContext()-\u0026gt;controller-\u0026gt;errors) { http_response_code(400); die(json_encode(Context::getContext()-\u0026gt;controller-\u0026gt;errors)); }  \u0026lt;input type=\u0026quot;text\u0026quot; id=\u0026quot;form_step6_myfield\u0026quot; name=\u0026quot;whatever\u0026quot; /\u0026gt;  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/controllers/",
	"title": "Controllers",
	"tags": [],
	"description": "",
	"content": " Controllers In the previous chapters, we saw how to add content in the existing pages of the front and back office with hooks \u0026amp; widgets.\nAs soon as a module needs to implement more than a configuration page, building controllers will offer a dedicated space for your features. In a MVC architecture, a Controller manages the synchronization events between the View and the Model, and keeps them up to date. It receives all the user events and triggers the actions to perform.\nIf an action needs data to be changed, the Controller will “ask” the Model to change the data, and in turn the Model will notify the View that the data has been changed, so that the View can update itself.\nBasically, module controllers will behave like the core ones thanks the class inheritance:\n  Controller classes inheritance   The core classes can be found in the /classes/controller folder.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/forms/",
	"title": "Forms",
	"tags": [],
	"description": "",
	"content": " Forms "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/extend-grid-with-javascript/",
	"title": "How to extend a Grid with Javascript extensions?",
	"tags": [],
	"description": "",
	"content": " Do you know how to do it? Please feel free to contribute to the docs!\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/templating/admin-views/",
	"title": "How to override Back Office views",
	"tags": [],
	"description": "",
	"content": " How to override Back Office views  Since PrestaShop 1.7, the back office is being progressively migrated to the Symfony framework. Even though modules are no longer allowed to override a complete controller like before (it was highly discouraged anyway), we have introduced new powerful and more efficient ways to customize the Back Office.\nAs part of this migration, PrestaShop is switching its templating engine from Smarty to Twig. Twig is very popular in the PHP/Symfony world, it\u0026rsquo;s well-documented and it\u0026rsquo;s also one of the most efficient engines out there.\nThis means that once all the pages have been migrated, the whole Back Office will be Twig-based. This engine has allowed us to enable some powerful new features for module developers on modern pages.\nOverride templates Let\u0026rsquo;s say we want to improve the Product Listing page of the back office.\nOur Customer want a better Listing view: the \u0026ldquo;Price\u0026rdquo; column should be at position 2 and the \u0026ldquo;Reference\u0026rdquo; column to be removed. How can we do that? It\u0026rsquo;s quite simple.\nIdentify the template to override First we need to identify which Twig template(s) is (are) rendered. Using the Debug mode, select the \u0026ldquo;Twig metrics\u0026rdquo; block in the Symfony Debug toolbar. You\u0026rsquo;ll see the list of Twig templates used to render the page. In our case, we are interested in the template \u0026ldquo;@PrestaShop/Admin/Product/catalog.html.twig\u0026rdquo;.\nOverride the template in the module: a simple \u0026ldquo;Hello world!\u0026rdquo; Now we have found the right template, let\u0026rsquo;s override it inside a module. In a module called foo let\u0026rsquo;s create the related template. As the template is located inside the PrestaShop/Admin/Product/CatalogPage folder, we need to create the same path.\nSo Let\u0026rsquo;s create a file named catalog.html.twig in the modules/foo/views/PrestaShop/Admin/Product/CatalogPage/catalog.html.twig folder: we could re-use the one in the src/PrestaShopBundle/Resources/views/Admin/Product/CatalogPage folder, but let\u0026rsquo;s start with a very simple override.\n{% extends '@PrestaShop/Admin/layout.html.twig' %} {% block content %} Hello world! {% endblock %}  Access the product Listing page and \u0026ldquo;voila\u0026rdquo;, we have overridden the complete page. Now we can re-use the real catalog.html.twig template as a base and adapt it to remove \u0026ldquo;Reference\u0026rdquo; column. For instance, remove \u0026ldquo;Reference\u0026rdquo; and \u0026ldquo;Search Ref.\u0026rdquo; table headers, and we should have this view:\nWell, it\u0026rsquo;s not that good\u0026hellip; it\u0026rsquo;s because the columns are also rendered by the template list.html.twig. We must override it to remove the \u0026ldquo;Reference\u0026rdquo; column.\nLet\u0026rsquo;s create the file named list.html.twig in the modules/foo/views/PrestaShop/Admin/Product/CatalogPage folder with the content of original template located in the src/PrestaShopBundle/Resources/views/Admin/Product/CatalogPage folder.\nWe only have to remove the \u0026ldquo;Reference\u0026rdquo; row in this template and we are good.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/javascript-events/",
	"title": "Javascript events",
	"tags": [],
	"description": "",
	"content": " JavaScript events Javascript architecture PrestaShop 1.7 has reworked a lot of javascript code, almost rewriting everything.\nIt\u0026rsquo;s recommended to read more about PrestaShop asset management before continuing.\n A default store loads a lot less files in 1.7 compared to 1.6, there are no specific files per page for instance. The 2 new important files you have to master are:\n   File Content     core.js Loads jQuery2, makes ajax calls, defines core methods that all frontend should use   theme.js Bundles all theme specific code and libraries    jQuery is loaded by the core, so each theme will have jQuery v2 available. Do not redefine it.\n Events Dispatch an event The best way to trigger an event is to use the prestashop object. Here is a simple example:\nprestashop.emit( 'product updated', { dataForm: someSelector.serializeArray(), productOption: 3 } );  Dispatched events PrestaShop will dispatch many events from core.js so your code can rely on it:\n   Event Name Description     updateCart On the cart page, everytime something happens (change quantity, remove product and so on) the cart is reloaded by ajax call. After the cart is updated, this event is triggered.   updateAddressForm In the address form, some input will trigger ajax calls to modify the form (like country change), after the form is updated, this event is triggered.   updateDeliveryForm During checkout, if the delivery address is modified, this event will be trigged.   changedCheckoutStep Each checkout step submission will fire this event.   updateProductList On every product list page (category, search results, pricedrop and so on), the list is updated via ajax calls if you change filters or sorting options. Each time the DOM is reloaded with new product list, this event is triggered.   clickQuickView If your theme handles it, this event will be trigged when use click on the quickview link.   updateProduct On the product page, selecting a new combination will reload the DOM via ajax calls. After the update, this event is fired.   handleError This event is fired after a fail of POST request. Have the eventType as first parameter.   updateFaces On every product list page (category, search results, pricedrop and so on), the list is updated via ajax calls if you change filters or sorting options. Each time the facets is reloaded, this event is triggered.   responsive update While broswer is resized, this event is fired with a mobile parameter.    Triggering delegated events We use event delegation to make sure that the events are still attached after the DOM was modified (like after an ajax call).\nHere is a simple way to trigger a delegated event.\nvar body = $('body'); // Our events are usually attached to the body var event = jQuery.Event('click'); event.target = body.find('.js-theClassYouNeed'); body.trigger(event);  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/controllers/kpi-blocks/",
	"title": "KPI block in Admin pages",
	"tags": [],
	"description": "",
	"content": " How to add a KPI block in admin pages  A KPI block (also called KPI row) is shown here:\n  KPI Block   You can follow these steps to easily add a KPI row to a modern page:\n Define your KPI classes:  You can use one of existing KPI classes, from PrestaShop\\PrestaShop\\Adapter\\Kpi namespace, You can create new classes - they must implement the PrestaShop\\PrestaShop\\Core\\Kpi\\KpiInterface  Define a KPI row factory service in src/PrestaShopBundle/Resources/config/services/core/kpi.yml\nExample from translations page:\nprestashop.core.kpi_row.factory.translations_page: class: PrestaShop\\PrestaShop\\Core\\Kpi\\Row\\KpiRowFactory arguments: - '@prestashop.adapter.kpi.enabled_languages' - '@prestashop.adapter.kpi.main_country' - '@prestashop.adapter.kpi.translations'  The KPI row factory accepts an unlimited number of arguments, each argument being a KPI that will be built into a KPI row.\n  Build the KPI row in your controller\u0026rsquo;s action and assign it to twig by returning it:\npublic function showSettingsAction(Request $request) { // Create the KPI row factory service $kpiRowFactory = $this-\u0026gt;get('prestashop.core.kpi_row.factory.your_page'); return [ // Assign the built KPI row to the view 'kpiRow' =\u0026gt; $kpiRowFactory-\u0026gt;build(), ... ]; }  The final step is to render the KPI row with Twig, using renderKpiRow method from CommonController and passing it to the previously assigned kpiRow variable:\n{# This also works in Admin module controllers #} {% block translations_kpis_row %} \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; {{ render(controller( 'PrestaShopBundle:Admin\\\\Common:renderKpiRow', { 'kpiRow': kpiRow } )) }} \u0026lt;/div\u0026gt; {% endblock %}   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/",
	"title": "PrestaShop modules",
	"tags": [],
	"description": "",
	"content": " Chapter 4 PrestaShop modules PrestaShop\u0026rsquo;s extensibility revolves around modules, which are small programs that make use of PrestaShop\u0026rsquo;s functionalities and changes them or add to them in order to make PrestaShop easier to use or more tailored to the merchant\u0026rsquo;s needs.\n Introduction   Getting started   Extension concepts   Payment modules   Testing   Core changes   Selling your modules on the Addons Marketplace   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/templating/",
	"title": "Templating",
	"tags": [],
	"description": "",
	"content": " Templates "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/creation/displaying-content-in-front-office/",
	"title": "Displaying content on the front office",
	"tags": [],
	"description": "",
	"content": " Displaying content on the front office As it is, the module does not do much. In order to display something on the front office, we have to add support for a few hooks. This is done by implementing the hooks\u0026rsquo; methods, and that was actually done in the install() method we wrote earlier, using the registerHook() method:\npublic function install() { if (Shop::isFeatureActive()) { Shop::setContext(Shop::CONTEXT_ALL); } return parent::install() \u0026amp;\u0026amp; $this-\u0026gt;registerHook('leftColumn') \u0026amp;\u0026amp; $this-\u0026gt;registerHook('header') \u0026amp;\u0026amp; Configuration::updateValue('MYMODULE_NAME', 'my friend'); }  As you can see, we make it so that the module is hooked to the \u0026ldquo;leftColumn\u0026rdquo; and \u0026ldquo;header\u0026rdquo; hooks. In addition to this, we will add code for the \u0026ldquo;rightColumn\u0026rdquo; hook.\nAttaching code to a hook requires a specific method for each:\n hookDisplayLeftColumn(): will hook code into the left column – in our case, it will fetch the MYMODULE_NAME module setting and display the module\u0026rsquo;s template file, mymodule.tpl, which must be located in the /views/templates/hook/ folder. hookDisplayRightColumn(): will simply do the same as hookDisplayLeftColumn(), but for the right column. hookDisplayHeader(): will add a link to the module\u0026rsquo;s CSS file, /css/mymodule.css.  public function hookDisplayLeftColumn($params) { $this-\u0026gt;context-\u0026gt;smarty-\u0026gt;assign([ 'my_module_name' =\u0026gt; Configuration::get('MYMODULE_NAME'), 'my_module_link' =\u0026gt; $this-\u0026gt;context-\u0026gt;link-\u0026gt;getModuleLink('mymodule', 'display') ]); return $this-\u0026gt;display(__FILE__, 'mymodule.tpl'); } public function hookDisplayRightColumn($params) { return $this-\u0026gt;hookDisplayLeftColumn($params); } public function hookDisplayHeader() { $this-\u0026gt;context-\u0026gt;controller-\u0026gt;addCSS($this-\u0026gt;_path.'css/mymodule.css', 'all'); }  We are using the Context ($this-\u0026gt;context) to change a Smarty variable: Smarty\u0026rsquo;s assign() method makes it possible for us to set the template\u0026rsquo;s name variable with the value of the MYMODULE_NAME setting stored in the configuration database table.\nThe header hook is not part of the visual header, but enables us to put code in the \u0026lt;head\u0026gt; tag of the generated HTML file. This is very useful for JavaScript or CSS files. To add a link to our CSS file in the page\u0026rsquo;s \u0026lt;head\u0026gt; tag, we use the addCSS() method, which generates the correct \u0026lt;link\u0026gt; tag to the CSS file indicated in parameters.\nSave your file, and already you can hook your module\u0026rsquo;s template into the theme, move it around and transplant it (even though there is not template file for the moment): go to the \u0026ldquo;Positions\u0026rdquo; page from the \u0026ldquo;Modules\u0026rdquo; menu in the back office, then click on the \u0026ldquo;Transplant a module\u0026rdquo; button (top right of the page).\nIn the transplantation form:\n Find \u0026ldquo;My module\u0026rdquo; in the \u0026ldquo;Module\u0026rdquo; drop-down list. Choose \u0026ldquo;(displayLeftColumn) Left column blocks\u0026rdquo; in the \u0026ldquo;Hook into\u0026rdquo; drop-down list. Click \u0026ldquo;Save\u0026rdquo;.  It is useless to try to attach a module to a hook for which it has no implemented method.\nThe \u0026ldquo;Positions\u0026rdquo; page should reload, with the following message: \u0026ldquo;Module transplanted successfully to hook\u0026rdquo; (or maybe \u0026ldquo;This module has already been transplanted to this hook. \u0026ldquo;). Congratulations! Scroll down the \u0026ldquo;Positions\u0026rdquo; page, and you should indeed see your module among the other modules in the \u0026ldquo;Left column blocks\u0026rdquo; list. Move it to the top of the list by drag\u0026rsquo;n\u0026rsquo;dropping the module\u0026rsquo;s row.\nThe module is now attached to the left column\u0026hellip; but without any template to display, it falls short of doing anything useful: if you reload the homepage, the left column simply displays a message where the module should be, saying \u0026ldquo;No template found for module mymodule\u0026rdquo;.\nDisplaying content Now that we have access to the left column, we should display something there for the customer to see.\nThe visible part of the module is defined in .tpl files placed in specific View folders:\n /views/templates/front/: front office features. /views/templates/admin/: back office features. /views/templates/hook/: features hooked to a PrestaShop (so can be displayed either on the front office or the back office).  Template files can have just about any name. It there is only one such file, it is good practice to give it the same name as the folder and main file: mymodule.tpl.\nIn the case of this tutorial, the module will be hooked to the left column. Therefore, the TPL files that are called from the column\u0026rsquo;s hook should be placed in /views/templates/hook/ in order to work properly.\nAs said earlier, the content to be displayed in the theme should be stored in .tpl template files placed in a specific folder: /views/templates/front/. Template files can have just about any name. It there is only one such file, it is good practice to give it the same name as the folder and main file: mymodule.tpl.\nWe will create the mymodule.tpl file, which was passed as a parameter of the display() method in our module\u0026rsquo;s code, in the hookDisplayHome() method. When calling a template from within a hook, PrestaShop looks for that template file in the /views/templates/hook/ folder (in the module\u0026rsquo;s folder), which you must create yourself.\nIn PrestaShop 1.4, the module\u0026rsquo;s template files were to be placed at the root of the module\u0026rsquo;s folder.\nFor compatibility reasons, template files can still reside in the root folder in PrestaShop 1.5 and 1.6, although the sub-folders of /views/templates/ are now the recommended locations. If you intend your module to also work in PrestaShop 1.4, you should keep your files at the root.\nHere is our template file, located at /views/templates/hook/mymodule.tpl:\n\u0026lt;!-- Block mymodule --\u0026gt; \u0026lt;div id=\u0026quot;mymodule_block_home\u0026quot; class=\u0026quot;block\u0026quot;\u0026gt; \u0026lt;h4\u0026gt;Welcome!\u0026lt;/h4\u0026gt; \u0026lt;div class=\u0026quot;block_content\u0026quot;\u0026gt; \u0026lt;p\u0026gt;Hello, {if isset($my_module_name) \u0026amp;\u0026amp; $my_module_name} {$my_module_name} {else} World {/if} ! \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{$my_module_link}\u0026quot; title=\u0026quot;Click this link\u0026quot;\u0026gt;Click me!\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- /Block mymodule --\u0026gt;  This is just regular HTML code\u0026hellip; except for a few Smarty calls:\n The {l s='xxx' mod='yyy'} call is PrestaShop-specific method that enables you to register the string in the module\u0026rsquo;s translation panel. The s parameter is the string, while the mod parameter must contain the module\u0026rsquo;s identifier (in the present case, \u0026ldquo;mymodule\u0026rdquo;). We only use this method once here for readability reasons, but in practice it should be used on all of the template\u0026rsquo;s strings. The {if}, {else} and {/if} statements are Smarty conditionals. In our example, we check that the $my_module_name Smarty variable exists (using PHP\u0026rsquo;s isset() function, which considered as trusted by Smarty) and that it is not empty. If it goes well, we display the content of that variable; if not, we display \u0026ldquo;World\u0026rdquo;, in order to have \u0026ldquo;Hello World\u0026rdquo;. The {$my_module_link} variable in the link\u0026rsquo;s href attribute: this is a Smarty variable that we will create later on, which will point to PrestaShop\u0026rsquo;s root directory.  In addition to that, we are going to create a CSS file, and save it as /css/mymodule.css in the module\u0026rsquo;s folder (or any sub-folder you like to keep you CSS in):\ndiv#mymodule_block_home p { font-size: 150%; font-style:italic; }  Save the template file in the module\u0026rsquo;s /views/templates/hook/ folder and the CSS file in the module\u0026rsquo;s /css/ folder, reload your shop\u0026rsquo;s homepage: the content of the template should appear on top of the left column, right below the shop\u0026rsquo;s logo (if you have indeed moved it at the top of the \u0026ldquo;Left Column\u0026rdquo; hook during the transplanting part).\nAs you can see, the theme applies its own CSS to the template we added:\n Our \u0026lt;h4\u0026gt; title becomes the block\u0026rsquo;s header, styled the same way as the other block titles. Our \u0026lt;div class=\u0026quot;block_content\u0026quot;\u0026gt; block has the same style as the other blocks on the page.  It is not pretty, but it works the way we want it to.\nDisabling the cache If you\u0026rsquo;ve followed this tutorial to the letter and still do not see anything appearing in the theme\u0026rsquo;s left column, it might be because PrestaShop has cached the previous templates, and is still serving these to you. Hence, you see the original version of the theme, without your changes.\nSmarty caches a compiled version of the homepage, for performance reasons. This is immensely helpful for production sites, but is useless for tests sites, where you may load the front-page very regularly in order to see the impact of your changes.\nWhen editing or debugging a theme on a test site, you should always disable the cache, in order to force Smarty to recompile templates on every page load. To that end, go to the \u0026ldquo;Advanced Parameters\u0026rdquo; menu, select the \u0026ldquo;Performance\u0026rdquo; page, then, in the \u0026ldquo;Smarty\u0026rdquo; section:\n Template cache. Choose \u0026ldquo;Disable the cache\u0026rdquo;. Cache. Disable it. Debug console. You can also open the console if you want to learn more about Smarty\u0026rsquo;s internals.  Do NOT disable the cache or enable the debug console on a production site, as it severely slows everything down! You should always perform all your tests in a test site, ideally on your own computer rather than online.\nEmbedding a template in the theme The link that the module displays does not lead anywhere for now. Let\u0026rsquo;s create the display.php file that it targets, with a minimal content, and put it in: modules/yourmodule/controllers/front/.\n Welcome to this page!  Click the \u0026ldquo;Click me!\u0026rdquo; link: the resulting page is just that raw text, without anything from the theme. We would like to have this text embedded in the theme, so let\u0026rsquo;s see how to do just that.\nAs you would expect, we have to create a template file in order to use the theme\u0026rsquo;s style. Let\u0026rsquo;s create the display.tpl file, which will contain the basic \u0026ldquo;Welcome to my shop!\u0026rdquo; line, and will be called by display.php. That display.php file will be rewritten into a front-end controller in order to properly embed our basic template within the theme\u0026rsquo;s header, footer, columns, etc.\nNOTE: You should strive to use explicit and recognizable names for your template files, so that you can find them quickly in the back office – which is a must when using the translation tool.\nHere are our two files:\n display.php  class mymoduledisplayModuleFrontController extends ModuleFrontController { public function initContent() { parent::initContent(); $this-\u0026gt;setTemplate('module:mymodule/views/templates/front/display.tpl'); } }   display.tpl  Welcome to my shop!  Let\u0026rsquo;s explore display.php, our first PrestaShop front-end controller, stored in the /controllers/front folder of the module\u0026rsquo;s main folder.\nA front-end controller must be a class that extends the ModuleFrontController class. That controller must have one method: initContent(), which calls the parent class\u0026rsquo; initContent() method\u0026hellip; \u0026hellip;which then calls the setTemplate() method with our display.tpl file.\nsetTemplate() is the method that will take care of embedding our one-line template into a full-blown page, with proper header, footer and sidebars.\nUntil PrestaShop 1.4, developers who wanted to embed a template file into the site\u0026rsquo;s theme had to use PHP\u0026rsquo;s include() calls to include each portion of the page. Here is the equivalent code for display.php:\n// This file must be placed at the root of the module's folder. global $smarty; include('../../config/config.inc.php'); include('../../header.php'); $smarty-\u0026gt;display(dirname(__FILE__).'/display.tpl'); include('../../footer.php');  As you can see, this is not necessary anymore since PrestaShop 1.5: you can and should use a front-end controller, and both the controller (Controller) and its template (View) should share the same name: display.php is tied to display.tpl.\nSave both files in their respective folders, and reload your shop\u0026rsquo;s homepage, then click on the \u0026ldquo;Click me!\u0026rdquo;, and voilà ! You have your link. With just a few lines, the end result is already much better, with the \u0026ldquo;Welcome\u0026rdquo; line neatly placed between header, footer and columns!\nIt is only a first step, but this gives you an idea of what is possible if you follow the templating rules. Using Smarty\nSmarty is a PHP template engine, and is used by PrestaShop\u0026rsquo;s theming system. It is a free and open-source projet, hosted at http://www.smarty.net/.\nIt parses template .tpl files, looking for dynamic elements to replace with their contextual equivalents, then send the generated result to the browser. Those dynamic elements are indicated with curly brackets: { ... }. Programmers can create new variables and use them in TPL files; PrestaShop adds its own set of variables.\nFor instance, we can create the \\$my_module_message variable in PHP right in the hookDisplayLeftColumn() method, and have it displayed by our template file:\n mymodule.php  public function hookDisplayLeftColumn($params) { $this-\u0026gt;context-\u0026gt;smarty-\u0026gt;assign( [ 'my_module_name' =\u0026gt; Configuration::get('MYMODULE_NAME'), 'my_module_link' =\u0026gt; $this-\u0026gt;context-\u0026gt;link-\u0026gt;getModuleLink('mymodule', 'display'), 'my_module_message' =\u0026gt; $this-\u0026gt;l('This is a simple text message') // Do not forget to enclose your strings in the l() translation method ] ]; return $this-\u0026gt;display(__FILE__, 'mymodule.tpl'); }  From there on, we can ask Smarty to display the content of this variable in our TPL file.\n mymodule.tpl  {$my_module_message}  PrestaShop adds its own set of variables. For instance, {$hook_left_column} will be replaced with the content for the left column, meaning the content from all the modules that have been attached to the left column\u0026rsquo;s hook.\nAll Smarty variables are global. You should therefore pay attention not to name your own variable with the name of an existing Smarty variable, in order to avoid overwriting it. It is good practice to avoid overly simple names, such as {products}, and to prefix it with your module\u0026rsquo;s name, or even your own name or initials, such as: {$henryb_mymodule_products}.\nHere is a list of Smarty variables that are common to all pages:\n   File / folder Description     img_ps_dir URL for PrestaShop\u0026rsquo;s image folder.   img_cat_dir URL for the categories images folder.   img_lang_dir URL for the languages images folder.   img_prod_dir URL for the products images folder.   img_manu_dir URL for the manufacturers images folder.   img_sup_dir URL for the suppliers images folder.   img_ship_dir URL for the carriers (shipping) images folder.   img_dir URL for the theme\u0026rsquo;s images folder.   css_dir URL for the theme\u0026rsquo;s CSS folder.   js_dir URL for the theme\u0026rsquo;s JavaScript folder.   tpl_dir URL for the current theme\u0026rsquo;s folder.   modules_dir URL the modules folder.   mail_dir URL for the mail templates folder.   pic_dir URL for the pictures upload folder.   lang_iso ISO code for the current language.   come_from URL for the visitor\u0026rsquo;s origin.   shop_name Shop name.   cart_qties Number of products in the cart.   cart The cart.   currencies The various available currencies.   id_currency_cooki ID of the current currency.   currency Currency object (currently used currency).   cookie User cookie.   languages The various available languages.   logged Indicates whether the visitor is logged to a customer account.   page_name Page name.   customerName Client name (if logged in).   priceDisplay Price display method (with or without taxes\u0026hellip;).   roundMode Rounding method in use.   use_taxes Indicates whether taxes are enabled or not.    There are many other contextual hooks. If you need to display all of the current page\u0026rsquo;s Smarty variables, add the following call:\n{debug}  Comments are based on asterisk:\n{* This string is commented out *} {* This string is too! *}  Unlike with HTML comments, commented-out Smarty code is not present in the final output file.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/modify-grid-in-module/",
	"title": "How to modify an existing Grid in a module?",
	"tags": [],
	"description": "",
	"content": "  How to modify an existing Grid in a module? If you need to modify an existing Grid, like inverting two columns for instance, this is really easy to do it in a module thanks to the available hooks.\nBusiness use case In this tutorial, we will try to improve the user experience of the Customers listing Grid (this page will be available in 1.7.6).\nThinking about it, we could improve the current grid to highlight business-driven information:\n we could remove the \u0026ldquo;Social title\u0026rdquo;, not really interesting if our business is not \u0026ldquo;gender\u0026rdquo; specific, we could remove the \u0026ldquo;Partner offers\u0026rdquo; column, as it doesn\u0026rsquo;t bring any useful information, and also remove the \u0026ldquo;Active\u0026rdquo; column, for the same reason;  We could also add a new column about the number of orders per customer and re-organize a little bit all the columns.\nLet\u0026rsquo;s see together how to do that with PrestaShop.\nRemoving columns and filters from a Grid Thanks to the available hooks, it\u0026rsquo;s super easy to remove columns from a grid!\nAs stated in the documentation, for each grid with the id {id} a list of hooks is available to alter the grid.\nFirst, we will use the hook able to alter the Definition of the grid: the Definition is a specific object where we define:\n the columns, the filters, the grid actions, and the grid bulk actions;  We need to register a hook into a module (let\u0026rsquo;s name it customers for the sake of the example).\nThe Customers Grid id is \u0026ldquo;customer\u0026rdquo;, you can find this information in the the associated class: CustomerGridDefinitionFactory.\n/** * Hooks allows to modify Customer grid definition. * This hook is a right place to add/remove columns or actions (bulk, grid). * * @param array $params */ public function hookActionCustomerGridDefinitionModifier(array $params) { /** @var GridDefinitionInterface $definition */ $definition = $params['definition']; /** @var ColumnCollection */ $columns = $definition-\u0026gt;getColumns(); }  Once we have registered the hook, we can alter the columns:\n remove the existing ones, add new ones, and position them precisely;  /** @var ColumnCollection */ $columns = $definition-\u0026gt;getColumns(); $columns-\u0026gt;remove('social_title') -\u0026gt;remove('active') -\u0026gt;remove('optin') ;  Afer the activation of the module, the grid should looks like this:\nIt\u0026rsquo;s not really nice\u0026hellip; because we also need to delete the related search filters!\nLet\u0026rsquo;s do that:\n/** @var FilterCollection $filters */ $filters = $definition-\u0026gt;getFilters(); $filters-\u0026gt;remove('social_title') -\u0026gt;remove('active') -\u0026gt;remove('optin') ;  And this time, our grid is awesome!\nRe-ordering grid columns and filters When adding a new column, it\u0026rsquo;s super easy to position it in a grid.\nThe ColumnCollection class have two functions for that:\n addAfter($columnId, ColumnInterface $column) addBefore($columnId, ColumnInterface $column)  If you need to insert a new column \u0026ldquo;$newColumn\u0026rdquo; after a specific column with the id \u0026ldquo;name\u0026rdquo;, this is how you can do that:\n$newColumn = new DataColumn('exemple') ... $columns-\u0026gt;addAfter('name', $newColumn);  The operation is more difficult with an existing column. We need to remove and add it again to the right position:\n$columns-\u0026gt;remove('the_column_we_need_to_move'); $columnWeNeedToMove = new ... // we create the column $columns-\u0026gt;addBefore('sales', $columnWeNeedToMove);  Re-ordering filters? There is a good news here: filters are linked to the columns thanks to the function setAssociatedColumn of the FilterInterface contract.\nThis means that you don\u0026rsquo;t need to re-order filters when you re-order columns: great!\nIf you don\u0026rsquo;t define a new filter when creating a new column, you won\u0026rsquo;t be able to search using this column as a filter.\nBut\u0026hellip; what if you want to make this column searchable as most of the existing ones?\nAlso, you may wondering at this moment how PrestaShop is able to fill the column data?\nFill the column data and configure the filter Each grid is defined by a Definition and a Grid Query Builder.\nThe Grid Query Builder have the responsibility of providing two query builders: the Search query builder and the Count query builder.\nWith these query builders, the Grid Query Builder is able to retrieve and filter data from the database to fill the columns of the Grid using the filters criterion.\nThanks to the Count query builder, the pagination system works out of the box so you don\u0026rsquo;t need to implement your own.\nUsing a hook, we can alter both of them to - for exemple - retrieve new information and fill a new column.\nQueryBuilder configuration We want to retrieve the number of orders for each customer.\nTo alter the QueryBuilder, we have a hook named action{GridId}GridQueryBuilderModifier. This is how you can fill the column data to retrieve the number of orders from a customers:\npublic function hookActionCustomerGridQueryBuilderModifier(array $params) { $searchQueryBuilder = $params['search_query_builder']; $searchQueryBuilder-\u0026gt;addSelect('COUNT(o.id_order) as nb_orders') -\u0026gt;from(_DB_PREFIX_.'orders o') ; $countQueryBuilder = $params['count_query_builder']; // So the pagination and the number of customers // retrieved will be right. $countQueryBuilder-\u0026gt;addSelect('COUNT(o.id_order) as nb_orders') -\u0026gt;from(_DB_PREFIX_.'orders o') ; }   The result column name (here nb_orders) must be the same of the field option of the related column: this is how the mapping of data works.\n Once the new hook is registered and the module activated, you should see the \u0026ldquo;Customers\u0026rdquo; grid customized according to the use cases we have listed in the introduction: great!\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Fundamentals of PrestaShop Development PrestaShop was conceived so that third-party modules could easily build upon its foundations, making it an extremely customizable e-commerce software.\nPrestaShop’s customization is based on three possibilities:\n Themes, Modules, Overriding.  Themes are explored in full in the Designer Guide.\nModules and the override system are explored in this Developer Guide, starting with the “Concepts” section below. You can learn more about each in the following chapters:\nBy default, PrestaShop is provided with more than 100 modules, enabling you to launch your online business quickly and for free.\nMore than 3000 modules are also available on the Addons marketplace. These additional modules were built by the PrestaShop company or members of the PrestaShop community, and are sold at affordable prices. As a developer, you can also share your modules on this site, and receive 70% of the amounts associated with the sale of your creations. Sign up now!\n Concepts You should be familiar with PHP and Object-Oriented Programming before attempting to write your own module.\nYou can learn PHP here:\n http://www.php.net/manual/en/getting-started.php http://www.codecademy.com/tracks/php  You can learn Object-Oriented programming here:\n http://en.wikipedia.org/wiki/Object-oriented_programming http://net.tutsplus.com/tutorials/php/object-oriented-php-for-beginners/  A module is an extension to PrestaShop that enables any developer to add the following:\n Provide additional functionality to PrestaShop. View additional items on the site (product selection, etc.). Communicate with other e-commerce services (buying guides, payment platforms, logistics, etc.).  Overriding is a system in itself. PrestaShop uses completely object-oriented code. One of the advantages of this is that, with the right code architecture, you can easily replace or extend parts of the core code with your own custom code, without having to touch the core code. Your code thus overrides the core code, making PrestaShop behave as you prefer it to. It is not recommended to use an override in a module that you intend to distribute (for instance through the PrestaShop Addons marketplace), and they are forbidden in partner modules. Keep them for your own shop.\nPrestaShop’s technical architecture PrestaShop is based on a 3-tier architecture:\n Object/data. Database access is controlled through files in the “classes” folder. Data control. User-provided content is controlled by files in the root folder. Design. All of the theme’s files are in the “themes” folder.  This is the same principle as the Model\u0026gt;View\u0026gt;Controller (MVC) architecture, only in a simpler and more accessible way.\nWhile all versions of PrestaShop up to 1.6 took pride in only using a custom architecture, it was decided to incorporate the Symfony PHP framework starting with PrestaShop 1.7.\nThe driving idea is that we want our code to be more robust, more modular, and fully testable. The 1.6 architecture, inherited from version 1.5 and years of PrestaShop development, is not getting any younger, and its age is really starting to show.\nUsing a proven and popular open-source framework will allow us to focus on our core business code (managing a cart, handling orders, calculating prices and taxes, generating invoices, etc.) with greater efficiency, while enjoying the stability of a globally recognized framework.\nA 3-tier architecture has many advantages:\n It’s easier to read the software’s code. Developers can add and edit code faster. Graphic designer and HTML integrators can work with the confines of the /themes folder without having to understand or even read a single line of PHP code. Developers can work on additional data and modules that the HTML integrators can make use of.  Model A model represents the application’s behavior: data processing, database interaction, etc.\nIt describes or contains the data that have been processed by the application. It manages this data and guarantees its integrity.\nView A view is the interface with which the user interacts.\nIts first role is to display the data that is been provided by the model. Its second role is to handle all the actions from the user (mouse click, element selection, buttons, etc.), and send these events to the controller.\nThe view does not do any processing; it only displays the result of the processing performed by the model, and interacts with the user.\nController The Controller manages synchronization events between the Model and the View, and updates both as needed. It receives all the user events and triggers the actions to perform.\nIf an action needs data to be changed, the Controller will “ask” the Model to change the data, and in turn the Model will notify the View that the data has been changed, so that the View can update itself.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/overrides/",
	"title": "Overrides",
	"tags": [],
	"description": "",
	"content": " Overrides Overriding is a way to \u0026ldquo;override\u0026rdquo; class files and controller files. PrestaShop\u0026rsquo;s ingenious class auto-loading function makes the \u0026ldquo;switch\u0026rdquo; to other files fairly simple. Thanks to PrestaShop\u0026rsquo;s fully object-oriented code, you can rely on object inheritance to modify and add new behaviors, using the properties and methods of the various existing classes.\nImportant note There are limitations and risks of using overrides. Keep them for your own shop.\n Overrides in PrestaShop are exclusive. This means that if your module overrides one of PrestaShop’s behaviors, another module will not be able to use that behavior properly, or override it in an predictable way.\nTherefore, overrides should only be used for your own local modules, when you have a specific need that cannot be applied with it.\nIt is not recommended to use an override in a module that you intend to distribute (for instance through the PrestaShop Addons marketplace), and they are forbidden in partner modules.\nAlternatives to overrides Before creating an override, check the existing features can help you:\nHooks There are many events triggered on each controller of PrestaShop. They can be used for displaying additional content or executing module actions.\nSee the hooks chapter for more details.\nClasses If a class does not make what a module expects, you can extend it in a module for improvement.\nFor instance you could have a single Tools class for core and module helper methods:\nclass MyModuleTools extends Tools { /** * Adding a new method for the example */ public static function array_pluck(array $data, 'property') { // [...] } }  Once included in another file, all these following method would be callable:\nMyModuleTools::array_pluck($data, 'id'); MyModuleTools::getValue('userId'); // Defined in Tools MyModuleTools::getShopDomain(); // Defined in Tools  Controllers Core controllers can be reused in a module as well, without being erased, thanks to inheritance.\nThis allows a controller to be maintained easily, with its own identity but with the parent features.\nSee the controllers chapter for more details.\nContributing Sometimes, the existing features may not be enough for your needs. An event can be missing, or a controller method should be probably better in a dedicated class to be accessible.\nIf you think some changes in the core would be useful for the community, we encourage you to suggest them on the PrestaShop source code with a pull-request.\nBy doing so, you may cover long-term needs the core developers probably don\u0026rsquo;t know about.\nClass \u0026amp; controller override If you don\u0026rsquo;t have any other choice, classes and controllers are usually built following a certain norm.\nHere is the core Product class and controller:\n /classes/Product.php. The class is called ProductCore. /controllers/front/ProductController.php. The controller class is called ProductControllerCore.  You will need to create a PHP file and place it either of the override folders of a module. Indeed, since PrestaShop 1.5, these files can be stored within a module and their management will follow it.\nOverriding a class does not mean to copy paste the whole file content. As long as you extend the core equivalent class, you are free to override only one method or as many as you need.\nOverriding a class In order to override the Product class, your file needs to be called Product.php and must feature a Product class that then extends ProductCore class.\nThe file should be placed in this module location:\n/modules/\u0026lt;module_name\u0026gt;/override/classes/Product.php.\nIt will be copied in /override/classes/Product.php during the module installation, and removed automatically on uninstall.\nOverriding a controller In order to override the ProductController class, your file needs to be called ProductController.php and must feature a ProductController class that then extends ProductControllerCore class.\nThe file should be placed in this module location:\n/modules/\u0026lt;module_name\u0026gt;/override/controllers/front/ProductController.php.\nIt will be copied in /override/controllers/front/ProductController.php during the module installation, and removed automatically on uninstall.\nExample Let\u0026rsquo;s consider the file /modules/\u0026lt;module_name\u0026gt;/override/classes/controllers/FrontController.php, overriding only one method of the core file.\n/* * With this override, you have a new Smarty variable called \u0026quot;currentController\u0026quot; available in header.tpl * This allows you to use a different header if you are on a product page, category page or home. */ class FrontController extends FrontControllerCore { public function initHeader() { self::$smarty-\u0026gt;assign('currentController', get_class($this)); return parent::initHeader(); } }  Theme template override Overriding a theme from a module is NOT possible, and never will. If you need this, you have to look instead at the parent/child theme feature.\nHowever, a module template or asset can be overriden by a theme, but this is not covered by this chapter specific to modules development.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/",
	"title": "Themes",
	"tags": [],
	"description": "",
	"content": " Chapter 5 Themes The default PrestaShop install offers a neutral theme in black and white, enabling sellers to quickly and freely start their activity, whatever their business line.\nMore than 3000 themes are available at the PrestaShop Addons marketplace. They were created either by members of the PrestaShop community or the PrestaTeam, and are sold at reasonable prices – some are even free.\nAs a graphic designer/web developer, you too can put your themes up for sale on the PrestaShop Addons marketplace, and earn 70% of the selling price.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/documentation/",
	"title": "Documentation",
	"tags": [],
	"description": "",
	"content": " Chapter 6 Documentation Documentation is key to the success of any project, even more so for a community project.\nIn this section, you\u0026rsquo;ll learn why it\u0026rsquo;s important and how you can contribute to making PrestaShop documentation better.\n Why write documentation   Contribute   Shortcodes   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/creation/enabling-auto-update/",
	"title": "Enabling the Auto-Update",
	"tags": [],
	"description": "",
	"content": " Enabling the Auto-Update Since PrestaShop 1.5, it is possible to have your module auto-update: once a new version is available, PrestaShop suggests an \u0026ldquo;Update\u0026rdquo; button to the user. Clicking this button will trigger a series of methods, each leading closer to the latest version of your module.\nIn order to bring auto-update support to your module, you need three main things:\n Clearly indicate the module\u0026rsquo;s version number in its constructor method: $this-\u0026gt;version = '1.1'; Create an /upgrade sub-folder in the module\u0026rsquo;s folder. Add an auto-update PHP script for each new version.\n  Each script should contain a main method named upgrade_module_x_y_z, where x_y_z corresponds to the version the module is being upgraded to. It receives a single parameter, an instance of your Module.\nScript name You can name your script however you like, as long as it ends up with a dash (-) followed by the version number.\nAlthough we suggest using upgrade-x.y.z.php, the following formats are also correct:\n Upgrade-1.2.php Install-4.5.6.php Upgrade-MyModule-7.8.9.php   For example:\n/** * File: /upgrade/upgrade-1.1.php */ function upgrade_module_1_1($module) { // Process Module upgrade to 1.1 // .... return true; // Return true if success. }  \u0026hellip;and then:\n/** * File: /upgrade/upgrade-1.2.php */ function upgrade_module_1_2($module) { // Process Module upgrade to 1.2 // .... return true; // Return true if succes. }  Each method should bring the necessary changes to the module\u0026rsquo;s files and database data in order to reach the latest version.\nWhen upgrading a module, PrestaShop will crawl the module\u0026rsquo;s upgrade folder, and execute each upgrade script sequentially, starting from the first one whose version number is greater than the currently installed one. It is therefore highly advised to number your module\u0026rsquo;s versions sequentially, following the Semantic Versioning Specification.\nExample using the scripts above:\n   When upgrading from\u0026hellip; Target version Executed scripts     1.0.0 1.1.0 - upgrade-1.1.php   1.0.0 1.2.0 - upgrade-1.1.php\n- upgrade-1.2.php   1.1.0 1.2.0 - upgrade-1.2.php    Script examples Here is the /upgrade/upgrade-1.4.9.php file from the gamification module:\nif (!defined('_PS_VERSION_')) { exit; } function upgrade_module_1_4_9($object) { return Db::getInstance()-\u0026gt;execute( 'CREATE TABLE IF NOT EXISTS `'._DB_PREFIX_.'tab_advice` ( `id_tab` int(11) NOT NULL, `id_advice` int(11) NOT NULL, PRIMARY KEY (`id_tab`, `id_advice`) ) ENGINE='._MYSQL_ENGINE_.' DEFAULT CHARSET=utf8;' ); }  The homeslider module\u0026rsquo;s install-1.2.1.php file does even more:\nif (!defined('_PS_VERSION_')) { exit; } function upgrade_module_1_2_1($object) { return Db::getInstance()-\u0026gt;execute( 'UPDATE '._DB_PREFIX_.'homeslider_slides_lang SET '.homeslider_stripslashes_field('title').', '.homeslider_stripslashes_field('description').', '.homeslider_stripslashes_field('legend').', '.homeslider_stripslashes_field('url') ); } function homeslider_stripslashes_field($field) { $quotes = array('\u0026quot;\\\\\\'\u0026quot;', '\u0026quot;\\'\u0026quot;'); $dquotes = array('\\'\\\\\\\\\u0026quot;\\'', '\\'\u0026quot;\\''); $backslashes = array('\u0026quot;\\\\\\\\\\\\\\\\\u0026quot;', '\u0026quot;\\\\\\\\\u0026quot;'); return '`'.bqSQL($field).'` = replace(replace(replace(`'.bqSQL($field).'`, '.$quotes[0].', '.$quotes[1].'), '.$dquotes[0].', '.$dquotes[1].'), '.$backslashes[0].', '.$backslashes[1].')'; }  Adding/updating modules or hooks between versions If the new version of your module adds or update its hooks, you should make sure to update them too.\nIndeed, since the hooks are (usually) defined when the module is installed, PrestaShop will not install the module again in order to include the new hooks\u0026rsquo; code, so you have to use the upgrade methods:\nFor instance, here\u0026rsquo;s the install-1.2.php file from the blockbestseller module:\nif (!defined('_PS_VERSION_')) { exit; } function upgrade_module_1_2($object) { return ($object-\u0026gt;registerHook('addproduct') \u0026amp;\u0026amp; $object-\u0026gt;registerHook('updateproduct') \u0026amp;\u0026amp; object-\u0026gt;registerHook('deleteproduct') \u0026amp;\u0026amp; $object-\u0026gt;registerHook('actionOrderStatusPostUpdate')); }  How to test-run an upgrade Here\u0026rsquo;s how to test that your upgrade scripts work correctly.\nLet\u0026rsquo;s assume that you are working on a module that you already have it installed in your development shop, and you\u0026rsquo;re on version 1.0.0. On the upcoming version 1.1.0 that you are currently developing, you need to update your database schema.\nSince the version that you are planning to update to is 1.1.0, the first thing would be to create an upgrade script for that version:\n// File: /upgrade/upgrade-1.1.0 if (!defined('_PS_VERSION_')) { exit; } function upgrade_module_1_1_0($module) { // do your thing here return true; }  Now, update your module version to 1.1.0:\nclass my_module extends Module { public function __construct() { $this-\u0026gt;name = 'my_module'; $this-\u0026gt;version = '1.1.0'; // \u0026lt;--- previously 1.0.0 } }  Then, in your PrestaShop backoffice, go to Modules \u0026gt; Module Manager and find your module. Since you have updated its version, PrestaShop will notice that there\u0026rsquo;s an update available for it and prompt you to upgrade it. Press the \u0026ldquo;Upgrade\u0026rdquo; button, and PrestaShop will invoke your upgrade script.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/customize-templates/",
	"title": "How to customize the Grid templates?",
	"tags": [],
	"description": "",
	"content": " The Grid component is highly extensible from a structural and data point of view, but sometimes you need to customize how a grid, a row or a specific column is rendered.\nFor instance, let\u0026rsquo;s take a look at the Logs page of the PrestaShop Back Office. You can see that the \u0026ldquo;Employee\u0026rdquo; column have a specific rendering:\n  Logs grid of PrestaShop with specific employee Column   In this tutorial, we will learn how to customize the rendering of every part of a Grid:\n Templating architecture in Twig Column \u0026amp; Column headers customization Row customization  Templating architecture in Twig The templating of the component Grid is using Twig in PrestaShop 1.7. As the component enforces a strict separation between the data and the rendering you never define template names or UI elements when defining a new Grid.\nWe have created a Twig layer that is able to render Grid using the information from Grid that is formatted in Grid presenter.\n This means that, by implementing your own presenter you can control the data sent to the user.\n How it works under the hood? Each element of the Grid have its own Twig template:\nGrid ├── Actions │ ├── Bulk │ ├── Grid │ └── Row ├── Blocks │ ├── bulk_actions.html.twig │ ├── bulk_actions_select_all.html.twig │ ├── EmptyState │ ├── grid_actions.html.twig │ ├── pagination.html.twig │ ├── Table │ └── table.html.twig ├── Columns │ ├── Content │ └── Header ├── grid.html.twig └── grid_panel.html.twig  Let\u0026rsquo;s detail every part of this architecture:\nGrid Actions templating Grid actions templates are responsible of the rendering of all the Grid actions:\n The Bulk actions; The Grid actions; The Row actions;  Structure of grid blocks in PrestaShop 1.7.6 version:\nActions ├── Bulk │ ├── delete_categories.html.twig │ ├── delete_customers.html.twig │ └── submit.html.twig ├── Grid │ ├── link.html.twig │ ├── simple.html.twig │ └── submit.html.twig └── Row ├── delete_category.html.twig ├── delete_customer.html.twig ├── link.html.twig └── submit.html.twig  As you can see, every action defined at any Grid Level (Bulk, Grid or Row) will be rendered using its own template.\nLike we are already able to do with the main Back Office templates, in modules you can define and override existing templates and adapt them to your needs.\nyour-module/ ├── ... ├── your-module.php └── views/PrestaShop/Admin/Common/Grid/Blocks/Table/filters_row.html.twig # Override of the filters row template  The Grid Blocks In this folder, you will retrieve most of the reusable blocks of the Grid component.\nStructure of grid actions in PrestaShop 1.7.6 version:\nBlocks ├── bulk_actions.html.twig ├── bulk_actions_select_all.html.twig ├── EmptyState │ ├── _default.html.twig │ └── supplier.html.twig ├── grid_actions.html.twig ├── pagination.html.twig ├── Table │ ├── empty_row.html.twig │ ├── filters_row.html.twig │ └── headers_row.html.twig └── table.html.twig  The templates have meaningful names so you will spot the reponsibility of most of them:\n The bulk actions templates are responsible of the rendering of the parent container of the bulk action templates; The grid actions templates are responsible of the rendering of the parent container of the grid action templates; All table related templates are responsible of the rendering of the Table structure of the Grid (we could name it \u0026ldquo;Grid\u0026rdquo; too as you\u0026rsquo;re not forced to use an HTML table to render a Grid!); The empty state templates define the rendering of the Grid in case you have no data to render; Finally, the pagination template is responsible of\u0026hellip; guess what? the rendering of the pagination system! Obvious 😎.   Customize these template when you want to alter the rendering of the structure of your Grids.\n The Columns Contents and Headers Most of the time, you want to customize the rendering of the columns. While we can re-order add or delete columns using hooks, the Twig layer allows you to alter the rendering of a column at Shop, Grid or even Column level.\nIt\u0026rsquo;s not a surprise that you will retrieve a template named after the available Column Types provided by the Core of PrestaShop! The Twig layer relies on the information sent by the Grid presenter to select the right Twig template to be rendered and to push the right information.\nThis is the content of this folder:\nColumns ├── Content │ ├── action.html.twig │ ├── badge.html.twig │ ├── bulk_action.html.twig │ ├── category_position.html.twig │ ├── data.html.twig │ ├── date_time.html.twig │ ├── employee_name_with_avatar.html.twig │ ├── image.html.twig │ ├── link.html.twig │ ├── position_handle.html.twig │ ├── position.html.twig │ ├── severity_level.html.twig │ └── toggle.html.twig └── Header └── Content ├── action.html.twig ├── default.html.twig └── position_handle.html.twig  The templates of this folder are splitted into two subfolders:\n Content: contains the template for each type of Column; Header/Content: contains the template for each type of Column Header (in the current context, the column table header);  For each template, you can customize the rendering at different levels. There is a simple rule to guess which template will be rendered: {grid_id}_{column_id}_type_id where grid_id and column_id are not required.\n If you define the template {...}/Columns/Content/data.html.twig in your module, this template will be overriden for the Back Office; If you define the template {...}/Columns/Content/my_grid_data.html.twig in your module, this template will be overriden for the Grid defined with the id my_grid;  And what will happens if you define the following template? my-module/views/PrestaShop/Admin/Common/Grid/Columns/Content/my_grid_name_action.html.twig\nYou\u0026rsquo;re right, the template will be overriden only for the column type \u0026ldquo;data\u0026rdquo; with the id \u0026ldquo;name\u0026rdquo;. So extensible and powerful!\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/commands/",
	"title": "Commands",
	"tags": [],
	"description": "",
	"content": " Commands  Since version 1.7 of PrestaShop, everyone have access to the PrestaShop console using the following instruction in a terminal:\n ./bin/console # or ./app/console for PrestaShop \u0026lt; 1.7.3 \nSince v1.7.5, you can add and provide your own commands into the PrestaShop console using modules.\nLet\u0026rsquo;s see an example of a really common task when we usually use CRON scripts: you want to export your products into an XML file in order to import them into an another platform (a PIM or an ERP).\nYou could rely on the webservices, but they are not really easy to configure. This is how you can do it using a PrestaShop command.\nCreate a command into the module You need to create the file and register it as a \u0026ldquo;command\u0026rdquo;.\nSetup composer You need setup composer in your module before create the command. Create the file your-module/composer.json and paste:\n{ \u0026quot;name\u0026quot;: \u0026quot;\u0026lt;your name\u0026gt;/\u0026lt;nmodule name\u0026gt;\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;\u0026lt;module description\u0026gt;\u0026quot;, \u0026quot;authors\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;\u0026lt;your name\u0026gt;\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;\u0026lt;your email\u0026gt;\u0026quot; } ], \u0026quot;require\u0026quot;: { \u0026quot;php\u0026quot;: \u0026quot;\u0026gt;=5.6.0\u0026quot; }, \u0026quot;autoload\u0026quot;: { \u0026quot;psr-4\u0026quot;: { \u0026quot;\u0026lt;YourModule\u0026gt;\\\\\u0026quot;: \u0026quot;src/\u0026quot; }, \u0026quot;exclude-from-classmap\u0026quot;: [] }, \u0026quot;config\u0026quot;: { \u0026quot;preferred-install\u0026quot;: \u0026quot;dist\u0026quot; }, \u0026quot;type\u0026quot;: \u0026quot;prestashop-module\u0026quot;, \u0026quot;author\u0026quot;: \u0026quot;\u0026lt;???\u0026gt;\u0026quot;, \u0026quot;license\u0026quot;: \u0026quot;\u0026lt;???\u0026gt;\u0026quot; }  In YourModule add your namespace. Then in console in your module root run command composer dump-autoload.\nCreation of the command At this moment, the only requirement is that you PHP file needs to be a class that extends Symfony\\Component\\Console\\Command. Let\u0026rsquo;s create ExportCommand file:\n// your-module/src/Command/ExportCommand.php namespace YourNamespace\\Command; use Symfony\\Component\\Console\\Command\\Command; use Symfony\\Component\\Console\\Input\\InputInterface; use Symfony\\Component\\Console\\Output\\OutputInterface; class ExportCommand extends Command { protected function configure() { // The name of the command (the part after \u0026quot;bin/console\u0026quot;) $this-\u0026gt;setName('your-module:export'); } protected function execute(InputInterface $input, OutputInterface $output) { // Here your business logic. $output-\u0026gt;write('Export done!'); } }  Registration of the command Now, in order to make this really simple command available in the console, we register it in the services.yml file:\n# your-module/config/services.yml services: your_module_export_command: class: YourModule\\Command\\ExportCommand tags: - { name: 'console.command' }  The command should be now available using ./bin/console your-module:export.\nLearn more about the PrestaShop Console We use the Symfony Console with nothing specific to PrestaShop.\nYou can learn everything about this component in their documentation in version 3.4.\nTo sum up, there is a list of useful links:\n Create a new command; Manage the Command arguments; Manage the Command output; How to inject dependencies in a Command; How to test a Command;  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/",
	"title": "Contribute",
	"tags": [],
	"description": "",
	"content": " Chapter 7 Contribute PrestaShop is a community project, made by hundreds of developers collaborating around the world. You can get involved too!\n Contribute using Docker   How to use GitHub to report an issue   Contribution guidelines   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/create-custom-bulk-action/",
	"title": "How to create a custom Bulk Action?",
	"tags": [],
	"description": "",
	"content": " Do you know how to do it? Please feel free to contribute to the docs!\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/creation/module-translation/",
	"title": "Module translation",
	"tags": [],
	"description": "",
	"content": " Module translation The module\u0026rsquo;s text strings are written in English, but you might want French, Spanish or Polish shop owners to use your module too. You therefore have to translate those strings into those languages, both the front office and the back office strings. Ideally, you should translate your module in all the languages that are installed on your shop. This could be a tedious task, but a whole system has been put in place in order to help you out.\nThe process of preparing text strings for translation is called internationalization, or i18n.\nTranslation-ready strings PHP classes Module main class The translation of a string can be obtained with the Module::l(...) method. In consequence, the method is available in the main class of the module.\nclass MyModule extends Module { public function __construct() { // [...] $this-\u0026gt;displayName = $this-\u0026gt;l('My module'); $this-\u0026gt;description = $this-\u0026gt;l('Description of my module.');  Module controllers ModuleAdminController \u0026amp; ModuleFrontControllers can access the module instance via the property module. No instanciation is required.\nclass ChequeValidationModuleFrontController extends ModuleFrontController { public function initContent() { // [...] $this-\u0026gt;title = $this-\u0026gt;module-\u0026gt;l('My module title');  Other classes Other classes may need to get the module instance as a parameter and store it for translations.\nAnother solution is retrieving the module object with Module::getInstanceByName(\u0026lt;Module_name\u0026gt;).\nAdd a parameter to the {l} method to specify the class asking for translation.\nclass CustomModuleClass { public $module; public function foo() { // [...] $this-\u0026gt;module = Module::getInstanceByName(\u0026lt;Module_name\u0026gt;); $this-\u0026gt;text = $this-\u0026gt;module-\u0026gt;l('My text to translate', 'CustomModuleClass');  Templates Strings in TPL files will need to be turned into dynamic content using the {l} function call, which Smarty will replace by the translation for the chosen language.\nThese parameters are also mandatory:\n s storing the string to be translated, mod giving translation context.  For instance, translating the string \u0026ldquo;Welcome to this page!\u0026rdquo; can be done like this:\n{l s='Welcome to this page!' mod='Modules.MyModule'}  In our sample module, the mymodule.tpl file\u0026hellip;\n\u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{$base_dir}modules/mymodule/mymodule_page.php\u0026quot; title=\u0026quot;Click this link\u0026quot;\u0026gt;Click me!\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;!-- Block mymodule --\u0026gt; \u0026lt;div id=\u0026quot;mymodule_block_left\u0026quot; class=\u0026quot;block\u0026quot;\u0026gt; \u0026lt;h4\u0026gt;{l s='Welcome!' mod='Modules.MyModule'}\u0026lt;/h4\u0026gt; \u0026lt;div class=\u0026quot;block_content\u0026quot;\u0026gt; \u0026lt;p\u0026gt;Hello, {if isset($my_module_name) \u0026amp;\u0026amp; $my_module_name} {$my_module_name} {else} World {/if} ! \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{$my_module_link}\u0026quot; title=\u0026quot;Click this link\u0026quot;\u0026gt;Click me!\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- /Block mymodule --\u0026gt;  \u0026hellip;becomes:\n\u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{$base_dir}modules/mymodule/mymodule_page.php\u0026quot; title=\u0026quot;{l s='Click this link' mod='mymodule'}\u0026quot;\u0026gt;{l s='Click me!' mod='mymodule'}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;!-- Block mymodule --\u0026gt; \u0026lt;div id=\u0026quot;mymodule_block_left\u0026quot; class=\u0026quot;block\u0026quot;\u0026gt; \u0026lt;h4\u0026gt;{l s='Welcome!' mod='mymodule'}\u0026lt;/h4\u0026gt; \u0026lt;div class=\u0026quot;block_content\u0026quot;\u0026gt; \u0026lt;p\u0026gt; {if !isset($my_module_name) || !$my_module_name} {capture name='my_module_tempvar'}{l s='World' mod='mymodule'}{/capture} {assign var='my_module_name' value=$smarty.capture.my_module_tempvar} {/if} {l s='Hello %1$s!' sprintf=$my_module_name mod='mymodule'} \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{$my_module_link}\u0026quot; title=\u0026quot;{l s='Click this link' mod='mymodule'}\u0026quot;\u0026gt;{l s='Click me!' mod='mymodule'}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- /Block mymodule --\u0026gt;  Notice that we always use the mod parameter. This is used by PrestaShop to assert which module the string belongs to. The translation tool needs it in order to match the string to translate with its translation. This parameter is mandatory for module translation in templates.\nTranslations management Strings are delimited with single quotes. If a string contains single quotes, they should be escaped using a backslash (\\).\nThis way, strings can be directly translated inside PrestaShop:\n Go to the \u0026ldquo;Translations\u0026rdquo; page under the \u0026ldquo;Localization\u0026rdquo; menu, In the \u0026ldquo;Modify translations\u0026rdquo; drop-down menu, choose \u0026ldquo;Installed modules translations\u0026rdquo;, Choose the language you want to translate the module into. The destination language must already be installed to enable translation in it. Click the \u0026ldquo;Modify\u0026rdquo; button.  The page that loads displays all the strings for all the currently-installed modules. Modules that have all their strings already translated have their fieldset closed, whereas if at least one string is missing in a module\u0026rsquo;s translation, its fieldset is expanded. In order to translate your module\u0026rsquo;s strings (the ones that were \u0026ldquo;marked\u0026rdquo; using the l() method), simply find your module in the list (use the browser\u0026rsquo;s in-page search), and fill the empty fields.\nOnce all strings for your module are correctly translated, click on either the \u0026ldquo;Save and stay\u0026rdquo; button or the \u0026ldquo;Save\u0026rdquo; button at the bottom of your list of strings.\nPrestaShop then saves the translations in a new file, named using the languageCode.php format (for instance, /mymodule/fr.php). The translation file looks like so:\nfr.php\nglobal $_MODULE; $_MODULE = array(); $_MODULE['\u0026lt;{mymodule}prestashop\u0026gt;mymodule_2ddddc2a736e4128ce1cdfd22b041e7f'] = 'Mon module'; $_MODULE['\u0026lt;{mymodule}prestashop\u0026gt;mymodule_d6968577f69f08c93c209bd8b6b3d4d5'] = 'Description du module.'; $_MODULE['\u0026lt;{mymodule}prestashop\u0026gt;mymodule_533937acf0e84c92e787614bbb16a7a0'] = 'Êtes-vous certain de vouloir désinstaller ce module ? Vous perdrez tous vos réglages !'; $_MODULE['\u0026lt;{mymodule}prestashop\u0026gt;mymodule_0f40e8817b005044250943f57a21c5e7'] = 'Aucun nom fourni';  This file must not be edited manually! It can only be edited through the PrestaShop translation tool.\nNow that we have a French translation, we can click on the French flag in the front office, and get the expected result: the module\u0026rsquo;s strings are now in French.\nThey are also translated in French when the back office is in French.\nComplex translations Variables As we can see, the basis of template file translation is to enclose them in the {l s='The string' mod='name_of_the_module'}. The changes in display.tpl and in mymodule.tpl\u0026rsquo;s link and title texts are thus easy to understand. But added a trickier block of code for the \u0026ldquo;Hello World!\u0026rdquo; string: an if/else/then clause, and a text variable. Let\u0026rsquo;s explore this code:\nHere is the original code:\nHello, {if isset($my_module_name) \u0026amp;\u0026amp; $my_module_name} {$my_module_name} {else} World {/if} !  As you can see, we need to get the \u0026ldquo;Hello World\u0026rdquo; string translatable, but also to cater for the fact that there is a variable. As explained in the \u0026ldquo;Translations in PrestaShop 1.5\u0026rdquo; chapter, variables are to be marked using sprintf() markers, such as %s or %1$s.\nMaking \u0026ldquo;Hello %s!\u0026rdquo; translatable words in easy: we just need to use this code:\n{l s='Hello %s!' sprintf=$my_module_name mod='mymodule'}  But in our case, we also need to make sure that the %s is replaced by \u0026ldquo;World\u0026rdquo; in case the my_module_name value does not exist\u0026hellip; and we must make \u0026ldquo;World\u0026rdquo; translatable too. This can be achieved by using Smarty {capture} function, which collects the output of the template between the tags into a variable instead of displaying, so that we can use it later on. We are going to use it in order to replace the variable with the translated \u0026ldquo;World\u0026rdquo; if the variable is empty or absent, using a temporary variable. Here is the final code:\n{if !isset($my_module_name) || !$my_module_name} {capture name='my_module_tempvar'}{l s='World' mod='mymodule'}{/capture} {assign var='my_module_name' value=$smarty.capture.my_module_tempvar} {/if} {l s='Hello %s!' sprintf=$my_module_name mod='mymodule'}  HTML content You may need to add HTML content in your translated string. Writing it directly in the string (original or translated) won\u0026rsquo;t work, as the special characters would be escaped to avoid XSS security issues.\nInstead, you must replace some placeholders with the HTML code.\nLet\u0026rsquo;s take an example with a link in a string, which can be tricky to do. The first solution coming in mind would be the concatenation of translated strings with raw HTML code. But this solution is not recommended, because the words order could be different depending on the language used.\n{l s='If you want a category to appear in the menu of your shop, go to [1]Modules \u0026gt; Modules \u0026amp; Services \u0026gt; Installed modules.[/1] Then, configure your menu module.' sprintf=[ '[1]' =\u0026gt; \u0026quot;\u0026lt;a href=\\\u0026quot;{$link-\u0026gt;getAdminLink('AdminModules')}\\\u0026quot; class=\\\u0026quot;_blank\\\u0026quot;\u0026gt;\u0026quot;, '[/1]' =\u0026gt; '\u0026lt;/a\u0026gt;' ] mod='mymodule' }  Let\u0026rsquo;s look at the resulting string:\nIf you want a category to appear in the menu of your shop, go to [1]Modules \u0026gt; Modules \u0026amp; Services \u0026gt; Installed modules.[/1] Then, configure your menu module.  It remains quite simple, but you must make sure the parts [1] and [/1] still exist after translating it to other languages.\nNative modules On PrestaShop 1.7, the translation system has changed for native modules (= provided by PrestaShop core team).\nDetails on its implementation can be found here.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/create-custom-grid-action/",
	"title": "How to create a custom Grid Action?",
	"tags": [],
	"description": "",
	"content": " Do you know how to do it? Please feel free to contribute to the docs!\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/scale/",
	"title": "Scale",
	"tags": [],
	"description": "",
	"content": " Chapter 8 How to make PrestaShop scale Follow this guide to optimize your PrestaShop shop.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/create-custom-column-type/",
	"title": "How to create a custom Column Type?",
	"tags": [],
	"description": "",
	"content": " Do you know how to do it? Please feel free to contribute to the docs!\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/webservice/tutorials/",
	"title": "Tutorials",
	"tags": [],
	"description": "",
	"content": " Tutorials  PrestaShop Webservice lib   Change product image   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/badge/",
	"title": "BadgeColumn reference",
	"tags": [],
	"description": "",
	"content": " BadgeColumn Type  This basic BadgeColumn displays a raw field data in Grid, associated with a badge.\nAvailable options    Properties Type Expected value     field string required Record field name which column displays.   badge_type string default: success Indicates which field of the row contains the image source. (Allowed values: success, info, danger, warning)    Example usage use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\BadgeColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $badgeColumn = new BadgeColumn('total_spent'); $badgeColumn-\u0026gt;setName('Sales'); $badgeColumn-\u0026gt;setOptions([ 'field' =\u0026gt; 'total_spent', 'badge_type' =\u0026gt; 'success', 'empty_value' =\u0026gt; '--', ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($badgeColumn);  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/coding-standards/",
	"title": "Coding standards",
	"tags": [],
	"description": "",
	"content": " Coding standards Consistency is important, even more so when writing open-source code, since the code belongs to millions of eyeballs, and bug-fixing relies on these teeming millions to actually locate bugs and understand how to solve them.\nThis is why, when writing anything for PrestaShop, be it a theme, a module or a core patch, you should strive to follow the following guidelines. They are the ones that PrestaShop\u0026rsquo;s developers adhere to, and following them is the surest way to have your code be elegantly integrated in PrestaShop.\nIn short, code consistency helps keeping the code readable and maintainable.\nGeneral conventions All files containing code MUST:\n Use only UTF-8 without BOM. Use the Unix LF (linefeed) line ending. End with a single blank line.  PHP code conventions PHP files MUST follow the PSR-2 standard alongside Symfony standards.\nAltough Yoda conditions are suggested, they are not enforced.\n PHP CS Fixer has been configured for the PrestaShop project to help developers to comply with these conventions.\nYou can run it using the following command:\nphp ./vendor/bin/php-cs-fixer fix  And you can also use the provided git pre-commit sample in order to make sure you never forget to make your code compliant !\nJavascript code conventions Javascript files MUST follow the Airbnb Javascript style guide.\nHTML, CSS (Sass), Twig \u0026amp; Smarty code conventions HTML, CSS (Sass), Twig and Smarty files MUST follow the Mark Otto\u0026rsquo;s coding standards. Mark is the creator of the Bootstrap framework.\nLicense information All PrestaShop files MUST start with the PrestaShop license block:\nCore files /** * 2007-2019 PrestaShop SA and Contributors * * NOTICE OF LICENSE * * This source file is subject to the Open Software License (OSL 3.0) * that is bundled with this package in the file LICENSE.txt. * It is also available through the world-wide-web at this URL: * https://opensource.org/licenses/OSL-3.0 * If you did not receive a copy of the license and are unable to * obtain it through the world-wide-web, please send an email * to license@prestashop.com so we can send you a copy immediately. * * DISCLAIMER * * Do not edit or add to this file if you wish to upgrade PrestaShop to newer * versions in the future. If you wish to customize PrestaShop for your * needs please refer to http://www.prestashop.com for more information. * * @author PrestaShop SA \u0026lt;contact@prestashop.com\u0026gt; * @copyright 2007-2019 PrestaShop SA and Contributors * @license https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0) * International Registered Trademark \u0026amp; Property of PrestaShop SA */  Module files /** * 2007-2019 PrestaShop SA and Contributors * * NOTICE OF LICENSE * * This source file is subject to the Academic Free License (AFL 3.0) * that is bundled with this package in the file LICENSE.txt. * It is also available through the world-wide-web at this URL: * https://opensource.org/licenses/AFL-3.0 * If you did not receive a copy of the license and are unable to * obtain it through the world-wide-web, please send an email * to license@prestashop.com so we can send you a copy immediately. * * DISCLAIMER * * Do not edit or add to this file if you wish to upgrade PrestaShop to newer * versions in the future. If you wish to customize PrestaShop for your * needs please refer to http://www.prestashop.com for more information. * * @author PrestaShop SA \u0026lt;contact@prestashop.com\u0026gt; * @copyright 2007-2019 PrestaShop SA and Contributors * @license https://opensource.org/licenses/AFL-3.0 Academic Free License (AFL 3.0) * International Registered Trademark \u0026amp; Property of PrestaShop SA */  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/",
	"title": "Column Types reference",
	"tags": [],
	"description": "",
	"content": " Column Types reference  Most important Grid definition part is defining columns. PrestaShop already comes with a list of predefined columns that you can use in your own Grids.\nSupported Types Basic columns  DataColumn DateTimeColumn ImageColumn ToggleColumn BadgeColumn 1.7.6   LinkColumn 1.7.6    Action columns  ActionColumn BulkActionColumn PositionColumn  Employee columns  EmployeeNameWithAvatarColumn  Status columns  SeverityLevelColumn  Use case example \u0026lt;?php // /modules/my-module/src/Grid/MyGridDefinitionFactory.php namespace MyModule\\Grid; use PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\AbstractGridDefinitionFactory; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\DataColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\BulkActionColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Row\\RowActionCollection; use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Row\\Type\\LinkRowAction; /** * How to define the Grid columns? * You can adapt this exemple or look at the existing ones * in PrestaShop Core. */ class MyGridDefinitionFactory extends AbstractGridDefinition { /** * {@inheritdoc} */ protected function getColumns() { return (new ColumnCollection()) -\u0026gt;add( (new BulkActionColumn('delete_stuff')) -\u0026gt;setOptions([ 'bulk_field' =\u0026gt; 'id_stuff', ]) ) -\u0026gt;add( (new DataColumn('id_stuff')) -\u0026gt;setName('ID') -\u0026gt;setOptions([ 'field' =\u0026gt; 'id_stuff', ]) ) -\u0026gt;add( (new ActionColumn('actions')) -\u0026gt;setName('Actions') -\u0026gt;setOptions([ 'actions' =\u0026gt; (new RowActionCollection()) -\u0026gt;add( (new LinkRowAction('delete')) -\u0026gt;setIcon('delete') -\u0026gt;setOptions([ 'route' =\u0026gt; 'delete_stuff', 'route_param_name' =\u0026gt; 'stuffId', 'route_param_field' =\u0026gt; 'id_stuff', 'confirm_message' =\u0026gt; 'Delete selected item?', ]) ), ]) ) ; } }  You need to create a custom Column Type? We got you covered!\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/contribution-guidelines/",
	"title": "Contribution guidelines",
	"tags": [],
	"description": "",
	"content": " Contribution guidelines Ready to contribute code? Here\u0026rsquo;s what you need to know to get your Pull Request accepted.\nCommits Atomic commits In the past, we used to have only one commit by pull request. This was a bad habit. We now require contributors to make atomic commits, so you will surely have more than one commit in a single pull request. This will be helpful to review, cherry-pick or revert changes (we hope to never have to do that 😉).\nWhat\u0026rsquo;s an atomic commit? It means that the commit\u0026rsquo;s purpose is one, and only one, complete fix or change. Typically, ask yourself if what you are doing is one or several tasks. Do not hesitate to use git add -p ... (details here) if you have made several changes in the same file but not all those changes are meant to be in the current commit.\nWriting a good commit message In the past, we used to ask to prepend commit names with FO, BO, CO\u0026hellip; This is no longer needed.\n The commit name should give an idea of the nature and context of the change that has been done. The more details, the better! The commit name should be as unique and recognizable as your commit itself. There are multitude of articles on the web regarding commit messages, here are two that you can find useful:\n How to Write a Git Commit Message What makes a good commit message?  Bad examples Bad commit messages give pretty much no context:\n add cli new fix useless code fix code review comments  Good example A good commit message explains what is done, and why:\nMake Source.indexOf(ByteString) significantly faster Previously the algorithm that did this was extremely inefficient, and had worst case runtime of O(N * S * S) for N is size of the bytestring and S is the number of segments. The new code runs in O(N * S). It accomplishes this by not starting each search at the first segment, which could occur many times when called by RealBufferedSource.  Some tips:\n Separate subject from body with a blank line Limit the subject line to 50 characters Capitalize the subject line Use the body to explain what and why vs. how   Compiled assets Some source files like SCSS and JavaScript need to be compiled to work on a PrestaShop shop. To ease up the life of contributors who don\u0026rsquo;t want to fuzz around installing node and NPM, we require those files to be compiled and committed in the same Pull Request as the source changes.\nMake sure to follow these guidelines:\n Compile assets for production. Check that that the assets you are compiled were built using the \u0026ldquo;prod\u0026rdquo; setting instead of the \u0026ldquo;dev\u0026rdquo; one. To find out more, read How to compile assets. Commit assets and sources separately. Submit your compiled assets in a separate commit from your source changes. This will be especially helpful when rebasing, because you can just drop the commit and avoid merge conflicts. One asset commit per Pull Request. Try to avoid recompiling and committing the assets more than once. If you need to make changes and you have already committed a previous build, use interactive rebase to remove the previous commit, then compile the assets.  Pull Requests Now that you have made atomic commits, you surely have a lot of commits for one pull request.\nA pull request should answer to a single given issue. Do not ever make a single pull request for many purposes. Do not hesitate to split your big commit into several subprojects. It will be easier and quicker to review.\nAs all your commits messages are well-formatted, just make a summary of your pull request’s purpose in its GitHub title. A summary does not mean it can not be explicit. Please describe what your pull request does in detail (avoid \u0026ldquo;Fix product page\u0026rdquo; or \u0026ldquo;Category page improvement\u0026rdquo;). Then, just fill the PR template table to answer some questions which will help the team make a decision faster.\nPlease note that all the pull requests must follow those guidelines. If the commit messages are not well-formatted, the pull request\u0026rsquo;s title is not correct, or the table is not properly filled, we will not be able to accept your pull request.\nPull requests requirements Code submitted through your Pull Request will be reviewed by PrestaShop maintainers. The code review process is generally regarded as a good practice and adopted by hundreds of software projects around the world. It provides lot of benefits: - it helps spotting errors in the code, because we all make mistakes and it\u0026rsquo;s very hard to find one\u0026rsquo;s own mistakes - it helps improving code quality not only by ensuring it\u0026rsquo;s readable and understandable, but also by pinpointing design, performance or security issues that may have been unintentionally introduced by the author - it helps spread knowledge of the code base, because the reviewer will learn how your code works too - and don\u0026rsquo;t forget that reviewing is a discussion, not a to-do list: the goal is to find the best solution by sharing different opinions\nHowever, reviewing code is hard and can be exhausting. Making your pull request as easy as possible to review will help in getting it accepted swiftly. Completing the pull request form (explained below), properly explaining the reasons behind some of your technical choices, as well as any part of the code that could be tricky to understand\u0026hellip; those are some examples of things that you can do to help ease up the process.\nAlso, please avoid submitting very large PRs when it can be avoided.\n If you modified a lot of files or a very big number of lines, it is unlikely that you\u0026rsquo;re addressing a single issue: please try and submit one PR for each issue you solve. This way, a problem in one change won\u0026rsquo;t block other valid changes from being merged. A PR with a lot of changed lines will take a long time to review, and consequently the reviewer might miss possible issues. If your PR is too big, it may be rejected due to risk of regressions. The longer it takes to merge a PR, the more it is likely that it will be blocked by merge conflicts. Whenever a Pull Request is rebased, it has to be reviewed again, thus increasing the time to merge, thus increasing the risk of conflicts\u0026hellip;  Remember: smaller changes are easier to review, easier to test and easier to merge.\nThe Pull Request form When you create a new Pull Request, you will be presented with a form to complete that looks like this:\nIt is very important that you complete this table correctly, as it is vital for:\n Making sure the branch is correct Understanding your change Making sure that it works as expected Tracking when a PR fixes a known issue Tracking if a release breaks retro-compatibility Building the change log  Target branch Pull requests must be made in the appropriate branch, depending on the nature of your change.\n Develop. New features, bug fixes, improvements. PRs merged here will be released in the next minor or major version. Patch version branch (eg. 1.7.4.x). For critical bug fixes and regressions only. PRs merged here will be released in a patch version. 1.6.1.x branch. For PrestaShop 1.6 bug fixes only.  About supported branches PrestaShop only accepts PRs on branches which are subject to new releases.\nOnce PrestaShop releases a new minor (\u0026ldquo;dot-zero\u0026rdquo;) version, it won\u0026rsquo;t release new patch versions for previous minor versions – with the exception of rare cases, for example if a security bug is found just before or after a minor release is published.\nThis means that except for 1.6.1.x (on extended support), only the latest minor version patch branch is supported.\nFor example, the 1.7.4.x branch is supported until the release of version 1.7.5.0. After that, the only supported version branch will be 1.7.5.x, and so on.\nIf you find a bug on an unsupported version, make sure that bug is still present in the latest version. If the bug is still present, please submit a PR on develop.\nPRs on unsupported versions will be closed.\nWhen in doubt, use the develop branch. We will ask you to rebase on the correct branch if necessary.\n  Category The category is the portion of the project to which your changes apply to. We use this code to construct the change log by grouping changes in different sections. Choose the code that most closely describes your change:\n   Code Scope     FO if the changes impact the Front Office   BO if the changes impact the Back Office   IN if the changes impact the Installer   WS if the changes impact the Web Services   CO if the changes impact the Core (non-visible functionality)   LO if the changes impact localization functionality   TE if the changes impact automated tests    Remember, this is only needed for the Pull Request form, not for your commit messages.\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/data/",
	"title": "DataColumn reference",
	"tags": [],
	"description": "",
	"content": " DataColumn Type  The most basic column is DataColumn. It is used to display raw field data in Grid.\nAvailable options    Properties Type Expected value     field string required Record field name which column displays.    Example usage use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\DataColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $dataColumn = new DataColumn('id_product'); $dataColumn-\u0026gt;setName('ID'); $dataColumn-\u0026gt;setOptions([ 'field' =\u0026gt; 'id_product', ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($dataColumn);  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/datetime/",
	"title": "DateTimeColumn reference",
	"tags": [],
	"description": "",
	"content": " DateTimeColumn Type  You can use this column type in your Grid to format datetime values. It is common to get datetime value (e.g. Created at, Updated at \u0026amp; etc.) from database and format them before displaying.\nAvailable options    Properties Type Expected value     field string required Record field name which column displays.   format string default: Y-m-d H:i:s Format to use when formatting datetime.    Example usage use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\DateTimeColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $dateTimeColumn = new DateTimeColumn('datetime'); $dateTimeColumn-\u0026gt;setName('Created at'); $dateTimeColumn-\u0026gt;setOptions([ 'field' =\u0026gt; 'date_add', // field name that has datetime value 'format' =\u0026gt; 'Y/d/m H:i:s', // define custom format for datetime ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($dateTimeColumn);  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/creation/",
	"title": "Getting started",
	"tags": [],
	"description": "",
	"content": " Getting started Quick start Modules must follow some guidelines to work on PrestaShop.\nIf you want to get started quickly, with a ready-to-use module template, you can use the module generator available on the PrestaShop Validator.\nIt provides an easy way to generate a payment or shipping module, with the basic structure, the default properties customized and the most common use cases covered (hook, upgrade\u0026hellip;).\n\u0026gt; Generate a module\nTutorial: Understanding your first module Before you start writing code for your PrestaShop module, you should be aware that the PrestaShop team uses a specific set of coding conventions (or coding standards, coding norm, etc.).\nAs Wikipedia puts it, \u0026ldquo;Coding conventions are a set of guidelines for a specific programming language that recommend programming style, practices and methods for each aspect of a piece program written in this language\u0026rdquo;, and \u0026ldquo;Good procedures, good methodology and good coding standards can be used to drive a project such that the quality is maximized and the overall development time and development and maintenance cost is minimized.\u0026ldquo;.\nPrestaShop\u0026rsquo;s own standards are available at this page: Coding standards. You should read it in order to make sure that the code you produce fits correctly with the overall code of the PrestaShop project. Configuring your IDE hints or using automated tools like PHPCodeSniffer can help you make sure you follow the standards properly.\n Let\u0026rsquo;s create a simple first module; this will enable us to better describe its structure. We will name it \u0026ldquo;My module\u0026rdquo;.\nFirst, create the module\u0026rsquo;s folder, in the /modules folder. It should have the same name as the module, with no space, only alphanumerical characters, the hyphen and the underscore, all in lowercase: /mymodule.\nThis folder must contain the main file, a PHP file of the same name as the folder, which will handle most of the processing: mymodule.php.\nThat is enough for a very basic module, but obviously more files and folders can be added later.\nThe constant test The main mymodule.php file must start with the following test:\nif (!defined('_PS_VERSION_')) { exit; }  This checks for the existence of an always-existing PrestaShop constant (its version number), and if it does not exist, it stops the module from loading. The sole purpose of this is to prevent malicious visitors to load this file directly.\nNote that, as required by the PrestaShop Coding Standards (see above), we do not use a PHP closing tag.\nThe main class The main file must contain the module\u0026rsquo;s main class (along with other classes if needed). PrestaShop uses Object-Oriented programming, and so do its modules.\nThat class must bear the same name as the module and its folder, in CamelCase (see http://en.wikipedia.org/wiki/CamelCase). In our example: MyModule. Furthermore, that class must extend the Module class, in order to inherit all its methods and attributes.\nif (!defined('_PS_VERSION_')) { exit; } class MyModule extends Module { }  It can just as well extend any class derived from Module, for specific needs: PaymentModule, ModuleGridEngine, ModuleGraph, etc.\nAt this stage, if you place the module\u0026rsquo;s folder on the /modules folder, the module can already be seen in the \u0026ldquo;Modules\u0026rdquo; page in the back office, in the \u0026ldquo;Other modules\u0026rdquo; section – albeit with no real name nor thumbnail.\nThe constructor method Now, let\u0026rsquo;s fill the class\u0026rsquo; code block with the essential constructor lines. A constructor is a function in a class that is automatically called when you create a new instance of a class with new. In the case of a PrestaShop, the constructor class is the first method to be called when the module is loaded by PrestaShop. This is therefore the best place to set most of its details.\nif (!defined('_PS_VERSION_')) { exit; } class MyModule extends Module { public function __construct() { $this-\u0026gt;name = 'mymodule'; $this-\u0026gt;tab = 'front_office_features'; $this-\u0026gt;version = '1.0.0'; $this-\u0026gt;author = 'Firstname Lastname'; $this-\u0026gt;need_instance = 0; $this-\u0026gt;ps_versions_compliancy = [ 'min' =\u0026gt; '1.6', 'max' =\u0026gt; _PS_VERSION_ ]; $this-\u0026gt;bootstrap = true; parent::__construct(); $this-\u0026gt;displayName = $this-\u0026gt;l('My module'); $this-\u0026gt;description = $this-\u0026gt;l('Description of my module.'); $this-\u0026gt;confirmUninstall = $this-\u0026gt;l('Are you sure you want to uninstall?'); if (!Configuration::get('MYMODULE_NAME')) { $this-\u0026gt;warning = $this-\u0026gt;l('No name provided'); } } }  Let\u0026rsquo;s examine each line from this first version of the MyModule class\u0026hellip;\n// This line defines the class constructor function. $this-\u0026gt;name = 'mymodule'; $this-\u0026gt;tab = 'front_office_features'; $this-\u0026gt;version = '1.0'; $this-\u0026gt;author = 'Firstname Lastname';  This section assigns a handful of attributes to the class instance (this):\n \u0026lsquo;name\u0026rsquo; attribute. This attributes serves as an internal identifier. The value MUST be the name of the module\u0026rsquo;s folder. Do not use special characters or spaces, and keep it lower-case. \u0026lsquo;tab\u0026rsquo; attribute. The title for the section that shall contain this module in PrestaShop\u0026rsquo;s back office modules list. You may use an existing name, such as seo, front_office_features or analytics_stats, or a custom one. In this last case, a new section will be created with your identifier. We choose \u0026ldquo;front_office_features\u0026rdquo; because this first module will mostly have an impact on the front-end. \u0026lsquo;version\u0026rsquo; attribute. The version number for the module, displayed in the modules list. It is a string, so that you may use such variation as \u0026ldquo;1.0b\u0026rdquo;, \u0026ldquo;3.07 beta 3\u0026rdquo; or \u0026ldquo;0.94 (not for production use)\u0026rdquo;. \u0026lsquo;author\u0026rsquo; attribute. This is displayed as-is in the PrestaShop modules list.  Here is the list of available \u0026ldquo;Tab\u0026rdquo; attributes, and their corresponding section in the \u0026ldquo;Modules\u0026rdquo; page:\n   \u0026ldquo;Tab\u0026rdquo; attribute Module section     administration Administration   advertising_marketing Advertising \u0026amp; Marketing   analytics_stats Analytics \u0026amp; Stats   billing_invoicing Billing \u0026amp; Invoices   checkout Checkout   content_management Content Management   dashboard Dashboard   emailing E-mailing   export Export   front_office_features Front Office Features   i18n_localization I18n \u0026amp; Localization   market_place Market Place   merchandizing Merchandizing   migration_tools Migration Tools   mobile Mobile   others Other Modules   payments_gateways Payments \u0026amp; Gateways   payment_security Payment Security   pricing_promotion Pricing \u0026amp; Promotion   quick_bulk_update Quick / Bulk update   search_filter Search \u0026amp; Filter   seo SEO   shipping_logistics Shipping \u0026amp; Logistics   slideshows Slideshows   smart_shopping Smart Shopping   social_networks Social Networks    Let\u0026rsquo;s continue with the next line in this block of code:\n$this-\u0026gt;need_instance = 0; $this-\u0026gt;ps_versions_compliancy = [ 'min' =\u0026gt; '1.5', 'max' =\u0026gt; '1.6' ]; $this-\u0026gt;bootstrap = true;  This section handles the relationship with the module and its environment (namely, PrestaShop):\n need_instance. Indicates whether to load the module\u0026rsquo;s class when displaying the \u0026ldquo;Modules\u0026rdquo; page in the back office. If set at 0, the module will not be loaded, and therefore will spend less resources to generate the \u0026ldquo;Modules\u0026rdquo; page. If your module needs to display a warning message in the \u0026ldquo;Modules\u0026rdquo; page, then you must set this attribute to 1. ps_versions_compliancy. Indicates which version of PrestaShop this module is compatible with. In the example above, we explicitly write that this module will only work with PrestaShop 1.5.x, and no other major version. bootstrap. Indicates that the module\u0026rsquo;s template files have been built with PrestaShop 1.6\u0026rsquo;s bootstrap tools in mind – and therefore, that PrestaShop should not try to wrap the template code for the configuration screen (if there is one) with helper tags.  Next, we call the constructor method from the parent PHP class:\nparent::__construct();  This will trigger a lot of actions from PrestaShop that you do not need to know about at this point. Calling the parent constuctor method must be done after the creation of the this-\u0026gt;name variable and before any use of the this-\u0026gt;l() translation method.\nThe next section deals with text strings, which are encapsulated in PrestaShop\u0026rsquo;s translation method, l():\n$this-\u0026gt;displayName = $this-\u0026gt;l('My module'); $this-\u0026gt;description = $this-\u0026gt;l('Description of my module.'); $this-\u0026gt;confirmUninstall = $this-\u0026gt;l('Are you sure you want to uninstall?'); if (!Configuration::get('MYMODULE_NAME')) { $this-\u0026gt;warning = $this-\u0026gt;l('No name provided.'); }  These lines respectively assign:\n A name for the module, which will be displayed in the back office\u0026rsquo;s modules list. A description for the module, which will be displayed in the back office\u0026rsquo;s modules list. A message, asking the administrator if he really does want to uninstall the module. To be used in the installation code. A warning that the module doesn\u0026rsquo;t have its MYMODULE_NAME database value set yet (this last point being specific to our example, as we will see later).  The constructor method is now complete. You are free to add more to it later if necessary, but this the bare minimum for a working module.\nNow go to your back office, then in the Modules page (found at \u0026ldquo;Modules\u0026rdquo; \u0026gt; \u0026ldquo;Modules \u0026amp; Services\u0026rdquo;) choose the Selection tab. The module is visible in the modules list, with its information displayed – and no icon for now.\nYou can install the module, but it does not do anything yet.\nWhen you click on the \u0026ldquo;Install\u0026rdquo; button for your module, it will display a module window saying that your module is Untrusted.\nThe only way to make your module Trusted is to distribute it through the PrestaShop Addons marketplace (with a unique identifying key), or to become a PrestaShop partner. Other trusted modules are the native ones.\nTo install the module, click the \u0026ldquo;Proceed with installation\u0026rdquo; on this screen.\nBuilding the install() and uninstall() methods Some modules have more needs than just using PrestaShop\u0026rsquo;s features in special ways. Your module might need to perform actions on installation, such as checking PrestaShop\u0026rsquo;s settings or to registering its own settings in the database. Likewise, if you changed things in the database on installation, it is highly recommended to change them back (or remove them) when uninstalling the module.\nThe install() and uninstall() methods make it possible to control what happens when the store administrator installs or uninstalls the module. They must be included in the main class\u0026rsquo; block of code (in our example, the MyModule class) – at the same level as the constructor method.\nThe install() method Here is the bare minimum for the install() method:\npublic function install() { return parent::install(); }  In this first and extremely simplistic incarnation, this method does the minimum needed: return true returned by the Module class\u0026rsquo; install() method, which returns either true if the module is correctly installed, or false otherwise. As it is, if we had not created that method, the superclass\u0026rsquo; method would have been called instead anyway, making the end result identical. Nevertheless, we must mention this method, because it will be very useful once we have to perform checks and actions during the module\u0026rsquo;s installation process: creating SQL tables, copying files, creation configuration variables, etc.\nSo for example how you can expand the install() method to perform installation checks. In the following example, we perform the following tasks during installation:\n Check that the Multistore feature is enabled, and if so, set the current context to all shops on this installation of PrestaShop. Check that the module parent class is installed. Check that the module can be attached to the leftColumn hook. Check that the module can be attached to the header hook. Create the MYMODULE_NAME configuration setting, setting its value to \u0026ldquo;my friend\u0026rdquo;.  public function install() { if (Shop::isFeatureActive()) { Shop::setContext(Shop::CONTEXT_ALL); } if (!parent::install() || !$this-\u0026gt;registerHook('leftColumn') || !$this-\u0026gt;registerHook('header') || !Configuration::updateValue('MYMODULE_NAME', 'my friend') ) { return false; } return true; }  If any of the lines in the testing block fails, the method returns false and the installation does not happen.\nThe uninstall() method Here is the bare minimum for the uninstall() method:\npublic function uninstall() { return parent::uninstall(); }  Building on this foundation, we want an uninstall() method that would delete the data added to the database during the installation ( MYMODULE_NAME configuration setting). This method would look like this:\npublic function uninstall() { if (!parent::uninstall() || !Configuration::deleteByName('MYMODULE_NAME') ) { return false; } return true; }  The Configuration object As you can see, our three blocks of code (__construct(), install() and uninstall()) all make use of a new object, Configuration.\nThis is a PrestaShop-specific object, built to help developers manage their module settings. It stores these settings in PrestaShop\u0026rsquo;s database without require to use SQL queries. Specifically, this object handles data from the ps_configuration database table.\nThe main methods So far, we\u0026rsquo;ve used three methods, to which we\u0026rsquo;ll add a fourth one in the list below:\n Configuration::get('myVariable'): retrieves a specific value from the database. Configuration::getMultiple(array('myFirstVariable', 'mySecondVariable', 'myThirdVariable')): retrieves several values from the database, and returns a PHP array. Configuration::updateValue('myVariable', $value): updates an existing database variable with a new value. If the variable does not yet exist, it creates it with that value. Configuration::deleteByName('myVariable'): deletes the database variable.  There are many more, such as getInt() or hasContext(), but these four are the ones you will use the most.\nNote that when using updateValue(), the content of \\$value can be anything, be it a string, a number, a serialized PHP array or a JSON object. As long as you properly code the data handling function, anything goes. For instance, here is how to handle a PHP array using the Configuration object:\n// Storing a serialized array. Configuration::updateValue('MYMODULE_SETTINGS', serialize(array(true, true, false))); // Retrieving the array. $configuration_array = unserialize(Configuration::get('MYMODULE_SETTINGS'));  As you can see, this in a very useful and easy-to-use object, and you will certainly use it in many situations. Most native modules use it too for their own settings.\nHandling the Multistore feature By default, all these methods work within the confines of the current store context, whether PrestaShop is using the multistore feature or not.\nHowever, it is possible to work outside of the current context and impact other known stores. This is done using three optional parameters, which are not presented in the list above:\n id_lang: enables you to force the language with which you want to work. id_shop_group: enables you to indicate the shop group of the target store. id_shop: enables you to indicate the id of the target store.  By default, these three parameters use the values of the current context, but you can use them to target other stores.\nNote that it is not recommended to change the default values of these variables, even more so if the module you are writing is to be used on other stores than your own. They should only be used if the module is for your own store, and you know the id and shop group of all of your shops.\nRetrieving external values from the ps_configuration data table You are not limited to your own variables: PrestaShop stores all its own configuration settings in the ps_configuration table. There are literally hundreds of settings, and you can access them just as easily as you would access your own. For instance:\n Configuration::get('PS_LANG_DEFAULT'): retrieves the ID for the default language. Configuration::get('PS_TIMEZONE'): retrieves the name of the current timezone, in standard TZ format (see: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones). Configuration::get('PS_DISTANCE_UNIT'): retrieves the default distance unit (\u0026ldquo;km\u0026rdquo; for kilometers, etc.). Configuration::get('PS_SHOP_EMAIL'): retrieves the main contact e-mail address. Configuration::get('PS_NB_DAYS_NEW_PRODUCT'): retrieves the number of days during which a newly-added product is considered \u0026ldquo;New\u0026rdquo; by PrestaShop.  Dive into the ps_configuration table in order to discover many other settings!\nThe Shop object Another of install()\u0026rsquo;s lines is this:\nif (Shop::isFeatureActive()) { Shop::setContext(Shop::CONTEXT_ALL); }  As said earlier, here we check that the Multistore feature is enabled, and if so, set the current context to all shops on this installation of PrestaShop.\nThe Shop object helps you manage the multistore feature. We will not dive in the specifics here, but will simply present the two methods that are used in this sample code:\n Shop::isFeatureActive(): This simply checks whether the multistore feature is active or not, and if at least two stores are presently activated. Shop::setContext(Shop::CONTEXT_ALL): This changes the context in order to apply coming changes to all existing stores instead of only the current store.  The Context is explained in more details in the \u0026ldquo;Using the Context Object\u0026rdquo; chapter of this Developer Guide.\nThe icon file To put the finishing touch to this basic module, you should add an icon, which will be displayed next to the module\u0026rsquo;s name in the back office modules list. In case your module is made for a prominent service, having that service\u0026rsquo;s logo visible brings trust. Make sure you do not use a logo already used by one of the native modules, or without authorization from the owner of the logo/service.\nThe icon file must respect these requirements:\n It must be placed on the module\u0026rsquo;s main folder. 32*32 PNG image. Named logo.png. Tip: There are many free 32*32 icon libraries available. Here are a few: http://www.fatcow.com/free-icons (very close to the FamFamFam one) or http://www.iconarchive.com/show/danish-royalty-free-icons-by-jonas-rask.html (Danish Royalty Free)  Installing the module Now that all basics are in place, reload the back office\u0026rsquo;s \u0026ldquo;Modules\u0026rdquo; pages, in the \u0026ldquo;Front office features\u0026rdquo; section, you should find your module. Install it (or reset it if it is already installed).\nDuring the module\u0026rsquo;s installation, PrestaShop automatically creates a small config.xml file in the module\u0026rsquo;s folder, which stores the configuration information. You should be very careful when editing by hand.\nKeeping things secure Once your module is online, its files could be accessed by anyone from the Internet. Even if they cannot trigger anything but PHP errors, you might want to prevent this from happening.\nYou can achieve this by adding an index.php file at the root of any module folder you create. Here is a suggestion for what to put in the file.\nheader(\u0026quot;Expires: Mon, 26 Jul 1997 05:00:00 GMT\u0026quot;); header(\u0026quot;Last-Modified: \u0026quot;.gmdate(\u0026quot;D, d M Y H:i:s\u0026quot;).\u0026quot; GMT\u0026quot;); header(\u0026quot;Cache-Control: no-store, no-cache, must-revalidate\u0026quot;); header(\u0026quot;Cache-Control: post-check=0, pre-check=0\u0026quot;, false); header(\u0026quot;Pragma: no-cache\u0026quot;); header(\u0026quot;Location: ../\u0026quot;); exit;  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/keeping-up-to-date/backup/",
	"title": "How to backup PrestaShop",
	"tags": [],
	"description": "",
	"content": " How to backup PrestaShop Before starting anything, you must think first about safety. Any modification made on a shop could break it, so you must make sure all your data has been backed up before going further. This basically implies saving two things: your files and your database.\nWe will give you all the details you may need to run an upgrade, but we can’t be held responsible for any damage caused to your shop during the process. That’s why we strongly recommend you to follow this backup step.\nFile backup The first elements to backup are the files on the web server where you have deployed your PrestaShop. The PrestaShop folder not only contains the source code, but also your modules \u0026amp; themes, pictures, and all other resources needed to run your shop successfully.\nCopy files To complete this step, your shop folder must be copied somewhere else. Although it can be simply copied on another folder on your server, making an additional copy of your files on another computer is a nice additional security measure. To do so, connect to your server using an FTP, SSH or RDP connection (depending on your server and hosting provider), copy the files in another location, then download them on your computer. Note that depending on the number of files and your internet connection, this may take a few hours to complete. But if you’re an advanced user and have a complete access to your server, the next part may help you go faster.\nBonus: Compress your files before download As said before, downloading the whole PrestaShop folder one file at a time will take a long time to complete. If you can run commands on your server, you can make a backup faster by compressing the whole content in a single archive file, then downloading this file locally.\n On Windows-based servers, this requires a remote desktop access. Once logged on your remote environment, use the Windows explorer to reach your www folder and compress all its content into a ZIP file.\n On Linux-based servers, you need to access your server terminal using SSH. Once logged in, reach your folder and use the following command to create a TAR file:\n  tar -czf \u0026lt;file_name\u0026gt;.tar \u0026lt;folder_to_save\u0026gt;  For instance:\ntar -czf backup.tar /var/www/html  When your archive is ready, you may copy it on your computer.\nDatabase backup The database on which PrestaShop runs must be saved as well. There are many ways to get a dump of the database content, and we cannot cover all of them. Feel free to use your tools, we just cover the main ones here. You can consider your dump is complete when you get a SQL file with the structure AND the content of each table in it.\nUsing MySQL client in command line Using mysqldump is the most straightforward way to make a full backup of a specific database. In a Windows or Linux terminal, run the following command to create a file dump.sql with your database structure \u0026amp; data:\nmysqldump yourdbname \u0026gt; dump.sql  With yourdbname an example name for the PrestaShop database.\nYour server is likely to require credentials. These details can also be provided as parameters:\nmysqldump -h\u0026lt;IP_or_hostname\u0026gt; -u\u0026lt;user\u0026gt; -p db1 \u0026gt; dump.sql  If you do not remember your database name or credentials, you can find them in your configuration files:\n PrestaShop 1.6: config/settings.inc.php PrestaShop 1.7: app/config/parameters.php  More details about backup \u0026amp; recoveries with MySQL binaries can be found on the official documentation.\nPhpMyAdmin (web interface) PhpMyAdmin, provided by several hosting providers, offers another way to get a complete dump of your database.\nLog on your PhpMyAdmin interface, select the database where PrestaShop is installed and chose the “export” tab.\n  Exporting a database in SQL format   We advise to select the “custom” method, as it offers more options to customize your dump. Make sure all your tables, views, etc are selected for backup. To get the same file content as the mysqldump method, the following options should be checked as well:\n Use LOCK TABLES statement Add DROP TABLE / VIEW / PROCEDURE / FUNCTION / EVENT / TRIGGER statement  Click of “Go”, wait for the dump to be generated, then download it.\nOther MySQL clients As said at the beginning of this chapter, there are a lot of ways to connect to a MySQL server. Many different softwares also provide a dump or export option as well.\n MySQL Workbench: https://dev.mysql.com/doc/workbench/en/wb-migration-wizard.html Navicat MySQL: https://www.navicat.com/manual/online_manual/en/navicat/win_manual/#/dump_execute_sql Adminer, a very easy to use and complete MySQL client in php: https://www.adminer.org/ Sequel Pro (Mac): https://www.sequelpro.com/ \u0026hellip;  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/documentation/how/edit-on-github/",
	"title": "How to edit a page on GitHub",
	"tags": [],
	"description": "",
	"content": " How to edit a page on GitHub Editing a page on GitHub is the most stright-forward way of contributing content to PrestaShop DevDocs.\n The good: you don\u0026rsquo;t need to have anything installed. The bad: even if GitHub provides a preview of your markdown code, you won\u0026rsquo;t be able to see exactly how it will look like on the site (for instance, shortcodes aren\u0026rsquo;t interpreted by the GitHub preview).  For this tutorial, you will need a GitHub account (free). If you don\u0026rsquo;t have one, you can create it for free.\nTo start, click on the \u0026ldquo;Improve this page\u0026rdquo; at the top right of the page you want to improve.\nFork (first time only) The first time you edit this project, you will see a message prompting you to create a fork of the documentation on GitHub:\nOnce you click on the \u0026ldquo;Fork this repository\u0026rdquo; button, you can proceed to edit the file.\nEditing the file You\u0026rsquo;ll now be able to edit the file using the GitHub editor. Remember that pages are written using Markdown, a lightweight markup language.\nWhen you are done, scroll down to the bottom of the page to submit your changes. Writing a message explaining what you changed will help everyone keep track of history:\nIncidentally, once your change is merged, this description will appear at the bottom of the page:\nOnce you click on \u0026ldquo;Propose this change\u0026rdquo;, you\u0026rsquo;ll be able to see a diff of your changes compared to the current version.\nCreating a Pull Request Click on \u0026ldquo;Create Pull Request\u0026rdquo; to start drafting a new Pull Request.\nConfirm the creation by clicking again on \u0026ldquo;Create Pull Request\u0026rdquo;.\nThat\u0026rsquo;s it, your Pull Request has been created! The team will review it, and once it is approved and merged it will be available for everyone.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/testing/how-to-launch-tests/",
	"title": "How to execute tests",
	"tags": [],
	"description": "",
	"content": " How to execute the PrestaShop automatic test suite Executing Unit/integration test suites At least four test suites are available, testing different parts of PrestaShop:\n Legacy tests: heritage from PrestaShop 1.6: mix of unit, integration and functional tests; Legacy controllers: added to help with the Symfony migration, ensures that old Back Office controllers are still runnable; Admin tests: specific to PrestaShop 1.7, tests src/Core and src/Adapter classes; Symfony specific tests: specific to PrestaShop 1.7, test classes from src/PrestaShopBundle  Each suite needs a specific PHPUnit configuration. This is why each test suite has a specific composer command:\n composer phpunit-legacy composer phpunit-controllers composer phpunit-admin composer phpunit-sf  You can execute the entire PHPUnit testsuites using the composer test-all command.\n Executing the StarterTheme test suites Note: This suite is being phased out by the new E2E tests suite\n Before executing the StarterTheme tests you need to install the dependencies and create a configuration file.\n In tests/Selenium folder, execute the command npm install (node 6+ \u0026amp;\u0026amp; npm are required). Create settings.js from settings.dist.js file. Start the launch of test suite using npm run test command.  If you want to display the browser, remove the --headless argument from webdriver.io configuration file.\n Find out more in the StarterTheme tests Readme file.\nExecuting the Functional End-to-End (E2E) test suites This is thoroughly explained in the E2E tests Readme file.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/image/",
	"title": "ImageColumn reference",
	"tags": [],
	"description": "",
	"content": " ImageColumn Type  This column is used to display an image from a row. You need to specify which field of the row contains the image source.\nAvailable options    Properties Type Expected value     src_field string required Indicates which field of the row contains the image source    Example usage use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\ImageColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $imageColumn = new ImageColumn('flag'); $imageColumn-\u0026gt;setName('Flag'); $imageColumn-\u0026gt;setOptions([ 'src_field' =\u0026gt; 'flag', ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($imageColumn);  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/link/",
	"title": "LinkColumn reference",
	"tags": [],
	"description": "",
	"content": " LinkColumn Type  This LinkColumn displays a raw field data encapsulated in a link (very useful to add an edition link on a name for example).\nAvailable options    Properties Type Expected value     field string required Record field name which column displays.   route string required Route used to generated link url.   route_param_name string required Parameter name used by the route to generate the url.   route_param_field string required Record field containing the route parameter.    Example usage use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\LinkColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $linkColumn = new LinkColumn('name_link'); $linkColumn-\u0026gt;setName('Name'); $linkColumn-\u0026gt;setOptions([ 'field' =\u0026gt; 'name', 'route' =\u0026gt; 'admin_category_edit', 'route_param_name' =\u0026gt; 'categoryId', 'route_param_field' =\u0026gt; 'id_category', ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($linkColumn);  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/getting-started/setting-up-your-local-environment/",
	"title": "Setting up your local environment",
	"tags": [],
	"description": "",
	"content": " Setting up your local environment Now that you intend to building a theme for PrestaShop, you are better off keeping all your development work on your machine. The main advantage is that it makes it possible for you to entirely bypass the process of uploading your files on your online server in order to test your changes. Another advantage is that a local test environment enables you to test code without the risk of breaking your production store. Having a local environment is the essential first step in the path of web development.\nThe following content assumes you’re a developer and you want to create a theme or a module.\n Installing PrestaShop We advise you to install PrestaShop using Git and Composer.\nOpen a command line on your (empty) working directory, then:\n Clone PrestaShop\ngit clone https://github.com/PrestaShop/PrestaShop.git  Install dependencies\ncomposer install   Using git you can choose your PrestaShop version:\ngit checkout 1.7.2.0  Also we would warn you to test your final result with a zip release, just for safety (since vendor version might be slightly different).\nIf you haven’t done it yet, we strongly recommend you to read our article Set Up Your Git For Contributing\n Building your .gitignore file A gitignore file is a must-have for any Git-versioned project, as it specifies intentionally untracked files that Git should ignore.\nWhat to ignore Generally, you shouldn’t version the following types of files:\n Temporary files (such as cache files) Generated files (such as minified CSS or retrieved XML files) Files with credentials or personal information (such as settings.inc.php) OS and IDE-related files (such as .DS_Store or .idea/) assets/css/* assets/js/* node_modules/  We suggest that you build your own using http://gitignore.io.\nIf you are building a full project for a client, you can read our article on building a gitignore for PrestaShop.\n Create your theme from the Starter Theme When you want to create a theme, the best way is to use the Starter Theme as a base theme.\nCreate a new folder under themes/, download the Starter Theme, and copy its files in your new folder.\nDownload the Starter Theme\nCreate your theme.yml file First of all, you need to rename config/theme.dist.yml to config/theme.yml and edit it according to the name of your theme.\nname: YOUR_THEME_DIRECTORY_NAME display_name: YOUR THEME NAME version: 1.0.0 author: name: \u0026quot;PrestaShop Team\u0026quot; email: \u0026quot;pub@prestashop.com\u0026quot; url: \u0026quot;http://www.prestashop.com\u0026quot; meta: compatibility: from: 1.7.3.0 to: ~  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/installation/system-requirements/",
	"title": "System requirements for PrestaShop 1.7",
	"tags": [],
	"description": "",
	"content": " System requirements for PrestaShop 1.7 PrestaShop needs the following server configuration in order to run:\n System: Unix, Linux or Windows. Web server: Apache Web Server 2.2 or any later version. PHP:\n   PrestaShop Version Minimum Recommended Not compatible     1.6.1.x PHP 5.2 PHP 7.1 PHP 7.2+   1.7.0 ~ 1.7.3 PHP 5.4 PHP 7.1 PHP 7.2+   1.7.4 PHP 5.6 PHP 7.1 PHP 7.2+   1.7.5 PHP 5.6 PHP 7.2 PHP 7.3+    MySQL: 5.0 minimum, 5.6 or later recommended.\n Server RAM: The more the better. We recommend setting the memory allocation per script (memory_limit) to a minimum of 256M.\n  PrestaShop can also work with Microsoft’s IIS Web server 6.0 or later, and nginx 1.0 or later.\nPHP requirements PrestaShop needs a few additions to PHP and MySQL in order to fully work. Make sure that your PHP configuration has the following settings and tools:\nExtensions  CURL. The Client URL extension is used to download remote resources like modules and localization packages. DOM. The DOM extension is needed to parse XML documents. PrestaShop uses it for various functionalities, like the Store Locator. It is also used by some modules, as well as the pear_xml_parse library. Fileinfo. The File information extension is used to find out the file type of uploaded files. GD. The GD extension is used to create thumbnails for the images that you upload. Intl. The Internationalization extension is used to display localized data, such as amounts in different currencies. Zip. The Zip extension is used to expand compressed files such as modules and localization packages.  Settings  allow_url_fopen enabled. This directive enables PrestaShop to access remote files, which is an essential part of the payment process, among others things. It is therefore imperative to have it set to On.  Here is a section of the php.ini file (the configuration file for PHP):\nextension = php_mysql.dll extension = php_gd2.dll allow_url_fopen = On allow_url_include = Off  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/templates/templates-layouts/",
	"title": "Templates &amp; layouts",
	"tags": [],
	"description": "",
	"content": " Templates \u0026amp; layouts PrestaShop template file are based on the Smarty 3 template engine.\nAll template files must be stored in the theme\u0026rsquo;s templates/ subfolder. For instance, the default theme has its template files in the following folder: /themes/classic/templates.\nDirectory structure Templates are then split between various subfolders.\n /_partials/ Code shared accross the whole site like header, footer or notifications. /catalog/ Product page, product/brand/supplier listing, search result and such. /checkout/ Cart, delivery options, payement options, order confirmations and such. /cms/ All the static content: contact, sitemap, CMS pages and such. /customer/ Everything about the customer\u0026rsquo;s account and its data. /errors/ All the error templates: not found, server error, forbidden and such. /layouts/ The theme layouts: 1, 2 or more columns, full width, everything is possible.  Template files should be written so that a single .tpl can generate a whole HTML page \u0026ndash; unless they are inside a _partials folder or subfolder (see our coding standard, linked from the Prologue chapter of this documentation).\nTemplates We make a clear difference between templates and layout.\n A template extends a layout. The layout hold the global organization of the page A template a specify to a feature: the product page for example  There are many templates is a PrestaShop theme, the main ones includes:\n index.tpl for the home page catalog/product.tpl for the product page catalog/listing/product-list.tpl for any product list page checkout/cart.tpl for the detailed cart checkout/checkout.tpl for the checkout process  Specific templates If you\u0026rsquo;re working on a big store in many languages you may need to change the layout of the page depending on the language.\nFor example you want a different product page for american customers and japanese ones. In this case you simply have to create new template product.tpl and place it in the right folder.\nWhen searching for a template, PrestaShop will check many location to determine which file should be used. It make it very easy to have different template for a given locale or a specific entity id.\nWith the product page, the core will check the following locations (in order) and return the first template found:\nExample with a product with ID = 3 and locale = en-US\n en-US/catalog/product-3.tpl catalog/product-3.tpl en/US/catalog/listing/product.tpl catalog/listing/product.tpl  Another example with category template for the category with ID = 9 and locale = en-US.\n en-US/catalog/listing/category-9.tpl catalog/listing/category-9.tpl en/US/catalog/listing/category.tpl catalog/listing/category.tpl en-US/catalog/listing/product-list.tpl catalog/listing/product-list.tpl  This feature is mostly made for developer working on a custom template for a customer.\nLayouts The layout is the organisation of the page, the way in which the parts of your design are arranged. The typical example is the sidebar: is there a sidebar on your category page or is your product listing is taking the whole space.\nWith PrestaShop 1.7, user are given the ability to change the layout of each page independantly. As a template developer, it\u0026rsquo;s your role to ensure your theme is compatible.\nWhat\u0026rsquo;s in a layout file The layout is the very top level of the template inheritance tree. Basically it hold the opening and closing \u0026lt;html\u0026gt; tags.\nTypical layout files look like the following snippet. This one is a full one\nRemember to define as many blocks as possible.\n \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;{$language.iso_code}\u0026quot;\u0026gt; \u0026lt;head\u0026gt; {block name='head'} {include file='_partials/head.tpl'} {/block} \u0026lt;/head\u0026gt; \u0026lt;body id=\u0026quot;{$page.page_name}\u0026quot; class=\u0026quot;{$page.body_classes|classnames}\u0026quot;\u0026gt; {hook h='displayAfterBodyOpeningTag'} \u0026lt;main\u0026gt; \u0026lt;header id=\u0026quot;header\u0026quot;\u0026gt; {block name='header'} {include file='_partials/header.tpl'} {/block} \u0026lt;/header\u0026gt; \u0026lt;section id=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; {block name='breadcrumb'} {include file='_partials/breadcrumb.tpl'} {/block} {block name=\u0026quot;left_column\u0026quot;} \u0026lt;div id=\u0026quot;left-column\u0026quot;\u0026gt; {if $page.page_name == 'product'} {hook h='displayLeftColumnProduct'} {else} {hook h=\u0026quot;displayLeftColumn\u0026quot;} {/if} \u0026lt;/div\u0026gt; {/block} {block name=\u0026quot;content_wrapper\u0026quot;} \u0026lt;div id=\u0026quot;content-wrapper\u0026quot;\u0026gt; {block name=\u0026quot;content\u0026quot;} \u0026lt;p\u0026gt;Hello world! This is HTML5 Boilerplate.\u0026lt;/p\u0026gt; {/block} \u0026lt;/div\u0026gt; {/block} \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;footer id=\u0026quot;footer\u0026quot;\u0026gt; {block name=\u0026quot;footer\u0026quot;} {include file=\u0026quot;_partials/footer.tpl\u0026quot;} {/block} \u0026lt;/footer\u0026gt; \u0026lt;/main\u0026gt; {hook h='displayBeforeBodyClosingTag'} {block name='javascript_bottom'} {include file=\u0026quot;_partials/javascript.tpl\u0026quot; javascript=$javascript.bottom} {/block} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  From there, each part of the theme will do its job and replace content inside these bricks, keeping the same organization.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/templating-with-twig/",
	"title": "Templating with Twig",
	"tags": [],
	"description": "",
	"content": " Templating with Twig This is mostly the easy part. Legacy pages use Smarty while modern pages use Twig. These templating engines are actually similar in many ways.\nFor instance, this is a legacy template:\n\u0026lt;span class=\u0026quot;employee_avatar_small\u0026quot;\u0026gt; \u0026lt;img class=\u0026quot;img\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;{$employee_image}\u0026quot; /\u0026gt; \u0026lt;/span\u0026gt; {$employee_name}  All of the legacy templates are located in the admin-dev/themes/default/template/controller folder\n \u0026hellip; and here is a possible migration of it to Twig:\n\u0026lt;span class=\u0026quot;employee_avatar_small\u0026quot;\u0026gt; \u0026lt;img class=\u0026quot;img\u0026quot; alt=\u0026quot;{{ employee.name }}\u0026quot; src=\u0026quot;{{ employee.image }}\u0026quot; /\u0026gt; \u0026lt;/span\u0026gt; {{ employee.name }}  The syntax of both engines is really similar. Find out more about Twig by reading the Twig documentation.\nHelpers All our custom helpers have been ported from Smarty to Twig:\n   Smarty Twig     { l s='foo' d='domain' } {{ 'foo'|trans({}, 'domain') }}    { hook h='hookName' } {{ renderhook('hookName') }}   {$link-\u0026gt;getAdminLink('AdminAccess')} {{ getAdminLink('LegacyControllerName') }}    Macros Macros/functions are specific to the modern pages to help with recurrent blocks:\n form_label_tooltip(name, tooltip, placement) Renders a form label (by name) with an informational tooltip on rollover. check(variable) Checks if a variable is defined and not empty. tooltip(text, icon, position) Renders a tooltip with information in roll hover (doesn\u0026rsquo;t render a label). infotip(text)\nwarningtip(text) Renders information and warning tips (more like alert messages). label_with_help(label, help) Renders a label with a help box beside it.   Bootstrap Legacy templates use Bootstrap 3 while modern pages use the PrestaShop UI Kit that is based on Bootstrap 4. This means that you\u0026rsquo;ll need to update some markup (especially CSS classes).\nIf you aren\u0026rsquo;t familiar with Bootstrap 4, check out their article on migrating to v4, which explains the major changes from v3 to v4.\n jQuery Since we use the jQuery version that is bundled with Bootstrap, old pages use jQuery 1.11 and new ones jQuery 3.3. In addition to this, javascript from old pages was included as separate files without any compilation, while new pages we use modules which are compiled and bundled using Webpack.\nDepending on the page you are migrating, this task may be straightforward or more complex.\nTranslations Be careful when copying translatable wordings, you must use the exact same strings in order to keep the translation working.\n Example:\n// legacy controller $this-\u0026gt;trans('Before activating the webservice, you must be sure to: ', array(), 'Admin.Advparameters.Help')  \u0026hellip; must become:\n{{ 'Before activating the webservice, you must be sure to: '|trans({}, 'Admin.Advparameters.Help') }}  Manage modern assets with Webpack PrestaShop uses Webpack to build and bundle static assets in PrestaShop, like Javascript and stylesheets.\nThe root folder for the modern theme is /admin-dev/themes/new-theme.\n To find out more, read How to compile assets.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/distribution/testing/",
	"title": "Testing",
	"tags": [],
	"description": "",
	"content": " Testing What makes a theme valid When you\u0026rsquo;re trying to select a theme in the backoffice, PrestaShop will test if your theme is valid. It won\u0026rsquo;t install if the theme isn\u0026rsquo;t valid.\nA theme is valid if it contains some files and some configuration keys.\nRequired files Here is the complete list of required files:\n preview.png config/theme.yml assets/js/theme.js assets/css/theme.css templates/_partials/form-field.tpl templates/catalog/product.tpl templates/catalog/listing/product-list.tpl templates/checkout/cart.tpl templates/checkout/checkout.tpl templates/cms/category.tpl templates/cms/page.tpl templates/customer/address.tpl templates/customer/addresses.tpl templates/customer/guest-tracking.tpl templates/customer/guest-login.tpl templates/customer/history.tpl templates/customer/identity.tpl templates/index.tpl templates/customer/my-account.tpl templates/checkout/order-confirmation.tpl templates/customer/order-detail.tpl templates/customer/order-follow.tpl templates/customer/order-return.tpl templates/customer/order-slip.tpl templates/errors/404.tpl templates/errors/forbidden.tpl templates/checkout/cart-empty.tpl templates/cms/sitemap.tpl templates/cms/stores.tpl templates/customer/authentication.tpl templates/customer/registration.tpl templates/contact.tpl  Required configuration keys Your configuration file config/theme.yml (read more about this file) must details some configuration keys.\nHere is the list of keys PrestaShop will look for. The dot represent the nesting.\n name display_name version author.name meta.compatibility.from meta.available_layouts global_settings.image_types.cart_default global_settings.image_types.small_default global_settings.image_types.medium_default global_settings.image_types.large_default global_settings.image_types.home_default global_settings.image_types.category_default theme_settings.default_layout  How to use PrestaShop Automated Test Suite PrestaShop 1.7 comes with an automated test suite used to develop Classic. You should use them to ensure your theme is fully compatible with PrestaShop\u0026rsquo;s feature.\nYou need nodejs, npm, java and Chrome installed on your machine.\nThe test suite is destructive. Do not run it in production.\n Prepare your store for the tests:\n cd tests/Selenium npm install Install PrestaShop, preferably with 2 languages (though tests should ideally be language and settings agnostic) Copy tests/Selenium/settings.dist.js to tests/Selenium/settings.js and customize according to your setup Once PrestaShop is installed, run php prepare-shop.php. WARNING: never do this on a production shop because it will edit existing products without asking for your permission.  The test suite uses Selenium,\nwebdriver.io allows you to perform almost any action a browser would do using a fluent promise-based API. You will need some familiarity with promises to make the most of the tool.\nAdd a new test If you want to create a custom test, there are a few things you should know. Tests are contained in the specs subfolder.\nUntil we can do more documentation, please have a look at the existing tests and at the WebDriver.io API.\nIf you need to add general purpose helper functions for your tests, they should go in commands/init.js.\nIf you need fixtures for your tests, please use the ones from the default installation or provide a script that installs them.\nDo not hard-code things such as product ids in your tests: instead abstract them behind a name and put them in the fixtures.js file.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/toggle/",
	"title": "ToggleColumn reference",
	"tags": [],
	"description": "",
	"content": " ToggleColumn Type  This ToggleColumn is used to display booleans, it will display an icon instead of the value. If user clicks on it, this triggers a toggle of the boolean value.\nAvailable options    Properties Type Expected value     field string required Record field name which column displays.   primary_field string required Record field name which column displays.   route string required Route used to generated link url.   route_param_name string required Parameter name used by the route to generate the url.    Example usage use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\ToggleColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $toggleColumn = new ToggleColumn('active'); $toggleColumn-\u0026gt;setName('Enabled'); $toggleColumn-\u0026gt;setOptions([ 'field' =\u0026gt; 'active', 'primary_field' =\u0026gt; 'id_customer', 'route' =\u0026gt; 'admin_customers_toggle_status', 'route_param_name' =\u0026gt; 'customerId', ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($toggleColumn);  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/internationalization/translation/",
	"title": "Translation",
	"tags": [],
	"description": "",
	"content": " Translation One of the main needs for localization is translating wordings to the another language. PrestaShop is capable of translating wordings to any language, as long as it has the appropriate translations available.\nPrestaShop 1.7 features a new translation system, based on the Symfony Translation component.\nThis system is only available for Core and Native modules.\nSee here for 3rd party modules.\n Overview The translation system is less complicated than it can seem to be at first glance. To start working with it, you should get familiarized with the following concepts:\n Wording (Also called \u0026ldquo;message\u0026rdquo;). An abstraction of a phrase that will be translated to any given language. It\u0026rsquo;s usually written as plain English, in order to make it easier to understand. Translation Domain A group of wordings. Organizing messages in groups allows for an improved contextualization of wordings (Read more). Message Catalogue A collection of wordings in a given language. Each supported language has its own catalogue which contains translations for all the wordings in that language. Default Message Catalogue The base message catalogue on which the translated message catalogues are based. This is where we add new wordings. Catalogue Resource A data source containing a catalogue. It can be an in-memory array, a database, a group of files\u0026hellip; Translator A service that allows translating wordings to a given language.  How to translate wordings This section provides an quick reference on how to use the Translator. For more information, read Symfony\u0026rsquo;s documentation on Using the Translator.\n PHP files To translate wordings in PHP files, you first need an instance of the Translator service (explained below). Then, you can use the trans() method to translate your wording:\necho $translator-\u0026gt;trans('This product is no longer available.', [], 'Shop.Notifications.Error');  The trans() method takes three arguments:\n The wording to translate. Keep in mind that it has to be exactly the same as the one in the default catalogue, or the translation won\u0026rsquo;t work. An array of replacements, if any (Learn more here). The translation domain for that wording.  Inside controllers Controllers include a helper method named trans() that calls the translator internally:\n$this-\u0026gt;trans('This product is no longer available.', [], 'Shop.Notifications.Error');  Outside controllers If you are outside a controller, and after careful consideration you think you absolutely need some stuff translated, then you can add it as a dependency of your class:\n// SomeService.php namespace PrestaShop\\PrestaShop\\Core\\Foo\\Bar; use Symfony\\Component\\Translation\\TranslatorInterface; class SomeService { private $translator; public function __construct(TranslatorInterface $translator) { $this-\u0026gt;translator = $translator; } }  Then, inject it into your service using the Dependency Container:\n# services.yml prestashop.core.foo.bar.some_service: class: 'PrestaShop\\PrestaShop\\Core\\Foo\\Bar\\SomeService' arguments: - '@translator'  And finally, use the translator at will:\n// SomeService.php $this-\u0026gt;translator-\u0026gt;trans('This product is no longer available.', [], 'Shop.Notifications.Error');  Smarty templates In .tpl files, use the l (lower case \u0026ldquo;L\u0026rdquo;) macro:\n\u0026lt;div\u0026gt;{l s='This product is no longer available.' d='Shop.Notifications.Error'}\u0026lt;/div\u0026gt;  If you have have replacements to peform in your wording, then there are two options:\n Anonymous placeholders (eg. %s)\n\u0026lt;div\u0026gt;{l s='List of products by supplier %s' sprintf=[$supplier.name] d='Shop.Theme.Catalog'}\u0026lt;/div\u0026gt;  Named placeholders (eg. %my_placeholder%)\n\u0026lt;div\u0026gt;{l s='There are %products_count% items in your cart.' sprintf=['%products_count%' =\u0026gt; $cart.products_count] d='Shop.Theme.Checkout'}\u0026lt;/div\u0026gt;   Twig templates In .twig files, you can use the trans filter from Twig:\n\u0026lt;div\u0026gt;{{ 'Sort by'|trans({}, 'Admin.Actions') }}\u0026lt;/div\u0026gt;  For information on more advanced features, head on to the Official documentation.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/internationalization/translation/translation-domains/",
	"title": "Translation Domains",
	"tags": [],
	"description": "",
	"content": " Translation Domains Sometimes wordings may seem vague when seen out of context. For example, \u0026ldquo;Delete\u0026rdquo;. Just like that, we can imagine what is it used for, but we don\u0026rsquo;t really have much information about it. What are we deleting? From a translator standpoint, this is very hard, because not only do we not know where it\u0026rsquo;s supposed to be used, but it could be used in several places, with different meanings.\nDepending on the language, it will be more or less easy to translate it just vaguely enough so that the phrase makes sense in every one of those different contexts.\nTranslation Domains bring an answer to this problem. By allowing to separate wordings in contextual groups, if the same wording appears in more than one domain, then it can be have a different translation in each one of them. This way, translators are better able to adapt the meaning of each wording to the specific context in which they appear.\nThis feature was originally described in this blog post and has been updated here.\n Understanding the Domains\u0026rsquo; structure Domains have been organized in 5 major sections: Shop, Admin, Modules, Email and Install. All the PrestaShop translatable strings are spread across these 5 domains, according to the following definition:\n   Domain Description     Admin Back office and content aimed at merchants   Email Emails sent from the shop   Install Content from the installation wizard   Modules Native modules   Shop Default theme, front office and content aimed at customers    These are called \u0026ldquo;first-level\u0026rdquo; domains. Domains are further broken down in at least two and up to three levels or \u0026ldquo;subdomains\u0026rdquo;, for example:\nShop.Theme.Checkout  There are two exceptions to this rule: Installer and messages have only one level. The latter contains all wordings that did not have any domain assigned at the time of release of 1.7.0 and thus have been kept for backwards compatibility.\nIn the end a domain like Shop.Theme.Checkout corresponds to a specific folder in Crowdin, where you\u0026rsquo;ll find all the strings from the default theme, related to the checkout process (funnel, shopping cart, etc.).\nDomains are stored as XLIFF files in PrestaShop, with one file per subdomain. See the full list here.\n Read below for more details on how we organized domains and what they contain.\nInstall This is the easiest one, there\u0026rsquo;s only one domain: Install. It\u0026rsquo;s the content from the installation wizard.\nModules For modules, it\u0026rsquo;s rather simple. We still have a \u0026ldquo;Modules\u0026rdquo; folder (first-level), which contains either a file or folder for each module: this the second level. The third level is here to say whether the string appears in the front office (Shop) or the back office (Admin).\nShop For the front office, it\u0026rsquo;s a little bit more complex. Any string related to the front office goes into the Shop domain. That\u0026rsquo;s the first level. Then it\u0026rsquo;s split in various sections, mostly functional. Here\u0026rsquo;s how it works for the second level:\n   Domain Strings     Emails The emails sent from the shop to a customer (order confirmation, account creation, etc.)   PDF The PDFs sent to a customer (invoice, delivery slip, credit slip, etc.)   Theme The strings attached to the default theme \u0026ldquo;Classic\u0026rdquo;.   Demo The content from the demo products and demo pages (\u0026ldquo;About us\u0026rdquo;, \u0026ldquo;Terms and conditions of use\u0026rdquo;, etc.). If you remove the de content, you shouldn\u0026rsquo;t need any of these strings.   Navigation Most of the meta titles and page names from the default theme.   Notifications The warning, error or success messages that can appear in the shop.   Forms The forms available in the shop (\u0026ldquo;Contact us\u0026rdquo; page, addresses, etc.)    Each of this domain can be further divided to provide even more context.\nShop.Theme    Domain Strings     Catalog All the strings needed to display your catalog (product page, categories, etc.).   Customer Account Anything related to the management of a customer account and the orders.   Checkout Everything related to the act of buying - i.e. if you\u0026rsquo;re in catalog mode, you shouldn\u0026rsquo;t need these strings.   Actions All the call-to-actions, buttons or links that you find on the shop and that aren\u0026rsquo;t specific to a page or context.    Shop.Demo    Domain Strings     Catalog Content for demo product and categories (descriptions).   Pages Content inside the demo pages (formerly known as CMS pages).    Shop.Notifications Notifications are split according to their level of alert: Info, Error, Warning or Success. They are the messages showing up on your shop.\nShop.Forms    Domain Strings     Labels The form labels   Errors Its corresponding errors (distinct from the theme errors, these one are specific to the form and will display inline)   Help Hints to help users fill in the form (special characters, etc.).    Admin Now, let\u0026rsquo;s see how things are organized for the strings from the back office.\n   Domain Strings     Actions All the call-to-actions, buttons or links that you find on the back office, and that are quite generic (\u0026ldquo;Save\u0026rdquo;, \u0026ldquo;Add \u0026ldquo;Delete\u0026rdquo;, etc.). Again, if it applies to one page and one functional domain only, then this is not the domain to use.   Advanced Parameters Content from the \u0026ldquo;Advanced Settings\u0026rdquo; section. Note the lower case \u0026ldquo;p\u0026rdquo; in Admin.Advparameters   Catalog Strings from the \u0026ldquo;Catalog\u0026rdquo; section.   Dashboard Strings from the Dashboard page.   Design Strings from the \u0026ldquo;Design\u0026rdquo; section.   Global Anything which doesn\u0026rsquo;t fall in the below categories, but is still related to the back office, that can be found in a lot occurrences (\u0026ldquo;Max\u0026rdquo;, \u0026ldquo;Settings\u0026rdquo;, \u0026ldquo;Enabled\u0026rdquo;, etc.) AND in different parts of the software too. If a string is specific to a given page, then it shouldn\u0026rsquo;t be in the global domain.   International Strings form the \u0026ldquo;International\u0026rdquo; section.   Login Strings from the Login screen.   Modules Strings from the Modules page.   Navigation The structure shared by all pages of the back office.   Notifications All the warning, error or success messages that can appear in the back office.They must be general notification applying to any part of the software (e.g. \u0026ldquo;Settings updated\u0026rdquo;). In case you have a specific notification (\u0026ldquo;Friendly URLs are currently disabled\u0026rdquo;), then it should fall under the notification subdomain for its functional domain (here Admin.Catalog.Notification).   Orders \u0026amp; Customers Strings for the \u0026ldquo;Orders\u0026rdquo;, \u0026ldquo;Customers\u0026rdquo; and \u0026ldquo;Customer Service\u0026rdquo; sections from the back office. Note the lower case \u0026ldquo;c\u0026rdquo; in Admin.Orderscustomers.   Payment Strings from the \u0026ldquo;Payment\u0026rdquo; section.   Shipping Strings from the \u0026ldquo;Shipping\u0026rdquo; section.   Shop Parameters Content from the \u0026ldquo;Shop Parameters\u0026rdquo; section. Note the lower case \u0026ldquo;p\u0026rdquo; in Admin.Shopparameters.   Stats Content from the \u0026ldquo;Stats\u0026rdquo; section.    "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/understanding-src-folder/",
	"title": "Understanding the &#34;src&#34; folder",
	"tags": [],
	"description": "",
	"content": " Understanding the \u0026ldquo;src\u0026rdquo; folder The main idea when doing the 1.7 release was to use Symfony as a replacement for our own PrestaShop framework.\nIn \u0026ldquo;src\u0026rdquo; folder you\u0026rsquo;ll find 3 main folders with different purposes:\n Core: the refactored classes or business logic extraction for PrestaShop 1.7; Adapter: the classes that still depends on legacy framework (Context, Dispatcher or constants for instance); PrestaShopBundle: the classes that acts as a glue between PrestaShop classes and Symfony  Core . ├── Addon ├── Checkout ├── Cldr ├── CMS ├── Configuration ├── ConfigurationInterface.php ├── ContainerBuilder.php ├── Crypto ├── Email ├── Feature ├── Form ├── Foundation ├── Image ├── Module ├── Payment ├── Product ├── Repository ├── Search ├── Shop └── Stock  You should add/create a file in \u0026ldquo;Core\u0026rdquo; namespace if:\n It doesn\u0026rsquo;t rely on Context, Dispatcher, legacy constants, Service Container You\u0026rsquo;re adding a new contract (interface) This class may be used outside of PrestaShop \u0026ldquo;CMS\u0026rdquo; usage  Adapter This folder contains all adapters we use for the migration of Back Office, using the Adapter pattern strategy. The idea is to avoid to have hard bound between the PrestaShopBundle and the legacy back office, so that the legacy classes can eventually be deleted.\n. ├── Addons ├── AddressFactory.php ├── Admin ├── Assets ├── Attribute ├── BestSales ├── Cache ├── CacheManager.php ├── Carrier ├── Cart ├── Category ├── ClassLang.php ├── CombinationDataProvider.php ├── Configuration ├── Configuration.php ├── CoreException.php ├── Country ├── Currency ├── Customer ├── Database.php ├── Debug ├── EntityMapper.php ├── EntityMetaDataRetriever.php ├── Feature ├── GeneralConfiguration.php ├── Group ├── Hook ├── HookManager.php ├── Hosting ├── Image ├── ImageManager.php ├── LegacyContext.php ├── LegacyHookSubscriber.php ├── LegacyLogger.php ├── Mail ├── Manufacturer ├── Media ├── Module ├── NewProducts ├── ObjectPresenter.php ├── OptionalFeatures ├── Order ├── Pack ├── PricesDrop ├── Product ├── Requirement ├── Search ├── Security ├── ServiceLocator.php ├── Shop ├── Smarty ├── StockManager.php ├── Supplier ├── SymfonyContainer.php ├── System ├── Tax ├── Tools.php ├── Upload ├── Validate.php └── Warehouse  You should create file here only if you have an hard bound with legacy framework when migrating to Symfony, and you can\u0026rsquo;t refactor it easily. For instance, take a look at PhpParameters class in \u0026ldquo;Configuration\u0026rdquo;: this class doesn\u0026rsquo;t rely on Context or specific constants but on the configuration files of PrestaShop legacy framework. As these files are shared by both front and back, we couldn\u0026rsquo;t manage to refactor it and remove it now.\nPrestaShopBundle The bundle contains the glue between Symfony framework and PrestaShop:\n. ├── Api ├── Cache ├── Command ├── Component ├── Controller ├── DataCollector ├── DependencyInjection ├── Entity ├── Event ├── EventListener ├── Exception ├── Form ├── Install ├── Kernel ├── Model ├── PrestaShopBundle.php ├── Resources ├── Security ├── Service ├── Translation ├── Twig └── Utils  Regarding the actual tree, we can already see some mistakes. The following folders should be moved to Core:\n Api Component Exception Install Model Service Translation Utils  An ideal structure for this namespace could be the following:\n. ├── CacheWarmer // Actions on Symfony cache clear ├── Command // Commands available using \u0026quot;bin/console\u0026quot; ├── Controller // The HTTP layer ├── DataCollector // Specific collectors for PrestaShop in debug toolbar (like hooks) ├── DependencyInjection // Specific compiler passes for PrestaShop ├── Entity // Classes mapped to Doctrine ORM (Lang for instance) ├── EventListener (may contain \u0026quot;Event\u0026quot;) ├── Form // Symfony forms and extensions ├── Kernel // Very specific tasks to manage at PrestaShop Application boot ├── PrestaShopBundle.php ├── Resources // Contains services definition and Twig templates ├── Security // Glue between Security Bundle and PrestaShop Autorization/Authentification └── Twig // Every filter and functions available in PrestaShop back office  If you think your new file doesn\u0026rsquo;t belong to one of those folders, you should probably consider adding it to Core or Adapter folders.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/actions-reference/",
	"title": "Actions reference",
	"tags": [],
	"description": "",
	"content": " Grid Actions reference Grid Actions are tasks available for your grid for common actions.\nSimpleGridAction This action allow to add a label to the Grid Actions block. Then you can manage the behavior when clicking on this label using Javascript for exemple.\n\u0026ldquo;Refresh list\u0026rdquo;, \u0026ldquo;Show SQL query\u0026rdquo; and \u0026ldquo;Export to SQL Manager\u0026rdquo; actions are created using SimpleGridAction actions.\n    Properties Expected value     Id A string   Type simple   Name A string   Icon A string    LinkGridAction This action will create a labelized link into the Grid actions block.\n   Properties Expected value(s)     Id A string   Type link   Name A string   Icon A string   Options route    route_params   Requirements route   Defaults route_params =\u0026gt; []   Allowed Types route (string)    route_params (array)    SubmitGridAction This action will create a submittable label into the Grid actions block.\n   Properties Expected value(s)     Id A string   Type submit   Name A string   Icon A string   Options submit_route    submit_method    confirm_message   Requirements submit_route   Defaults submit_method =\u0026gt; \u0026lsquo;POST\u0026rsquo;    confirm_message =\u0026gt; null   Allowed Types submit_route (string)    confirm_message (string or null)   Allowed Values submit_method =\u0026gt; (\u0026lsquo;POST\u0026rsquo; or \u0026lsquo;GET\u0026rsquo;)    Row Actions reference Grid Row Actions are tasks available in a Grid row when defining a column that supports tasks.\nLinkRowAction Very similar to the LinkGridAction, but capable to manage User accesses on the content.\n   Properties Expected value(s)     Id A string   Type link   Name A string   Icon A string   Options route    route_param_name    route_param_field    confirm_message    accessibility_checker   Requirements route    route_param_name    route_param_field   Defaults confirm_message =\u0026gt; \u0026ldquo;    accessibility_checker =\u0026gt; null   Allowed Types route (string)    route_param_name (string)    route_param_field (string)    confirm_message (string)    accessibility_checker (callable or null or instance of AccessibilityCheckerInterface)    SubmitRowAction Very similar to the SubmitGridAction, but capable to manage User accesses on the content.\n   Properties Expected value(s)     Id A string   Type submit   Name A string   Icon A string   Options route    route_param_name    route_param_field    confirm_message    accessibility_checker    method   Requirements route    route_param_name    route_param_field   Defaults confirm_message =\u0026gt; \u0026ldquo;    accessibility_checker =\u0026gt; null    method =\u0026gt; \u0026lsquo;POST\u0026rsquo;   Allowed Types route (string)    route_param_name (string)    route_param_field (string)    method (string)    confirm_message (string)    accessibility_checker (callable or null or instance of AccessibilityCheckerInterface)    DeleteCustomerRowAction This row action will delete the Customer in Sell \u0026gt; Customers page.\n   Properties Expected value(s)     Id A string   Type delete_customer   Name A string   Icon A string   Options customer_id_field    customer_delete_route   Requirements customer_id_field    customer_delete_route   Defaults customer_id_field (string)    customer_delete_route =\u0026gt; (string)    DeleteCategoryRowAction This row action will delete the Category in Catalog \u0026gt; Categories page.\n   Properties Expected value(s)     Id A string   Type delete_category   Name A string   Icon A string   Options category_id_field    category_delete_route   Requirements category_id_field    category_delete_route   Defaults category_id_field (string)    category_delete_route =\u0026gt; (string)    Use case exemple \u0026lt;?php // /modules/my-module/src/Grid/MyGridDefinitionFactory.php namespace MyModule\\Grid; use PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\AbstractGridDefinitionFactory; use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\GridActionCollection; use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Type\\SubmitGridAction; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\ActionColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Row\\RowActionCollection; use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Row\\Type\\LinkRowAction; use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Row\\Type\\SubmitRowAction; /** * How to define the Grid actions? * You can adapt this exemple or look at the existing ones * in PrestaShop Core. */ class MyGridDefinitionFactory extends AbstractGridDefinition { /** * {@inheritdoc} */ protected function getGridActions() { return (new GridActionCollection()) -\u0026gt;add( (new SubmitGridAction('delete_all_email_logs')) -\u0026gt;setName('Erase all') -\u0026gt;setIcon('delete') -\u0026gt;setOptions([ 'submit_route' =\u0026gt; 'admin_logs_delete_all', 'confirm_message' =\u0026gt; 'Are you sure?', ]) ) ; } /** * {@inheritdoc} */ protected function getColumns() { return (new ColumnCollection()) -\u0026gt;add( (new ActionColumn('actions')) -\u0026gt;setName($this-\u0026gt;trans('Actions', [], 'Admin.Global')) -\u0026gt;setOptions([ 'actions' =\u0026gt; (new RowActionCollection()) -\u0026gt;add( (new LinkRowAction('edit')) -\u0026gt;setName('Edit') -\u0026gt;setIcon('edit') -\u0026gt;setOptions([ 'route' =\u0026gt; 'edit_stuff', 'route_param_name' =\u0026gt; 'stuffId', 'route_param_field' =\u0026gt; 'stuffId', ]) ) -\u0026gt;add( (new SubmitRowAction('delete')) -\u0026gt;setName('Delete') -\u0026gt;setIcon('delete') -\u0026gt;setOptions([ 'confirm_message' =\u0026gt; 'Delete selected item?', 'route' =\u0026gt; 'delete_stuff', 'route_param_name' =\u0026gt; 'stuffId', 'route_param_field' =\u0026gt; 'stuffId', ]) ) ]) ) ; } }  You need to create a custom Bulk Action? We got you covered!\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/bulk-actions-reference/",
	"title": "Bulk Actions reference",
	"tags": [],
	"description": "",
	"content": " Bulk Actions reference You can define actions for every selected rows of your grid. PrestaShop already comes with a list of common bulk actions that you can use in your own Grids.\nSubmitBulkAction This action will submit the data of your rows into a specific route.\n   Properties Expected value(s)     Type submit   Requirements submit_route   Defaults confirm_message =\u0026gt; null    submit_method =\u0026gt; \u0026ldquo;POST\u0026rdquo;   Allowed Types submit_route (string)    confirm_message (string or null)   Allowed Values submit_method (\u0026ldquo;POST\u0026rdquo; or \u0026ldquo;GET\u0026rdquo;)    DeleteCategoriesBulkAction This action will delete the selected Categories in Catalog \u0026gt; Categories page.\n   Properties Expected value(s)     Type delete_categories   Requirements categories_bulk_delete_route   Allowed Types submitcategories_bulk_delete_route_route (string)    DeleteCustomersBulkAction This bulk action will delete the selected Customers in Sell \u0026gt; Customers page.\n   Properties Expected value(s)     Type delete_customers   Requirements customers_bulk_delete_route   Allowed Types customers_bulk_delete_route (string)    Use case exemple \u0026lt;?php // /modules/my-module/src/Grid/MyGridDefinitionFactory.php namespace MyModule\\Grid; use PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\AbstractGridDefinitionFactory; use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Bulk\\Type\\SubmitBulkAction; use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Bulk\\BulkActionCollection; /** * How to define the Grid bulk actions? * You can adapt this exemple or look at the existing ones * in PrestaShop Core. */ class MyGridDefinitionFactory extends AbstractGridDefinition { /** * {@inheritdoc} */ protected function getBulkActions() { return (new BulkActionCollection()) -\u0026gt;add( (new SubmitBulkAction('enable_selection')) -\u0026gt;setName('Enable selection') -\u0026gt;setOptions([ 'submit_route' =\u0026gt; 'submit_stuff', ]) ) ; } }  You need to create a custom Bulk Action? We got you covered!\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/naming-conventions/",
	"title": "Naming conventions",
	"tags": [],
	"description": "",
	"content": " Conventions As with Coding standards naming consistency is very important in PrestaShop, thus there are conventions that every PrestaShop contributor should follow.\nNaming conventions At the moment naming conventions strictly applies for Back Office migration only.\n Controllers \u0026amp; actions PrestaShop controllers follow these naming conventions:\n Prefix controller with resource name in singular form (e.g. CustomerController, ProductController); Prefix index action with index. For Object controllers (e.g. CustomerController) it\u0026rsquo;s normally page with list of objects (e.g. Customers, Products) and for Configuration controllers (e.g. PerformanceController) it\u0026rsquo;s page with configuration form (e.g. Caching configuration, CCC configuration). Action name should be clear and concise (e.g. editAction(), savePrivateNoteAction() are good examples, but formAction() or processAction() is not and thus should be avoided).  We have some standard action names: - indexAction : display the listing - createAction : show language creation form page and handle its submit - editAction : show language edit form page and handle its submit - deleteAction : delete an item\nFor a complete example see code below.\n// CustomerController.php namespace PrestaShopBundle\\Controller\\Admin\\Sell\\Customer; // Controller name is prefixed with Customer in singular form class CustomerController { // Index page which is opened when // user clicks \u0026quot;Improve \u0026gt; Sell \u0026gt; Customers\u0026quot; in side menu. // It shows list of customers and KPIs. public function indexAction() { } // Customer Edit page which is opened when // user clicks \u0026quot;Edit\u0026quot; action on selected customer. // It shows customer form with data that can be edited. public function editAction($customerId, Request $request) { } // Deletes given customer. // Does not show page, but returns flash message with redirect instead. public function deleteAction($customerId, Request $request) { } // Transforms guest customer (customer without password) // to customer with password. // Does not show page, but returns flash message with redirect instead. public function transformGuestToCustomerAction($customerId, Request $request) { } // Saves private note for customer, that can only be seen by admin in Back Office. // Does not show page, but returns flash message with redirect instead. public function savePrivateNoteAction($customerId, Request $request) { } // Toggle the status of given customer. // Does not show page, but returns flash message with redirect instead. public function toggleStatusAction($customerId) { } }  Templates PrestaShop templates follow these naming conventions:\n Template name should match controller\u0026rsquo;s action name without action suffix. For example, if you have CustomerController:viewAction() action, then your template name should be view.html.twig.  // CustomerController.php namespace PrestaShopBundle\\Controller\\Admin\\Sell\\Customer; use PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController as AbstractAdminController; class CustomerController extends AbstractAdminController { // Our action name is \u0026quot;view\u0026quot;, thus our // template name is \u0026quot;view.html.twig\u0026quot;. public function viewAction() { $this-\u0026gt;render('@PrestaShop/Admin/Sell/Customer/view.html.twig'); } }  For a default page, you should be following our standard action names. Applying this rule, this means you should have matching template names: - index.html.twig - create.html.twig - edit.html.twig - delete.html.twig\nRoutes and paths PrestaShop routes follow admin_{resources}_{action} naming structure and rules for it are:\n {resources} (object) name should be in plural form (e.g. customers, products, orders). {action} name should match controller\u0026rsquo;s action name. Route should define methods that it responds to (e.g. GET, POST). Suffix route\u0026rsquo;s URL path with {resources} (e.g. customers, products, orders) name. When route is defined for single resource (e.g. Customer, Product) then URL path should follow /{resources}/{id}/{action} naming (e.g. /customers/23/edit). When resource identifier (ID) is used in URL path then it should be prefixed with object name (e.g. /{customerId}/edit instead of /{id}/edit).  If we were to create CRUD routes for Customer, this is how it would look like:\n Index route admin_customers_index with URL /customers and responds to GET method. Create route admin_customers_create with URL /customers/new and responds to GET and POST methods. Edit route admin_customers_edit with URL /customers/{customerId}/edit and responds to GET and POST methods. Delete route admin_customers_delete with URL /customers/{customerId}/delete and responds to POST method.  Example of implementation for Customer routes:\n# src/PrestaShopBundle/Resources/config/routing/admin/sell/customer/_customer.yml _catalog: resource: \u0026quot;customers.yml\u0026quot; # route urls defined in \u0026quot;customers.yml\u0026quot; file will be prefixed with \u0026quot;/customers\u0026quot; prefix: /customers/  # src/PrestaShopBundle/Resources/config/routing/admin/sell/customer/customers.yml admin_customers_index: path: / methods: [GET] defaults: _controller: PrestaShopBundle:Admin/Sell/Customer/Customer:index admin_customers_edit: path: /{customerId}/edit methods: [GET, POST] defaults: _controller: PrestaShopBundle:Admin/Sell/Customer/Customer:edit requirements: customerId: \\d+ admin_customers_transform_guest_to_customer: path: /{customerId}/transform-guest-to-customer methods: [POST] defaults: _controller: PrestaShopBundle:Admin/Sell/Customer/Customer:transformGuestToCustomer requirements: customerId: \\d+  Service ids When registering service in YAML, its id should follow Fully-qualified class name. See example below.\n// src/Core/Payment/PaymentOptionFormDecorator.php namespace PrestaShop\\PrestaShop\\Core\\Payment; class PaymentOptionFormDecorator { // ... }  services: # service id follows fully-qualified class name prestashop.core.payment.payment_option_form_decorator: class: 'PrestaShop\\PrestaShop\\Core\\Payment\\PaymentOptionFormDecorator'  Named arguments Using the \u0026ldquo;named argument\u0026rdquo; syntax when declaring or updating services is forbidden.\nservices: # Good foo_bar: class: 'Foo\\Bar' arguments: - 'baz' # Wrong wrong_foo_bar: class: 'Foo\\Bar' arguments: - $baz: 'baz'  Grid PrestaShop comes with a lot of Grids (Products, Customers, Orders \u0026amp; etc) and keeping consistency between them is very important, thats why it follows these naming conventions:\n Grid id should be in lowercase and written in snake_case  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/installation/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": " Configuring PrestaShop By default, PrestaShop is configured to provide a secure and stable environment to both the shop administrator and the customers.\nAs a developer, there are several changes that you could and should bring to the default installation in order to help you code better, spot bugs faster, and generally make a great PrestaShop product.\nDisabling the cache and forcing Smarty compilation When your development has an impact on the front office, whether you are building a theme or simply a module which displays information to the customer, you should force the template file compilation and disable the cache, so as to always see the result of your changes directly.\nGo to the “Performances” page under the “Advanced parameters” menu to change the following Smarty settings:\n Template cache: switch it to “Force compilation”. Cache: disable it.  Forcing the compilation of Smarty will always slow down the loading time of the page. Make sure that your production store is set to only recompile templates if there are updated files, and that its cache is enabled.\nDisplaying error messages PrestaShop’s default settings prevent the customer to see any server error message or any debugging code.\nYou, on the other hand, need this information in order to correct any potential mistake in your code. To that end, open the /config/defines.inc.php file, and edit it to set _PS_MODE_DEV_ to true:\n/* Debug only */ define('_PS_MODE_DEV_', true);  Using the dump() method These two methods enable you to check for the state of a given variable at a specific place within your code.\nPrestaShop used to have custom debug methods available for developers: p($variable) and d($variable). They were used to display the content of a variable, and were really a wrapper around the well-known print_r() method. On top of that, PrestaShop had the ppp() and ddd() methods, which were respectively the aliases of p() and d(); and the various fd(), epr() and dieObject() methods.\nAll of this has changed with PrestaShop 1.7: we now rely solely on Symfony’s VarDumper::dump() function. You can now rely on a single method instead of having multiple debug functions. The dump() function is very powerful, and is always available on output (even without die()). Moreover, you can use it in your console scripts because this function also has a formatter in CLI mode.\nThe dump() method is not activated by default. To activate it, you must enable the Debug mode, by setting _PS_MODE_DEV_ to true (see above).\nEnabling the multistore mode Since version 1.5, PrestaShop is able to host more than one store within a single installation of the software. Many shop administrators choose to enable this feature, and it can have a significant impact on the way PrestaShop works. You should therefore make sure that anything you code for PrestaShop works in both single and multistore mode.\nEnabling the multistore mode is easy: go to the general preferences page, and put the “Enable Multistore” option to “Yes”.\nYou can switch back and forth between single store and multistore mode? In single store mode, only the main store is used.\nYou can read more about the multistore mode in the PrestaShop 1.6 User Guide: http://doc.prestashop.com/display/PS16/Managing+Multiple+Shops.\nAbout the configuration files There are three main configuration files, all located in the /config folder:\n config.inc.php defines.inc.php smarty.config.inc.php  config.inc.php It is the main configuration file for PrestaShop. You should not have to touch anything in there.\ndefines.inc.php This file contains PrestaShop constant values.\nIt also contains the location of all the files and folders. If you need to change their location, do not forget to keep the original path nearby, for instance in a PHP comment, in case you need to revert back to it later on.\nWhen in development/test mode, you must make sure that all the error messages are displayed:\n Set define('_PS_MODE_DEV_', false); to true.  On the contrary, when in production mode, you must hide error messages as much as possible!\n Make sure that define('_PS_MODE_DEV_', false); is set to false.  smarty.config.inc.php This file contains all the Smarty-related settings.\nThe Smarty cache system should always be disabled, as it is not compatible with PrestaShop: keep $smarty-\u0026gt;caching = false; as it is.\n$smarty-\u0026gt;compile_check should be left to false in development mode.\n$smarty-\u0026gt;debugging gives access to Smarty debug information when displaying a page. That setting is more easily modified in the “Performance” page of the advanced parameters menu : the “Debug console” option enables you to choose between never displaying Smarty’s debug information, always displaying it, or only displaying it when you add ?SMARTY_DEBUG to the URL of the page you want to test, which can be very useful.\nWhen in production mode, $smarty-\u0026gt;force_compile must be set to false, as it will give a 30% boost to your page load time.\nOn the other hand, when editing a .tpl file, you must delete the /tools/smarty/compile folder (except the index.php file) in order to see your changes applied.\nNote that this setting can be made directly from the back office, in the “Performance” page under the “Advanced parameters” menu.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": " Installing PrestaShop for development Now that you intend to develop for PrestaShop, you are better off keeping all your development work on your machine. The main advantage is that it makes it possible for you to entirely bypass the process of uploading your file on your online server in order to test it. Another advantage is that a local test environment enables you to test code without the risk of breaking your production store. Have a local environment is the essential first step in the path of web development.\nPrerequisites Read System Requirements.\nInstalling a local environment Installing any web-application locally requires that you first install the adequate environment, namely the Apache web server, the PHP language interpreter, the MySQL database server, and ideally the phpMyAdmin tool. This is called an *AMP package: Apache+MySQL+PHP and the operating system, giving WAMP (Windows+Apache+MySQL+PHP), MAMP (Mac OS X+…) and LAMP (Linux+…). Since all of the items packaged are open-source, these installers are most of the time free.\nHere is a selection of free AMP installers:\n XAMPP (Windows, Mac OS X, Linux, Solaris) WampServer (Windows) EasyPHP (Windows) MAMP (Mac OS X)  Creating a database for your local shop Open the phpMyAdmin tool using your browser. Its location depends on the AMP pack you chose:\n http://127.0.0.1/phpmyadmin (XAMPP, WampServer, MAMP), http://127.0.0.1/mysql (EasyPHP)  In the “Databases” tab, indicate the database name you want and validate by clicking on the “Create a database” button.\nDownloading PrestaShop The source code of PrestaShop is hosted on the Official PrestaShop GitHub Repository.\nYou can find all the released versions of PrestaShop here: PrestaShop releases.\nNightly releases of PrestaShop are also generated daily. Their details can be found on a public Google Cloud storage.\nChoosing the right version for you PrestaShop comes in two \u0026ldquo;flavors\u0026rdquo;:\n Release package. A zip package, tuned for production environments. Development version. The raw source code as it is on the GitHub repository, including automated test suites, build scripts and source codes for assets that are otherwise compiled (like javascript and css files).  Prefer cloning the repository using git for the development version.\nIf you intend to work on PrestaShop itself, we suggest using Git to clone the source code of PrestaShop from the GitHub repository.\n Repository branches As stated above, if you decide to work on PrestaShop itself, it\u0026rsquo;s best to clone the PrestaShop repository and work using git. Depending on the version of PrestaShop you want to work on, you will need to choose the right branch:\n The develop branch contains the current work in progress for the next minor or major version.  This is the right branch to contribute new features, refactors, small bug fixes, etc.  The maintenance branches (1.6.1.x, 1.7.0.x, 1.7.1.x, 1.7.2.x, \u0026hellip;) contains all patches made for each minor version.  For example, the 1.7.2.x branch contains all patches from 1.7.2.0 to 1.7.2.5. Whenever a new minor or major version is ready for release, a new maintenance branch is created. For example, 1.7.0.x for version 1.7.0.0, 1.7.1.x for 1.7.0.0, 1.7.2.x for 1.7.2.0, and so forth. Only the most recent maintenance branch accepts new contributions (except 1.6.1.x which is in extended maintenance)     Clone the repository using Git or extract the zip package in a prestashop folder inside the document folder of the AMP installer you chose:\n XAMPP: C:\\xampp\\htdocs or /Applications/xampp/htdocs WampServer: C:\\wamp\\www EasyPHP: C:\\easyphp\\www MAMP: /Applications/MAMP/htdocs/  Download dependencies using composer This step is only needed if you downloaded the development version.\n Use composer to download the project\u0026rsquo;s dependencies:\ncd /path/to/prestashop composer install  Setting up file rights PrestaShop needs recursive write permissions on several directories:\n /admin-dev/autoupgrade/ /app/logs /app/Resources/translations /cache /config/themes /download /img /log /mails /modules /themes /translations /var  To ease up your life on a development environment, we suggest to either:\n Make Apache run with your own user. Add your own user and Apache\u0026rsquo;s to a common user group (eg. \u0026ldquo;_www\u0026rdquo;), then chown all PrestaShop files to \u0026ldquo;youruser:_www\u0026rdquo;.  Never do that in production! Carefully change permissions folder by folder instead.\n Installing PrestaShop Open the PrestaShop installer and follow its instructions.\nDepending on whether you downloaded a release package or cloned the repository, the route to the installer will be slightly different:\n Release package: http://127.0.0.1/prestashop/install Development version: http://127.0.0.1/prestashop/install-dev  You can read the Getting Started guide for more details.\nTroubleshooting Compile Error: Cannot declare class AppKernel, because the name is already in use You may find this error message the first time you open up the Back Office.\nThis problem may arise in case-insensitive file systems like MacOS due to a misconfiguration. Check your Apache configuration and make sure that the root directory path to your PrestaShop matches the capitalization of the actual system path exactly. A typical error is for example having a folder named /path/to/PrestaShop (capital P, capital S) and then configuring it in Apache as /path/to/Prestashop (missing the capital S).\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/",
	"title": "Tutorials",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/action/",
	"title": "ActionColumn reference",
	"tags": [],
	"description": "",
	"content": " ActionColumn Type  This type of column allows to add actions to your Grid rows. The action target the corresponding row. For more info about possible actions see Actions reference.\nAvailable options    Properties Type Expected value     actions array default: null List of actions assigned to each row.    Example usage use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\ActionColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $actionColumn = new ActionColumn('actions'); $actionColumn-\u0026gt;setName('Actions'); $actionColumn-\u0026gt;setOptions([ 'actions' =\u0026gt; [ -\u0026gt;add((new LinkRowAction('delete')) -\u0026gt;setIcon('delete') -\u0026gt;setOptions([ 'route' =\u0026gt; 'admin_custom_route', 'route_param_name' =\u0026gt; 'mailId', 'route_param_field' =\u0026gt; 'id_mail', 'confirm_message' =\u0026gt; 'Delete selected item?', ]) ) ], ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($actionColumn);  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/bulk-action/",
	"title": "BulkActionColumn reference",
	"tags": [],
	"description": "",
	"content": " BulkActionColumn Type  This type of column allows to add bulk action checkboxes to your Grid. This only add the checkbox in the grid, you can then manage bulk actions via javascript.\nAvailable options    Properties Type Expected value     bulk_field string required: Record field name which will be used as bulk action checkbox value.    Example usage use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\BulkActionColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $bulkActionColumn = new BulkActionColumn('bulk_action'); $bulkActionColumn-\u0026gt;setName(''); // it is common set empty name for bulk action columns $bulkActionColumn-\u0026gt;setOptions([ 'bulk_field' =\u0026gt; 'id_product', ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($bulkActionColumn);  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/",
	"title": "Extension concepts",
	"tags": [],
	"description": "",
	"content": " Extension concepts "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/forms/",
	"title": "Forms",
	"tags": [],
	"description": "",
	"content": " Forms Legacy forms Forms are the biggest part of the migration. Before, we had form helpers that took care of generating, validating and handling everything. In Symfony, every step (creation, validation and request handling) needs to be specified by the developer.\nFor instance, this is code that you can find in a Legacy Controller:\n$this-\u0026gt;fields_options = array( 'general' =\u0026gt; array( 'title' =\u0026gt; $this-\u0026gt;trans('Logs by email', array(), 'Admin.Advparameters.Feature'), 'icon' =\u0026gt; 'icon-envelope', 'fields' =\u0026gt; array( 'PS_LOGS_BY_EMAIL' =\u0026gt; array( 'title' =\u0026gt; $this-\u0026gt;trans('Minimum severity level', array(), 'Admin.Advparameters.Feature'), 'hint' =\u0026gt; $this-\u0026gt;trans('Enter \u0026quot;5\u0026quot; if you do not want to receive any emails.', array(), 'Admin.Advparameters.Help'), 'cast' =\u0026gt; 'intval', 'type' =\u0026gt; 'text', ), ), 'submit' =\u0026gt; array('title' =\u0026gt; $this-\u0026gt;trans('Save', array(), 'Admin.Actions')), ), );  This is how this configuration is rendered by the legacy controller, without having to write anything in the templates:\nThe block is rendered and mapped to the controller url, the form is validated and mapped to the PS_LOGS_BY_EMAIL configuration key and automatically persisted in database, the label has a hint message in rollover.\nLet\u0026rsquo;s see how this is done in modern pages.\nModern forms In modern pages, form management is decoupled from Controllers. You need to create your forms, validate them, map them to the current HTTP request and persist data yourself. You also need to create your form templates too, but we have a nice form theme which will help you a lot.\nModern pages use Symfony forms. To learn the basics of Symfony forms, read their official documentation.\n Form types Form types must be created in the src/PrestaShopBundle/Form/Admin/{Menu}/{Page}/ folder. You can check out the existing forms to see how they are created. If you already know your way around Symfony forms, most of this will sound familiar to you.\nPrestaShop provides some built-in Form types that will help you integrate the specific form components PrestaShop uses in the Back Office. You\u0026rsquo;ll find them inside the Types folder:\n ChoiceCategoryTreeType CustomMoneyType DatePickerType TextWithUnitType \u0026hellip;  Most of the components from the PrestaShop UI Kit are implemented as Form Types.\nBefore creating a new form type, check this folder first to see if the type already exists.\n Forms are created and declared as services that you can use inside your Controllers – this is covered in the Controllers/Routing section of this guide.\nForm Data Providers In order to load existing data into the form (when editing, for instance) and save the form data (when the form is submitted), you need to create and register a Form Data Provider.\nYou can create your own based on one of the existing implementations, or on the interface:\nnamespace PrestaShop\\PrestaShop\\Core\\Form; interface FormDataProviderInterface { /** * @return array the form data as an associative array */ public function getData(); /** * Persists form Data in Database and Filesystem. * * @param array $data * @return array $errors if data can't persisted an array of errors messages * @throws UndefinedOptionsException */ public function setData(array $data); }  The idea is to uncouple data management from Controllers, so populating the form and saving form data will be done in these classes. Be aware though, you shouldn\u0026rsquo;t manipulate the database here – that task need to be delegated to dedicated classes.\nForm Handlers Once you are able to manage data loaded to or sent by your forms, you need a way to build those forms (which can be themselves composed of multiple forms).\nFor this, you need a Form Handler. You can either implement it yourself as a class (based on the interface PrestaShop\\PrestaShop\\Core\\Form\\FormHandlerInterface), or use PrestaShop\u0026rsquo;s core FormHandler to create a service in a declarative way – no need for a new class!\nAs an example, here\u0026rsquo;s how the Administration page\u0026rsquo;s Form Handler service is declared:\n# /src/PrestaShopBundle/Resources/config/services/form/form_handler.yml prestashop.adapter.administration.form_handler: class: 'PrestaShop\\PrestaShop\\Core\\Form\\FormHandler' arguments: - '@=service(\u0026quot;form.factory\u0026quot;).createBuilder()' - '@prestashop.core.hook.dispatcher' - '@prestashop.adapter.administration.form_provider' - 'general': 'PrestaShopBundle\\Form\\Admin\\AdvancedParameters\\Administration\\GeneralType' 'upload_quota': 'PrestaShopBundle\\Form\\Admin\\AdvancedParameters\\Administration\\UploadQuotaType' 'notifications': 'PrestaShopBundle\\Form\\Admin\\AdvancedParameters\\Administration\\NotificationsType' - 'AdministrationPage'  Let\u0026rsquo;s look at the arguments one by one:\n '@=service(\u0026quot;form.factory\u0026quot;).createBuilder()'\nThis is used to render the form. You can keep the default value.\n '@prestashop.core.hook.dispatcher'\nThis is used to dispatch hooks related to the form. You can also keep this value by default.\n '@prestashop.adapter.administration.form_provider'\nHere you need to specify your form\u0026rsquo;s Data Provider.\n The fourth argument is an associative array containing the names and FQCN of the form types you want to render in your form.\nImportant: The names correspond to the data fields that will be loaded/saved to your Data Providers.\n 'AdministrationPage'\nThe last argument is the name used to generate the hooks.\n  Form request handling in Controllers In modern pages, Controllers have or should have only one responsability: handle the User request and return a response. This is why in modern pages, controllers should be as thin as possible and rely on specific classes (services) to manage the data. As always, check out the existing implementations, like in the PerformanceController.\nThis is how we manage a form submit inside a Controller:\n$form = $this-\u0026gt;get('prestashop.adapter.performance.form_handler')-\u0026gt;getForm(); $form-\u0026gt;handleRequest($request); if ($form-\u0026gt;isSubmitted()) { $data = $form-\u0026gt;getData(); $saveErrors = $this-\u0026gt;get('prestashop.adapter.performance.form_handler')-\u0026gt;save($data); if (0 === count($saveErrors)) { $this-\u0026gt;addFlash('success', $this-\u0026gt;trans('Successful update.', 'Admin.Notifications.Success')); return $this-\u0026gt;redirectToRoute('admin_performance'); } $this-\u0026gt;flashErrors($saveErrors); } return $this-\u0026gt;redirectToRoute('admin_performance');  So, there are basically three steps:\n Get information from User request and get form data; If form has been submitted, validate the form; If form is valid, save it. Else, return form errors and redirect.  Every form in modern controllers must be handled this way, and the controller code should be kept minimalist and easy to read and understand.\n Summary with a schema The following schema sums up how Form Handlers, Form Builders, Controllers and Data Providers are wired together.\n JPEG version XML version (open it using draw.io)   Render the form using Twig The rendering of forms in Twig is already described by the Symfony documentation. PrestaShop uses its own Form theme that contains specific markup for the PrestaShop UI Kit. You can see it as a customized version of Symfony\u0026rsquo;s Bootstrap 4 form theme, even though it\u0026rsquo;s not directly based on it.\nTo sum up how it works, the controller sends an instance of FormView to Twig and Twig uses form helpers to render the right markup for every field type (the Form theme defines a specific markup for each Form Type).\n{{ form_start(logsByEmailForm) }} \u0026lt;div class=\u0026quot;col-md-12\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;card\u0026quot;\u0026gt; \u0026lt;h3 class=\u0026quot;card-header\u0026quot;\u0026gt; \u0026lt;i class=\u0026quot;material-icons\u0026quot;\u0026gt;business_center\u0026lt;/i\u0026gt; {{ 'Logs by email'|trans }} \u0026lt;/h3\u0026gt; \u0026lt;div class=\u0026quot;card-block\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;card-text\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;form-group row\u0026quot;\u0026gt; {{ ps.label_with_help(('Minimum severity level'|trans), ('Enter \u0026quot;5\u0026quot; if you do not want to receive any emails.'|trans({}, 'Admin.Advparameters.Feature')), 'col-sm-2') }} \u0026lt;div class=\u0026quot;col-sm-8\u0026quot;\u0026gt; {{ form_errors(logsByEmailForm.severity_level) }} {{ form_widget(logsByEmailForm.severity_level) }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;card-footer\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-primary\u0026quot;\u0026gt;{{ 'Save'|trans({}, 'Admin.Actions') }}\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ form_end(logsByEmailForm) }}  All these helpers are documented and help you generate an HTML form from your FormView object, using the right markup to be rendered by the PrestaShop UI Kit. Currently, several forms have already been migrated, so you can use them as base for your own work.\nAll the templates for modern pages can be found in the src/PrestaShopBundle/Resources/views/Admin folder. Twig templates for a page are split in subfolders: Forms, Blocks, Lists, Panels. This helps to keep track the role of each template.\nTemplates should be arranged by page and domain, keeping in mind that each part of template can be overridden by PrestaShop developers using modules. Use templates and Twig blocks wisely to make their job easy.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/templates/head/",
	"title": "Head",
	"tags": [],
	"description": "",
	"content": " Head The head part is very important in term of SEO and performences.\nHave look at StarterTheme and Classic head part to see real life examples.\nAssets PrestaShop 1.7 changed the way asset works and it means the way to it\u0026rsquo;s added inside the \u0026lt;head\u0026gt; tag of your page changed a bit too.\nThere are 2 importants files to use:\n _partials/stylesheets.tpl _partials/javascript.tpl  There 2 files are used to take full advantage of the new features of 1.7, like async loading for javascript or automatic inline for CSS.\nIf you\u0026rsquo;re using StarterTheme (which we believe you do) there is nothing to do, it works out of the box.\nThe _partials/javascript.tpl has to be included at the bottom of your page as well.\n {block name='stylesheets'} {include file=\u0026quot;_partials/stylesheets.tpl\u0026quot; stylesheets=$stylesheets} {/block} {block name='javascript_head'} {include file=\u0026quot;_partials/javascript.tpl\u0026quot; javascript=$javascript.head vars=$js_custom_vars} {/block}  Those 2 subtemplates are very simple, they loop and print each provided assets.\nSEO A lot of meta and SEO information belong here, there is a special block for it so template which extend this layout can easily redefine the page title or description.\n{block name='head_seo'} \u0026lt;title\u0026gt;{block name='head_seo_title'}{$page.meta.title}{/block}\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026quot;description\u0026quot; content=\u0026quot;{block name='head_seo_description'}{$page.meta.description}{/block}\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;keywords\u0026quot; content=\u0026quot;{block name='head_seo_keywords'}{$page.meta.keywords}{/block}\u0026quot;\u0026gt; {if $page.meta.robots !== 'index'} \u0026lt;meta name=\u0026quot;robots\u0026quot; content=\u0026quot;{$page.meta.robots}\u0026quot;\u0026gt; {/if} {if $page.canonical} \u0026lt;link rel=\u0026quot;canonical\u0026quot; href=\u0026quot;{$page.canonical}\u0026quot;\u0026gt; {/if} {/block}  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/testing/how-to-create-your-own-tests/",
	"title": "How to create your own tests",
	"tags": [],
	"description": "",
	"content": " How to create your own tests Creating a Unit test Everything is explained in the PHPUnit 5.7 documentation.\nFor unit tests, we strongly encourage you to base your test on the PHPUnit\u0026rsquo;s TestCase class only.\nFor instance:\nnamespace Tests\\Unit\\Foo; use PHPUnit\\Framework\\TestCase; class BarTest extends TestCase { /* ... */ }  Unit tests should be located into Unit folder and follow the same path as the tested class: if a class is located into src/Core/Foo/Baz, the unit test should be into tests/Unit/Core/Foo/Baz folder.\nCreating a functional test Using PHPUnit If you create your own Modern controllers or if you plan on migrating a legacy one, you can create tests to cover parts of HTTP layer aka functional tests.\nTo create a functional test, we encourage you to base your test class on our own implementation of WebTestCase.\nFor instance:\nnamespace Tests\\Functional\\Foo; use Tests\\Integration\\PrestaShopBundle\\Test\\WebTestCase; class BarTest extends WebTestCase { public function testSomeAction() { $url = '/modules/your/action'; /** or using the router * $this-\u0026gt;router-\u0026gt;generate( * 'route_name' * ); */ $this-\u0026gt;client-\u0026gt;request('GET', $url); $response = $this-\u0026gt;client-\u0026gt;getResponse(); self::assertTrue($response-\u0026gt;isSuccessful()); } }  Find out more in Symfony\u0026rsquo;s documentation on functional testing.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/documentation/how/edit-on-your-computer/",
	"title": "How to edit a page on your computer",
	"tags": [],
	"description": "",
	"content": " How to edit a page on your computer using Git Running a local copy of DevDocs on your computer is the best way to work on this project. Even though it requires a little extra work to set up, you will gain the ability to preview your changes almost instantly, as well as being able to introduce more than one change at a time.\nPrerequisites To run a local DevDocs install on your system, you will need:\n Basic knowledge of your platform\u0026rsquo;s command line. A GitHub account (That you can create for free). Git (Setup guide). Hugo site generator (Install guide).  Installation Follow this guide to install a local DevDocs.\nSubmitting your changes We recommend following the GitHub workflow, which involves creating a new branch for each \u0026ldquo;feature\u0026rdquo; you work on.\nThis also involves working on your own fork (learn how) before submitting a Pull Request.\nTo fork this project on GitHub, head to the project\u0026rsquo;s repository, then click on the \u0026ldquo;Fork\u0026rdquo; button on the top right corner of the screen.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/",
	"title": "How to migrate Back Office pages to Symfony 3",
	"tags": [],
	"description": "",
	"content": " How to migrate Back Office pages to Symfony 3 Migrating a legacy page in PrestaShop requires working on three parts of the application: templates, forms and controllers which contain the business logic.\nStrategy / To-do List This is the list of items that usually need to be done in order to complete the migration of a legacy controller.\n Creations  Create PrestaShopBundle/Controller/\u0026lt;path\u0026gt;/\u0026lt;Your\u0026gt;Controller Create related actions (functions matched to URIs) Declare routing in PrestaShopBundle/Resources/config/routing/admin/routing_*.yml file Create Symfony form types for each form available in pages Create and configure Javascript (using Webpack/ES6) file Create every twig blocks in views/\u0026lt;path\u0026gt;/*.html.twig Implement Forms submission Implement Forms validation If required, implement (request) Parameters update Check Error Handling Checks permissions and demo mode constraints Re-introduce hooks (and document the missing one if you can\u0026rsquo;t for a good reason) Complete Link class to map PrestaShop menu to the new page Create the smoke/survival tests for the migrated page  Deletions  Remove the old controller in controllers/admin/Admin*.php Remove related old templates (in admin-dev/themes/default/template/controllers/*)   Contents of this guide  Templating with Twig   Forms   Controller and Routing   Hooks   Grid / CRUD   Cleaning up   Testing   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/keeping-up-to-date/migration/",
	"title": "How to migrate to PrestaShop 1.7",
	"tags": [],
	"description": "Learn how to migrate your current shop (1.6 or previous version) to PrestaShop 1.7",
	"content": " How to migrate to PrestaShop 1.7 Manual migration - Process details We will use the ETL (Extract - Transform - Load) process to complete a migration, a concept usually applied to data warehouses.\nThe database structure may change with each new release of PrestaShop, but major versions may also imply features being replaced, preventing a shop to be smoothly upgraded in some cases. For these shops, a migration is a solution to be able to keep up with new releases.\nWe will cover the 3 main steps in this chapter:\n Extract data to be transfered Add / modify / delete some values if needed Import data on the new shop  Exporting data from the source In difference with an upgrade, we won’t modify the database directly. We need to export the data first. We use CSV files here, the most compatible and generic format.\nExporting data can be done\n Via the PrestaShop administration panel, With your MySQL client.  Depending on the way you export your data, you won’t get the same amount of data in your exports.\nLight - Via the administration panel Exporting data is quite straightforward. On each controller dedicated to the data you want to export, you will find action buttons at the top right of the page:\n  Export button in action bar   For instance for your products on PrestaShop 1.7:   Action bar localization   Clicking on the “Export” button will make your browser download a CSV file, which contains the complete product list with the columns displayed on the page.\nWith the same process, you can export the following data:\n (Brand) Addresses (Customer) Addresses (Product) Attributes Brands Carts Categories Customers (Product) Features Orders Stocks Suppliers  The extraction will contain values for the current language. If your shop is multilang, you must switch your lang in your employee configuration (accessible from the top right corner of the page) and repeat the extraction.\n This method is limited to the displayed details (= what you see on the table), thus can be far from being exhaustive. In the case you want more or all columns, you may prefer to proceed manually with your own SQL client.\nComplete - Via a MySQL client Advanced users can use their own client to extract data in CSV. This option give full control on the data to export.\nChoosing an extraction in CSV will allow you to bring changes easily with a spreadsheet editor, like Microsoft Excel or LibreOffice Calc.\nphpMyAdmin On phpMyAdmin, exporting in CSV can be done on the same page as the classic SQL dump.\nQuick and complete export (recommended) This step can be completed straightforwardly by exporting all tables in a single call. Click on your database, then the “Export” button to start:\n  Note the breadcrumb in the header will tell you if you are in a database or a table context. If you clicked on this button by mistake while being on a table, you will end on the export of a specific table as titled on this screenshot:\n  Whatever you choose between exporting the whole database in a single call or exporting your tables one by one, you must choose to export in “CSV” or “CSV for MS Excel”.\nThe available options will be updated:\n  If you want to export several tables at the same time, this can be done by selecting them from the list. The tables running with your shop start with the prefix given in your shop configuration (by default ps_). If one of them does not start with this prefix, it is unlikely concerned by the migration and can be ignored.\nThese tables can be ignored as well:\n access: As said, permissions have been reworked and have to be reset. configuration. You new shop already has a new configuration, and overwriting it with the old shop content is a bad idea. currency: Its content will be generated by during another step. lang: Its content will be generated by during another step. module_access: Structure is reworked with the new permission system. As it can’t be migrated easily, we recommend to reconfigure them manually. tab: This table contains the admin controllers accessible on your backoffice. As its values are mainly managed by PrestaShop, do not alter the content of the new shop. tab_lang: Related to tab and already managed by PrestaShop.  To avoid a single CSV file to be returned with all your tables in it, check the option “Export tables as separate files”. You will get a Zip file instead, containing one CSV file for each table.\nFinally, we advise to check the option “Put columns names in the first row”. This will be useful in the next step when your data will need to be modified.\nPersonalized export from custom SQL requests We explained how to export all your tables to make sure you keep as much data as possible.\nIf you get your data from another CMS or prefer to proceed with your own method, you can run a custom SQL query to get all the information you need. This option is useful if you plan to import your data with the import feature of PrestaShop.\nAs an example here is a SQL request to get the main product details, along with the texts corresponding to the first language of the first shop:\nSELECT p.*, pl.* FROM `ps_product` p JOIN `ps_product_lang` pl ON p.id_product = pl.id_product AND pl.id_lang = 1 AND pl.id_shop = 1 GROUP BY pl.id_product  If the result fits your needs, you can export it with the “export” button available at the bottom of the page.\n  mysqldump If you used mysqldump for your backups, there is also an option for extracting your data in CSV files, as described in the documentation. However, our tests have shown that method is far from being easy.\nExample for exporting the table ps_product:\nmysqldump -h127.0.0.1 -P3307 -uroot -p -T/var/lib/mysql-files --fields-enclosed-by=\\\u0026quot; --fields-terminated-by=\\; prestashop16 ps_product  Several notes about mysqldump with CSV files:\n Make sure you set the option --fields-terminated-by with the separators you want The header containing column names is missing from the .txt file and have to be manually inserted  Here is an extract of the product table, with demonstration data. Only the data is present and we need to add the column names.\n  CSV from mysqldump without header   Look at the SQL file provided with the TXT file, or run a DESCRIBE of the table.\nmysql\u0026gt; DESCRIBE prestashop16.ps_product;  You should expect the following result before proceeding to the next table:\n  CSV from mysqldump with header    You can rename the generated .txt files with the .csv extension to avoid confusion. If you are connected to a remote MySQL server: switching on CSV export will write on the remote filesystem and not on the client one. That’s why writing on a nonexistent or disallowed folder may trigger this error:  mysqldump: Got error: 1290: The MySQL server is running with the --secure-file-priv option so it cannot execute this statement when executing 'SELECT INTO OUTFILE'  If you want to know in which folder you can export the files, run the SQL request:\nmysql\u0026gt; SHOW VARIABLES LIKE \u0026quot;secure_file_priv\u0026quot;;  Updating the data Get changes between source and destination databases Now you have retrieved your data from the production shop, you have to adapt it to the new structure before inserting it on your new database.\nAn efficient way to get the changes is getting a database structure diff between the 2 running shops. MySQL provides another tool for this called mysqldiff.\nNote this utility may be not immediately available on your environment, even if you have the mysql client installed. For instance on Ubuntu, an additional package needs to be installed:\napt install mysql-utilities  This tool can be run anywhere, as long as you can access both servers \u0026amp; databases. The basic use of this command requires the following parameters:\nmysqldiff --server1=user:pass@host:port:socket --server2=user:pass@host:port:socket db3:db4  You need to provide the credentials to your MySQL servers. Ifthe source and the destination databases are on the same server, the --server2 parameter can be omitted. db3 and db4 are respectively the source and the destination databases of your data.\nGetting the structure diff will require additional options, as provided in this example:\nmysqldiff --server1=root:xxxx@127.0.0.1:3307 --changes-for=server1 --skip-table-options --force prestashop16:prestashop   All our databases are on the same server, that’s why only --server1 is provided, We want to know what are the changes to apply on the 1.6 version to fit the 1.7 structure, so we need --changes-for=server1 We only need structure changes. --skip-table-options removes diff about autoincrement etc. By default mysqldiff will only tell you the databases are not the same and will return immediately. Providing --force will make the tool print out details about the differences found.  A example of output is available in https://gist.github.com/Quetzacoalt91/9cef61ebbf12c139f44d27035d3cb1fd. The changes are extracted from a diff structure between a PrestaShop 1.6.1.18 database and another one under PrestaShop 1.7.3.2.\nIt appears the structure from PrestaShop has not drastically changed from 1.6 versions, although some columns type has evolved. Preparing your data for PrestaShop 1.7 should not need too many changes on your CSV files.\nApplying structure change This step has to be reproduced as many times as you have tables waiting to be migrated. The import step will be easier if you make sure the data you transfer fits the destination structure. This chapter will help to identify the changes to apply depending on the diff created during the previous step.\nA few notes:\n Not all differences require a change in your data, Basic changes can be done using spreadsheet editor, Complex modifications will require manual work.  New column Any new column added to the database requires the same work on your CSV file. Check on the new shop what default value applies to the new column, by checking in the following order:\n The database schema, The ObjectModel (folder classes of PrestaShop), The Entity (folder src/PrestaShopBundle/Entity).  Example with the table cart:\n--- `prestashop16`.`ps_cart` +++ `prestashop`.`ps_cart` @@ -18,6 +18,7 @@ `allow_seperated_package` tinyint(1) unsigned NOT NULL DEFAULT '0', `date_add` datetime NOT NULL, `date_upd` datetime NOT NULL, + `checkout_session_data` mediumtext, [...]  Before:   CSV before column addition   After:   CSV with new column   In this example the new column checkout_session_data has no default value and the existing data on our PrestaShop displays an empty column. As the column allows null values, we keep all rows empty.\nColumn has the same type, but not the same size Example with address:\n- `lastname` varchar(32) NOT NULL, + `lastname` varchar(255) NOT NULL,  If a column keeps its type but only increases its size, it does not require any change on your side. The new version offers more room to your text before being truncated.\nYou will probably notice the same change on your table keys:\n- `id_attribute_group` int(10) unsigned NOT NULL, + `id_attribute_group` int(11) NOT NULL,  This change does not imply anything on your side. This is a preliminary work for building relations between our tables.\nColumn removed This kind of change is easier than adding a column.\n- `scenes` tinyint(1) NOT NULL DEFAULT '1',  Open the related CSV, remove the column and save.\nHowever keep in mind in some cases the column may have been moved to another table. If this occurs, you will have to move the content of your column to another CSV.\nAn example is available for the table store, some columns have been moved to the table store_lang to allow localized data to be used. Data needs to be moved to a new CSV, and duplicated as many time as you have languages installed on your shop.\nDefault value disappeared - `position` int(10) unsigned NOT NULL DEFAULT '0', + `position` int(11) NOT NULL,  Here again, nothing to worry about, as there is no change needed on your data. The default value is now managed by the ORM. However, if the previous version did not show NOT NULL, this could require you to add a default value on the empty rows.\nPrimary key / unique index updates If the primary key or one unique key on a table evolves / is added, the import of your existing data can fail if it doesn’t respect the new unicity rules.\n- PRIMARY KEY (`id_feature`,`id_product`), + PRIMARY KEY (`id_feature`,`id_product`,`id_feature_value`),  + UNIQUE KEY `name_UNIQUE` (`name`),  If you see this kind of diff, check that you do not have the same group of values more than once. Is is more likely to happen if a column is removed from a column group, or if a key is added.\nRedirection for disabled products This change is specific to the table product.\n- `redirect_type` enum('','404','301','302') NOT NULL DEFAULT '', - `id_product_redirected` int(10) unsigned NOT NULL DEFAULT '0', + `redirect_type` enum('','404','301-product','302-product','301-category','302-category') NOT NULL DEFAULT '', + `id_type_redirected` int(10) unsigned NOT NULL DEFAULT '0',  When a product is disabled, the merchant can choose to which other page customers will be redirected to if they tries to access it. On PrestaShop 1.7 the number of options has increased, and a redirection to a category page is now possible.\nFor data coming from PrestaShop 1.6, existing redirections must be updated.\n Column redirect_type:     Old value New value     301 301-product   302 302-product     Column id_product_redirected: Name is now id_type_redirected  If you exported your data in CSV, doing this change will be easy with a spreadsheet editor, like Microsoft Excel or LibreOffice Calc. Just make sure to keep the same file extension while saving.\nHere is an example before and after the requested update (changes appear in green).\nBefore (Original state):   After:   Shop details You will notice that in the shop table the column id_theme has been replaced by theme_name. PrestaShop does not store data about theme in dedicated tables anymore. The only information remaining is the theme name used by each shop.\nAs migrating to PrestaShop 1.7 implies losing the theme used on the shop in production, just write “classic” in this column for each shop.\nBefore:   After:   IDs in CSV files We assume that you will want to overwrite the demonstration data with the data you exported from the old shop. Leaving your IDs intact will replace any existing data with the same ID.\nIf you want to add the extracted data without overriding the existing records on the new shop, you should take care of removing the IDs from your CSV files, or ignore them during the import.\nPreparing the destination shop Clean demo data PrestaShop is installed with demonstration data including products, customers, orders etc. They can be removed to make room for your own data.\nCleaning your shop from this demonstration data should be done before starting the import of your data. The free module “PrestaShop cleaner” can handle that in a few clicks.\nOn your destination shop, search for the module “PrestaShop cleaner” or “pscleaner”.\nImportant: Make sure to run this tool on the new shop, not the one in production.\n  PrestaShop cleaner card on the module catalog   Once installed, go on the module configuration page by clicking on the configure button. You will find different available actions. The first half is responsible of erasing some content of your shop (product catalog, orders, customers etc.), while the other one checks, removes and optimizes your database content.\n  PrestaShop cleaner configuration page   Install languages If you are selling in several countries, additional languages have to be reinstalled on the new shop. This can be done in International \u0026gt; Localization \u0026gt; Import a localization pack.\nAlso, make sure the IDs of your langs match on the source shop.\n  Checking IDs of installed languages on a shop   This is an example of shop waiting to be migrated. As we can see, there is a discontinuity on the languages IDs. To reproduce these gaps, you can add unneeded languages you will remove in a second time.\nImporting data Unlike a restore, we will only import content here, no table structure will be modified. In a migration, the data imported must fit the new structure and not the old one.\nVia a MySQL client PHPMyAdmin PHPMyAdmin also provides a tool to import the data you previously modified into your tables.\nUnlike the export step, we recommend you to proceed with tables one by one.\nWe assume you want to get rid of the demonstration data of the destination shop, which also makes the import less risky regarding potential duplicate identifiers.\n Emptying demo data  First, clean the table from its content with a TRUNCATE action. As PHPMyAdmin does not allow this step before importing your data, you have to execute it manually. Go to the operations panel of your table.\n  At the bottom of the page, you will find the critical operations available. As they are destructive for the existing data, they can’t be easily found and are written in red.\n  If PHPMyAdmin suggests to check the foreign keys, you can disable it. As you won’t import all your tables in a single call, you obviously cannot ensure that your relations will be fine during the process.\n Importing data  Now the table has been cleaned from demonstration content, you can import the data from the old shop. Go to the Import tab from your table.\n  A form will appear to let you customize your import. The default configuration expects a SQL file to run, so we will have several options to change as shown on the screenshot.\n   Start by selecting your CSV file. The second option to modify will be the format. Choose “CSV” or “CSV for MS Excel”. Skip the first line of your file. We had the column names in the first line to make our file edition easier, but we do not want to import it in the database. Disable the foreign key checks. We know some relations don’t exist yet, because they won’t be imported at the same time. Double check the CSV settings (separators). A wrong value will make your CSV file unparsable.  Finally, click on “Go”. If everything goes well, you will get a confirmation page like this:\n  If not, check the error message. An error about the CSV content could be fixed by other import settings, while an SQL error will require you to fix your data.\nRepeat the process as many times as you have CSV files.\nVia the import feature of PrestaShop Importing your data can also be done via the PrestaShop administration panel.\nThat solution is best when your data does not come from another PrestaShop, or if you got your data from customized SQL requests.\nIt is convenient thanks to its interface and its management of unprovided columns. Unlike imports with a MySQL client, the PrestaShop import feature will always be able to apply the default values for a missing information.\nOn the new shop, reach the controller Advanced parameters \u0026gt; Import.\n  This controller will allow you to import the following data:\n Categories Products Combinations Customers Addresses Brands Suppliers Alias Store contacts  When possible, try to have only one CSV file per data category ready to be imported. This depends on the file size and the upload size allowed by your server configuration. If uploading a single CSV file is impossible, split it in half and try again.\nYou have to go through the configuration for each import, which can be tedious in some cases. For instance, if the provided columns do not match the default schema.\nNote: Like for the export, each data category must be imported several times if your shop is multi-language – once per language. Forcing the IDs provided by the CSV file will help you link your localized data with the original one.\nImport main configuration To import data, start by uploading your CSV file. It will be done automatically when you select your file from the filesystem.\nBefore CSV selection or upload:\n  Some warnings may be displayed depending on the type of data to import. They can provide useful advice about forbidden or allowed rules.\nOnce a CSV is selected:\n  Double check the field \u0026amp; multiple-value options for your CSV structure. Default values should work in most of case, but incorrect values will make the import fail.\nChecking the “Delete all \u0026lt;data\u0026gt; before import” (see screenshot above) option could be useful to clean the demonstration content from your shop before importing your data. But if you export several CSV of the same type of data, make sure to disable it before proceeding with the second and following files.\nColumn assignment The second step allows you to link the old columns with the new ones.\n  In case a column from the CSV should not be taken in account, you can ask PrestaShop to bypass it by choosing the first option of the list: “Ignore this column”.\nWhen you’re ready to proceed, click on “Import”.\nImport progress From that moment, you can just wait for the process to complete. The time it will take depends on the number of lines to import, and the chosen options.\n  To avoid reaching the maximum execution time of a request, the process will divide your data in several chunks which will be processed in separate HTTP requests.\nThe import process will start by checking the time needed to process one chunk. Depending on the result, more or less objects will be handled during the next HTTP requests. This gives a nice balance between performance and stability.\nImages Depending on how you migrated your data, (i.e without the import feature of PrestaShop), your images may be missing from the new shop. If they are not present, you may want to retrieve them from the old.\nImages are stored on the filesystem and their link to a product is stored in the database. Restoring them depends on how you migrated your data:\n You kept the same IDs when you imported the products  If the IDs are exactly the same between the two shops, copying the folder `/img/p` will be enough to get the images.\nAlso, you must transfer the data of the tables \u0026lt;PREFIX\u0026gt;images / \u0026lt;PREFIX\u0026gt;images_lang / \u0026lt;PREFIX\u0026gt;images_shop in which the link between your images and products IDs is stored.\n The product IDs have changed in database  The images can be retrieved as well, but this will require some changes.\nFirst, copy the folder `/img/p` to get the images on the new shop filesystem.\nThen, you will have to transfer and adapt the data of the tables \u0026lt;PREFIX\u0026gt;images_lang / \u0026lt;PREFIX\u0026gt;images / \u0026lt;PREFIX\u0026gt;images_shop.\nThe tables \u0026lt;PREFIX\u0026gt;image and \u0026lt;PREFIX\u0026gt;image_shop contain a column which is a reference to product IDs. As they have changed on the new shop, you must update these identifiers in order to match the new values.\nThis work can be tedious, that’s why we recommend migrating your data on the new shop by removing the existing data at the same time.\n Generate thumbnails  Products images thumbnails must be regenerated in order to be displayed properly on the product page, checkout funnel etc.\nGo to Design \u0026gt; Image settings \u0026gt; Regenerate thumbnails to regenerate all the missing sizes.\nAttachments Like the images, these folders need to be copied on the new server:\n /download (Contains product attachments)\n /upload (Contains customer uploads)\n  Like for the images, you will have to adapt some content in your database if you could not keep the original product IDs.\n \u0026lt;PREFIX\u0026gt;product_attachment\n \u0026lt;PREFIX\u0026gt;customization\n \u0026lt;PREFIX\u0026gt;customization_data\n  Generate search index Imported products are not immediately available for search to your customers. You must refresh the search index to make them available.\nGo to Shop parameters \u0026gt; Search \u0026gt; Indexing and click on “Add missing product to the index”.\nOther migration options for developers The manual process explained to export and import data with CSV files from database. If you are a developer and you are willing to build your own tools for migrations, other ways exist to get the business data.\nThe following interfaces will make your tools more efficient and stable than a simple CSV extraction. You can add values stored elsewhere than in the database, handle your own format, and handle many more objects from the source shop.\nObject Models Object Model is an interface in the PHP codebase used by PrestaShop developers to request the database.\nThis can be used while developing a module responsible of the export and/or import of the objects from/to the database.\nFor more details, see the page dedicated to ObjectModels\nWeb service (API) The webservice API is another way to retrieve or store data in PrestaShop.\nIt must be enabled from the administration panel before being accessible. See the doc for more details: http://doc.prestashop.com/display/PS17/Webservice\nOnce ready, an API will be available for all the ressources enabled for your key. Basically, the web-service in another interface for object models, themselves interfacing the database.\nYou can use it to retrieve all your products, categories etc from the first shop, and re-inserting them in the other shop without many changes.\nThis option is interesting for people looking for making the process automatic, because:\n the webservice has barely changed since PrestaShop 1.5, you get all the properties of a given object, if a property is multi-lang, you will get the value or a link to another resource for each lang, you can get the images URL of a resource (i.e product), while you can’t find directly from a database column, getting a resource, or inserting one, is done by manipulating XMLs.  Useful links:\n Learning how-to use the webservice API Getting a list of all available ressources, ready for import/export  Migration modules and services Community module Although this solution is not made by PrestaShop, it follows the concept of export / import presented here and has been recommended several time on discussion platforms like the forum.\nThat solution is a module called “MigrationPro” and is available on the Marketplace:\nhttps://addons.prestashop.com/en/data-migration-backup/8934-migrationpro-prestashop-to-prestashop-migration-tool.html\nIt bundles two different modules to install on your old and new shop, respectively responsible of the export and import of the business data. It uses the object models to interact with the database.\nSupport service As well as for the upgrade, you can also ask our support team to proceed with the migration for you.\nYour data will be migrated and your compatible modules will be transferred. As the theme will be lost, you get instead a discount on themes available on the Marketplace. This option is useful for merchants who chose to use an existing theme instead of developing theirs.\nYou can subscribe for this service on the marketplace:\nhttps://addons.prestashop.com/en/support/18689-upgrade-pack-prestashop.html\nMany agencies and freelancers propose this kind of service and some of them are certainly in your area.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/keeping-up-to-date/",
	"title": "Keep PrestaShop up-to-date",
	"tags": [],
	"description": "",
	"content": " Keep PrestaShop up-to-date Introduction The purpose of this chapter is to provide the best practices and tips for keeping your PrestaShop up-to-date. Its compatibility range should cover at least shops running on versions 1.6 \u0026amp; 1.7 of PrestaShop.\nKeeping a shop updated to the latest available version ensures you have the latest changes brought by the core team and the developer community. Depending on the version you upgrade to, you can get new features, security or performance improvements, or simply bug fixes.\nFurthermore, the support of PrestaShop 1.6 will end before the end of the year 2018. We advise you to use the 1.7 versions to get support, along with core and modules upgrades.\nUpgrade and migration, two different processes Keeping PrestaShop up-to-date can be done via different methods. Choose the best update method depending on your needs.\nIn-place Upgrade   Upgrading a shop is the recommended method when you want to get your shop up-to-date without switching to the next major version.\nIt does not require any additional tools to run if you follow the manual process, the most recent release package will be enough.\nImpact on existing data As long as you stay on the same major version (ex. 1.6.0 \u0026gt;\u0026gt; 1.6.1 or 1.7.1 \u0026gt;\u0026gt; 1.7.2 upgrade), we make sure that the available features remain the same. This means that your current theme and all your modules should continue to work as before, and no functionality or data will be lost during the upgrade, even if the database structure may change.\nThis can be explained by the semantic versioning we follow, that forbids any compatibility-breaking change in the core, such as removing a feature or modifying our APIs.\nNote that once an upgrade has started, there is no way to rollback the changes. The only solution you have is restoring the backup you made before.\nProcess summary Prepare your upgrade by getting the latest release zip file, unpacking it and removing its demo content. Apply the new files by copy-pasting them in the production folder.\nRun the database upgrade. This could be enough for completing an upgrade, but additional tasks like cleanup and modules upgrade will bring you stability and security.\nMigration   Upgrading is not the only way to update your shop to the latest version of PrestaShop. In some cases, migrating your data is a better option.\nThis option is recommended when you switch on a new major version. As it brings a lot of changes in the core with many potential incompatibilities with the current theme and modules, starting fresh is less risky for stability.\n“Migrating” means moving your current shop to a new shop which is already running on the latest version in parallel.\nIt implies creating a new shop and transferring your existing data (like products, customers, orders…) into it, and disable your old shop afterwards. The main advantage of this option is it does not require the shop in production to be in maintenance mode. As long as you feel your new shop is not ready, you can keep the previous one running for your customers.\nImpact on existing data The impact on the existing data is very different from an upgrade, as it depends on what you transfer to the new shop.\nWhen switching to another major version (i.e 1.6.x \u0026gt;\u0026gt; 1.7.x), this will imply that some resources will be lost:\n Permissions On PrestaShop, the whole permissions system has been reworked to fit with Symfony’s. We recommend to recreate your employees, access groups and their permissions instead of migrating them.\n Theme\n  The theme system has been overhauled in 1.7, so 1.6 themes won’t work anymore. The controllers have changed, and the data shared between them and the views has also evolved.\n Modules not compatible with the new version  Modules can be more resilient to PrestaShop new releases, but some incompatibilities may occur when using another major version. For modules downloaded from the marketplace, you can check their compatibility range. For home-made modules, contact your developer to check its compatibility, but as a general rule consider them incompatible until proven otherwise.\nEach module reinstalled on the new shop will need to be reconfigured.\nProcess details A migration consists in:\n Setting up a new shop running on the latest version Getting the production content from the old shop Modifying the content for compatibility sake, data update\u0026hellip; Importing the data in the new shop  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/position/",
	"title": "PositionColumn reference",
	"tags": [],
	"description": "",
	"content": " PositionColumn Type  This type of columns allows you to define rows position using a drag and drop feature. Besides this column definition you need to use our javascript PositionExtension and prepare a route to manage the positions update. To help you create this controller you can use our PositionUpdater component.\nAvailable options    Properties Type Expected value     id_field string required Record field containing its id.   position_field string required Record field containing its position.   update_route string required Route called to update records position.   update_method string default: GET Method used to call the update route.   record_route_params array default: [] Associative array to inject record fields in the update route.    Example usage use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\PositionColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $positionColumn = new PositionColumn('position'); $positionColumn-\u0026gt;setName('Position'); $positionColumn-\u0026gt;setOptions([ 'id_field' =\u0026gt; 'id_link_block', 'position_field' =\u0026gt; 'position', 'update_route' =\u0026gt; 'admin_link_block_update_positions', 'update_method' =\u0026gt; 'POST', 'record_route_params' =\u0026gt; [ 'id_hook' =\u0026gt; 'hookId', ], ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($positionColumn);  import Grid from '../../components/grid/grid'; import PositionExtension from \u0026quot;../../components/grid/extension/position-extension\u0026quot;; const $ = window.$; $(() =\u0026gt; { let gridDivs = document.querySelectorAll('.js-grid'); gridDivs.forEach((gridDiv) =\u0026gt; { const grid = new Grid(gridDiv.dataset.gridId); grid.addExtension(new PositionExtension()); }); });  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/",
	"title": "The PrestaShop architecture",
	"tags": [],
	"description": "",
	"content": " The PrestaShop architecture The PrestaShop developers have done their best to clearly and intuitively separate the various parts of the software.\nHere is how the files are organized:\n /admin (the name is customized on installation): contains all the PrestaShop files pertaining to the back office. When accessing this folder with your browser, you will be asked to provide proper identification, for security reasons. Important: you should make sure to protect that folder with a .htaccess or .htpasswd file! /app: contains the configuration for the bundles and the framework. /cache: contains temporary folders that are generated and re-used in order to alleviate the server\u0026rsquo;s load. /classes: contains all the files pertaining to PrestaShop\u0026rsquo;s object model (some are used for the front office, others for the back office). Each file represents (and contains) a PHP class, and its methods/properties. /config: contains all of PrestaShop\u0026rsquo;s configuration files. Unless asked to, you should never edit them, as they are directly handled by PrestaShop\u0026rsquo;s installer and back office. /controllers: contains all the files pertaining to PrestaShop controllers – as in Model-View-Controller (or MVC), the software architecture used by PrestaShop. Each file controls a specific part of PrestaShop. /docs: contains some documentation, the licenses, and the sample import files. Note: it should be deleted in a production environment. \\/download: contains your virtual products, which can be downloaded by the user who paid for it. Files are stored with a md5 filename. /img: contains all of PrestaShop\u0026rsquo;s default images, icons and picture files – that is, those that do not belong to the theme. This is where you can find the pictures for product categories (/c sub-folder), those for the products (/p sub-folder), and those for the back office itself (/admin sub-folder). /install: contains all the files related to PrestaShop\u0026rsquo;s installer. You will be required to delete it after installation, in order to increase security. /js: contains all JavaScript files that are not attached to themes. Most of them belong to the back office. This is also where you will find the jQuery framework. /localization: contains all of PrestaShop\u0026rsquo;s localization files – that is, files that contain local information, such as currency, language, tax rules and tax rule groups, states and the various units in use in the chosen country (i.e., volume in liter, weight in kilograms, etc.). /mails: contains all HTML and text files related to e-mails sent by PrestaShop. Each language has its specific folder, where you can manually edit their content if you wish. PrestaShop contains a tool to edit your e-mails, located in the back office, in the Localization \u0026gt; Translation page. /modules: contains all of PrestaShop\u0026rsquo;s modules, each in its own folder. If you wish to definitely remove a module, first uninstall it from the back office, then only should you delete its folder. /override: this is a special folder that appeared with PrestaShop 1.4. By using PrestaShop\u0026rsquo;s regular folder/filename convention, it is possible to create files that override PrestaShop\u0026rsquo;s default classes or controllers. This enables you to change PrestaShop core behavior without touching to the original files, keeping them safe for the next update. Note: overrides are not recommended for modules that you intend to distribute/sell, and are strictly forbidden in partner modules. Keep them for your own shop. /pdf: contains all the template files (.tpl) pertaining to the PDF file generation (invoice, delivery slips, etc.). Change these files in order to change the look of the PDF files that PrestaShop generates. /src: contains the architecture files, comprising the Symfony framework, the legacy framework, and the Adapter classes. /tests: contains automated tests. This folder is not part of the public archive. /themes: contains all the currently-installed themes, each in its own folder. /tools: contains external tools that were integrated into PrestaShop. For instance, this is were you\u0026rsquo;ll find Smarty (template engine), TCPDF (PDF file generator), Swift (mail sender), PEAR XML Parser (PHP tool), etc. /translations: contains a sub-folder for each available language. However, if you wish to change the translation, you must do so using the PrestaShop internal tool, and not edit them directly in this folder. /travis-scripts: contains Travis-specific scripts. This folder is not part of the public archive. /upload: contains the files that would be uploaded by clients for customizable products (for instance, a picture that a client wants printed on a mug). /vendor: contains various 3rd-party tools and frameworks that are used by PrestaShop, such as Composer, cURL, Doctrine, etc. /webservice: contains files that enable third-party applications to access PrestaShop through its API.  Root folders that were removed between 1.6 and 1.7:\n /css: contained all the CSS files that are not attached to themes – hence, these were mostly used by the PrestaShop back office, and have now been moved to the theme.css file in the /admin/themes/new-theme/public folder. /log: contains the log files generated by PrestaShop at various stages, for instance during the installation process.  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/getting-started/tools-for-theme-designers/",
	"title": "Tooling prerequisites for theme designers",
	"tags": [],
	"description": "",
	"content": " Tooling prerequisites for theme designers The way 1.7 themes are created is significantly different from the way they were with PrestaShop 1.6. By taking the freedom to rewrite the way themes work according to the latest best-practices, we chose to also work with modern tools. These tools are widely accepted as best-of-breed in the current web development; hence, learning to use them will not only make you more productive in PrestaShop development, but more importantly in web development in general.\nWhile those tools will help all designers and developers in the long run, there is a first stop of knowing how to use them, particularly if you have never used such a chain of tools through the command line.\nThis page is here to help! It will browse through the toolset, so that you know what the rest of the documentation is talking about :)\nWhich tools are we talking about? The PrestaShop developers chose to rely on these tools for the development of the Classic theme:\n Git Composer npm Webpack  Along with these tools, PrestaShop 1.7 introduces frameworks and design tools that are must-know:\n Bootstrap 4 Symfony and its Twig template engine Sass Bourbon  This document presents each tool, and how they can get you to become a more productive web developer \u0026ndash; not just a more productive PrestaShop theme developer!\nBefore we get started: using the command line Many of the tools cited above are to be used through the command line \u0026ndash; launching commands in a text-based environment, line after line. While it has the advantage of being very powerful and easy to automate, it is also not intuitive and hard to grasp. Luckily, it only take a handful of commands to understand the power of the command line, and to adopt it for your everyday processes.\nNow, as a web-designer, you might be more used to work with graphical interfaces, such as Dreamweaver (for the more WYSIWYG-inclined), or a full-featured text editor, such as Sublime Text, Atom or Brackets (among many other possibilities). Using the command line can supplement this.\nAll operating systems give you access to a command line interface (CLI).\n Windows: It is called the \u0026ldquo;command prompt\u0026rdquo;.\n You can open it this way:   Open the Start menu, for instance by pressing the Windows key of your keyboard. In the Search field, type cmd and press Enter. This will start the cmd.exe program.   Try out a few basic commands:\n dir: lists the files in the current folder.\n cd: change the current directory. For instance, \u0026ldquo;cd Downloads\u0026rdquo; to enter a Downloads directory in the current folder; or cd .. to go to the parent folder.\n ping: to see the response time for a website. For instance, ping google.com.\n Note: Windows 10 also includes the Linux-\n  OS X: It is called the \u0026ldquo;terminal\u0026rdquo;.\n You can open it this way:   Open Spotlight, for instance by pressing the Command key and Spacebar at the same time. In the Search field, start typing \u0026ldquo;terminal\u0026rdquo; until the real \u0026ldquo;Terminal\u0026rdquo; is suggested, then press Enter. This will start the Terminal.app program. Try out a few basic commands: ls: displays the content of the current folder. cd: change the current directory. For instance, cd Downloads to enter a Downloads directory in the current folder; or cd .. to go to the parent folder. ping: to see the response time for a website. For instance, ping google.com.  Unix/Linux: Oh come on, don\u0026rsquo;t tell me you don\u0026rsquo;t already use bash, tcsh, zsh or any other POSIX variation of the concept! :)\n  There a many default tools and commands which you can use and even combine, but we\u0026rsquo;re going to use some non-standards tools: npm, Git, Composer and Webpack. Because they are non-standards, you will have to install and configure them first.\nNote that you do not HAVE TO use these exactly: you can choose alternatives such as Gulp or Grunt if you\u0026rsquo;re more familiar with them. We simply use Webpack :)\nUsing Git to manage your project files Git is a version control system, designed to manage decentralized projects with speed and efficiency. In plain English: you can use Git to save the current state of your files (through individual snapshot), in order to return to a previous state should the need arise, among other things.\nAs a theme designer, tracking all your CSS and JavaScript changes can help you return to a previous snapshot of a file or of the whole project, add new code without breaking the code that\u0026rsquo;s already working, collaborate with others, and in general keep you from losing your project because of a bad Ctrl-S.\nIf you have already used the Subversion system, think of Git as a decentralized Subversion (to keep it simple): any machine hosts all versions of all the files, and therefore there is no centralized repository. In effect, the PrestaShop project is mainly hosted on GitHub \u0026ndash; but developers also work on it on their own machine.\nWhy you should use it for your PrestaShop theme? The PrestaShop Open Source project makes heavy use of Git in order to keep versions of its files. The community can access the official public repository on GitHub: https://github.com/PrestaShop/PrestaShop\nAs a theme designer, you will need Git in order to retrieve the latest version of PrestaShop 1.7 and its default theme, \u0026ldquo;Classic\u0026rdquo;.\nNote: You do not need to install or use Git if you are not interested in the latest development of PrestaShop or the Starter Theme.\nHow can you install it? Simply download the archive for the latest version of Git (2.10 as of this writing) and install it just like you would do for any other software:\n Windows: https://git-for-windows.github.io/\n User interfaces are available, for instance https://tortoisegit.org/ or https://www.gitkraken.com/  OS X: https://git-scm.com/download/mac\n User interfaces are available, for instance https://git-fork.com/ or https://www.gitkraken.com/  Linux: type apt-get install git (or your distribution\u0026rsquo;s equivalent).\n  You can then open your command line and type git --version to check that Git is indeed installed. It should display the version number. You\u0026rsquo;re good to go!\nUsing Composer to manage your PHP dependencies The PHP ecosystem is made of code packages which can be embedded into bigger projects, or even into other code packages which, in turn, can be embedded, etc. These packages are called dependencies.\nBeing able to rely on such code packages is great, because it prevents from having to reinvent the wheel every time a well-known feature is needed. On the other hand, dependencies can get problematic: the more a project depends on third-party package, the more it must manage dependency resolution (determining which package to use), autoloading solution (finding the right package and making it available automatically), and keeping all packages up to date (or not, if backward compatibility is an issue).\nIn short, the modern PHP ecosystem can get complex quite quickly, and Composer is the main way PHP developers manage their dependencies.\nWhy you should use it for your PrestaShop theme? Now, why should you care about PHP files when working on a PrestaShop theme? Since you mostly work with theme files (.tpl, .css and .js), .php files are few in your editor, and \u0026ldquo;PHP dependencies\u0026rdquo; is something out there, and it seems you\u0026rsquo;d be better off avoiding them, right?\nThing is, PrestaShop uses Composer to build its own package dependencies. While the Zip archive available for public download is packed with all the required dependencies, the Git-hosted files do not automatically download and install all those dependencies: PrestaShop developers rely on Composer for that, through a composer.json file located at the root of the official Git folder.\nIn short, you need to use Composer when working with the latest development version from Github, in order to have a complete set of packages.\nYes, that means that if you choose not to retrieve the latest PrestaShop (or Starter Theme) files using Git, but to simply install the latest public archive, then you do not need to worry about Composer. But not using the latest Git version also means that you cannot work with the development version of PrestaShop, and that you rely on the Core developers to release upgraded packages, thus giving you no head start in developing with new features. Your call!\nHow can you install it? Download the archive for the latest version of Composer (1.2.2 as of this writing) and install it just like you would do for any other software:\nNote: you need to already have the PHP tool installed on your machine. You probably already have it if you\u0026rsquo;re building websites locally. If not, install WampServer, EasyPHP, XAMPP or any other Windows Apache+PHP+MySQL package there is.\n Windows: https://getcomposer.org/Composer-Setup.exe OS X and Linux: in your command line, type these commands:\n curl -s https://getcomposer.org/installer | php sudo mv composer.phar /usr/local/bin/composer   Testing it requires using the command line; there is no graphical interface for this tool. Simply type composer --version to check that it is indeed installed.\nUsing npm to automate compilation from third-party package npm is a popular package manager, which originates from the JavaScript ecosystem \u0026ndash; most precisely, from the Node.js JS runtime environment.\nnpm is both a command line tool and an online registry (located at https://www.npmjs.com/): you can use it to manage the dependencies (yes, just like Composer), or simply to work with useful packages. It is an extremely useful command to have when building websites, even if you do not use JavaScript or Node.js.\nWhy you should use it for your PrestaShop theme? In the context of building PrestaShop themes, npm is mostly used in order to automate tasks \u0026ndash; namely, building assets automatically so that you don\u0026rsquo;t have to.\nPrestaShop 1.7 themes are built around \u0026ldquo;assets\u0026rdquo;: CSS, JavaScript and image files, which are (or can be) generated from easier-to-manager formats:\n CSS files are built from Sass files (.scss). Some image files are built from SVG files (.svg). JavaScript files are from several files (.js).  All the source files are located in the theme\u0026rsquo;s _dev folder. The generated files are built using Webpack, a JavaScript module bundler. See below for more information about Webpack.\nHow can you install it? npm cannot be directly downloaded and installed. It is an integral part of the Node.js tool, therefore you need to download and install Node.js, which in turn will install npm for you.\nTo download Node.js, head to https://nodejs.org/en/download/ and choose the LTS version for your platform. LTS means Long Term Support (currently, 6.9.1): this version contains less features than the Current version (currently, v7.2.0), but is very stable and will be supported until April 2018.\nSo, install Node.js on your machine, then test that npm is available:\n Open your command line interface. Type node -v to check that Node.js is installed. Type npm -v to check that npm is indeed available.  npm is updated much more frequently that Node.js, so chances are that there\u0026rsquo;s a more recent version available than the one from the Node.js package.\nTo update your npm:\n Open your command line interface. Type npm install npm -g: this tells npm to install npm as global package. Type npm -v to check if the version has indeed changed.  Using Webpack to compile and minify your asset files Modern website are getting more and more complex, and JavaScript becomes more prominent than ever in the web-development world. As a result there is a lot of code on the client side!\nWebpack was built in order to make your life easier, most notably by organizing your code into JavaScript modules. It takes a whole lot of work off your shoulders: you have better things to do than to edit configuration files in order to adjust media files, fonts or URLs.\nBefore Webpack, many were using task-runners such as Grunt or Gulp in order to organize their code. That lead to a patchwork of configuration, and you had to pay a lot of attention to any change in order to not break everything. Webpack fixes this in an elegant way.\nWhy you should use it for your PrestaShop theme? Let’s where we’re at. So far was have installed:\n Git: A better way to make snapshot of your codebase. Composer: A better way to manage your PHP dependencies. npm: A better way to automate tasks (among many other things).  It’s all fine and dandy, but all of this remains very developer-centric, and there comes a time when you you have to think about the user, and optimize for the browser. Fear not, for Webpack is here to save the day! Webpack is a “module bundler”, meaning that it turns your assets into JavaScript modules, and packs them into static assets.\nSo, the main interest of using Webpack is that it will compile all your styles into a single CSS file. This way, your theme will make only one HTTP request for this single file, and since your browser will cache it for later re-use, it will even download this file only once.\nThe same goes with your JavaScript code. Instead of loading jQuery along with its community plugins, your own custom plugins and any extra code you might need, Webpack compiles and minifies all this JavaScript code into a single file, which will be loaded once - and cached.\nHow can you install it? From the moment you have npm installed (see above), Webpack can be installed in a few seconds:\n Open your command line interface. Type npm install webpack -g  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/controller-routing/",
	"title": "Controller and Routing",
	"tags": [],
	"description": "",
	"content": " Controller and Routing Modern/Symfony Controllers Read the Symfony documentation on Controllers and Routing.\n Every migrated page needs one or more Controllers: if you consider that a legacy Controller needs to be split into multiple controllers (for example: different URLs), it\u0026rsquo;s the right time to do it.\nNew controllers should be placed in the src/PrestaShopBundle/Controller/Admin folder. Starting on 1.7.3, controllers are being progressively organized in sub-folders following the Back Office menu. For instance, if you are migrating a page located into \u0026ldquo;Advanced Parameters\u0026rdquo; section, put it into src/PrestaShop/Controller/Admin/Configure/AdvancedParameters. Same applies to Improve and Sell sections, and so on.\nThis is how it should look like in the end:\nController/ └── Admin ├── Configure │ ├── AdvancedParameters │ └── ShopParameters ├── Improve │ ├── Design │ ├── International │ ├── Modules │ ├── Payment │ └── Shipping └── Sell ├── Catalog ├── Customers ├── CustomerService ├── Orders └── Stats  As Controllers are not available for override and can be regarded as internal classes, we don\u0026rsquo;t consider moving a Controller in another namespace as a backward-compatibility break.\n Symfony Controllers should be thin by default and have only one responsibility: getting the HTTP Request from the client and returning an HTTP Response. This means that every business logic should be placed in dedicated classes outside the Controller:\n Form management Database access Validation etc\u0026hellip;  You can take a look at PerformanceController for an example of good implementation, and ProductController for something you should avoid at all costs.\nNever, ever call the legacy controller inside the new controller. It\u0026rsquo;s a no go, no matter the reason!\n Controllers are responsible for performing \u0026ldquo;Actions\u0026rdquo;. Actions are methods of Controllers which mapped to a route, and that return a Response.\nTry to avoid creating helper methods in your controller. If you find yourself needing them, it could be a symptom of your Controller becoming too complex. This can be solved by extracting code into external classes as needed.\n Regarding the rendering of a Response, there is some data specific to PrestaShop (in Back Office) that we must set for every action:\n   Attribute Type Description     layoutHeaderToolbarBtn [[\u0026lsquo;href\u0026rsquo;, \u0026lsquo;des\u0026rsquo;,\u0026lsquo;icon\u0026rsquo;], \u0026hellip;] Set buttons in toolbar on top of the page   layoutTitle string Main title of the page   requireAddonsSearch boolean If true, display addons recommendations button   requireBulkActions boolean If true, display bulk actions button   showContentHeader boolean If true, display the page header   enableSidebar boolean If true, display a sidebar   help_link string Set the url of \u0026ldquo;Help\u0026rdquo; button   requireFilterStatus boolean ??? (Specific to Modules page?)   level integer Level of authorization for actions (Specific to modules)    Controller Helpers Some helpers are specific to PrestaShop to help you manage the security and the dispatching of legacy hooks, all of them are directly available in Controllers that extends FrameworkBundleAdminController.\n isDemoModeEnabled(): some actions should not be allowed in Demonstration Mode getDemoErrorMessage(): returns a specific error message addFlash(type, msg): accepts \u0026ldquo;success|error\u0026rdquo; and a message that will be displayed after redirection of the page flashErrors([msgs]): if you need to \u0026ldquo;flash\u0026rdquo; a collection of errors dispatchHook(hookName, [params]): some legacy hooks need to be dispatched to preserve backward compatibility authorizationLevel(controllerName): check if you are allowed - as connected user - to do the related actions langToLocale($lang): get the locale from a PrestaShop lang trans(key, domain, [params]): translate a string redirectToDefaultPage(): redirect the user to the configurated default page presentGrid(GridInterface $grid): returns an instance of Grid view getCommandBus: returns the Command bus getQueryBus: returns the Query bus  Security In modern pages, the permissions system that checks if a user is allowed to do CRUD actions has been improved.\nPrestaShop allows merchants to choose which actions (like CREATE, READ, UPDATE, DELETE) can be done by each user profile on each resource (like \u0026ldquo;Product\u0026rdquo;, \u0026ldquo;User\u0026rdquo;). In PrestaShop Back Office, most of these resources are managed by only one Controller, so rights are handled on a page-per-page basis instead of by resource.\nSo if a logged user wants to manipulate a resource, he or she needs to have the correct rights on the appropriate controller. For instance, to be able to access the \u0026ldquo;Product Catalog\u0026rdquo; page the user need READ access, because showing the page requires \u0026ldquo;reading\u0026rdquo; the Product information. If the user wants to delete a product, (s)he needs DELETE rights.\nTo enforce this security policy, you have to set up the adequate checks for each one of the actions of your controller. Policies are declared as annotations on top of every controller Action method:\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity; class SomeController extends FrameworkBundleAdminController { /** * @AdminSecurity( * \u0026quot;is_granted(['read', 'update', 'create', 'delete'], request.get('_legacy_controller'))\u0026quot;, * message=\u0026quot;You do not have permission to update this.\u0026quot;, * redirectRoute=\u0026quot;some_route_name\u0026quot; * ) * */ public function fooAction(Request $request) { // action code } }  Access rules convention The following access rules must be enforced:\n indexAction requires READ permission and only this one createAction which allows to create an item, requires CREATE permission editAction which allows to update an item, requires UPDATE permission deleteAction which allows to delete an item, requires DELETE permission  Moreover, if one page allows to modify some prestashop settings, this action can be used by users who are granted either CREATE, UPDATE, DELETE permissions.\nHow does this work? The AdminSecurity annotation will check if the logged user is granted to access the Action (ie. to the URL). This annotation has 5 properties:\n The first argument is an evaluated expression that must return a boolean. In this case, we\u0026rsquo;re checking if the user has all the rights on the current Controller.\nAs explained before, access rights (\u0026ldquo;roles\u0026rdquo;) in PrestaShop are managed by action (Create, Read, Update, Delete) and related controller. Since roles are currently managed by the legacy system using the legacy controller names, you need to provide the name of the legacy controller to the security system.\nThe _legacy_controller parameter is explained below in the \u0026ldquo;Routing in PrestaShop\u0026rdquo; section. message - (optional) Contains the error message displayed to the user, if (s)he\u0026rsquo;s not allowed to perform the action.\n redirectRoute - (optional) Route name the router will use to redirect the user if (s)he\u0026rsquo;s not allowed to perform the action.\n domain - (optional) Describes the translation domain for the message.\n url - (optional) Used to configure an URL for redirection instead of relying on the router.\nThis property is temporary and will be removed once the Dashboard has been migrated to Symfony.\nIf you use both url and redirectRoute at the same time, redirectRoute will win!\n   Demo Mode PrestaShop is provided with a Demo Mode that, when enabled, defines access application-wide rights that override whatever rights the current user may have. In other words, something that is disabled in Demo Mode will be disabled for all users, even if that user would normally have access to it.\nThe demo mode can be enabled by setting _PS_MODE_DEMO_ to true in config/defines.inc.php.\n When an action needs to be restricted in Demo Mode, you can use the DemoRestricted annotation:\nuse PrestaShopBundle\\Security\\Annotation\\DemoRestricted; /** * @DemoRestricted(\u0026quot;route_to_be_redirected\u0026quot;, * message=\u0026quot;You can't do this when demo mode is enabled.\u0026quot;, * domain=\u0026quot;Admin.Global\u0026quot; * ) * */ public function fooAction(Request $request) { // do something here }  message and domain are both optional.\n What if I need to restrict a specific part of my Controller? Sometimes, it may be necessary to dynamically decide on restrictions (eg. depending on user input or an action performed). In addition, it may happen that a Controller action has to handle both the update and display of a resource. What if we want to allow the READ action but not the UPDATE?\nIn this case, you can use the Controllers helper functions we described above: isDemoModeEnabled() and authorizationLevel().\nRouting in PrestaShop In order to map an Action to an url, you need to register a route and define the appropriate _legacy_controller and _legacy_link parameter.\nRoutes are declared in src/PrestaShopBundle/Resources/config/admin folder, following the menu organization.\nThis is the current organization of routing, you must follow the same organization:\n. ├── admin │ ├── _common.yml │ ├── configure │ │ ├── advanced_parameters │ │ ├── _configure.yml │ │ └── shop_parameters │ ├── improve │ │ ├── design │ │ ├── _improve.yml │ │ ├── international │ │ ├── modules │ │ ├── payment │ │ └── shipping │ ├── _security.yml │ └── sell │ ├── catalog │ ├── orders │ ├── _sell.yml │ └── stocks.yml ├── admin.yml ├── api │ ├── attributes.yml │ ├── categories.yml │ ├── features.yml │ ├── i18n.yml │ ├── improve │ │ └── design │ ├── manufacturers.yml │ ├── stock_movements.yml │ ├── stocks.yml │ ├── suppliers.yml │ └── translations.yml └── api.yml  Nothing special here except that you must declare a property called _legacy_controller containing the old name of the controller you are migrating, and specify the _legacy_link if you want to keep the link between legacy urls and new ones.\nThis property _legacy_controller is used to handle Security Restrictions.\n For example, let\u0026rsquo;s see what was done when migrating the \u0026ldquo;System Information\u0026rdquo; page inside the \u0026ldquo;Configure \u0026gt; Advanced Parameters\u0026rdquo; section:\nadmin_system_information: path: system_information methods: [GET] defaults: _controller: 'PrestaShopBundle\\Controller\\Admin\\AdvancedParameters\\SystemInformationController::indexAction' _legacy_controller: AdminInformation _legacy_link: AdminInformation  PrestaShop uses YAML files for service declaration and routing, please don\u0026rsquo;t use annotations for that!\n Link generation The _legacy_link property  When migrating a new page to Symfony, you must get rid of all the former link references to the legacy controller. In legacy pages, link are generally managed by the Link class, all these calls need to be replaced using the Router component.\nHowever although you can find all the references of a controller in the core code, you can\u0026rsquo;t know every references that could exist in modules or tabs (or you might simply miss some legacy calls). That\u0026rsquo;s where we got you covered (starting in PrestaShop 1.7.5) with _legacy_link, this parameter is associated to any migrated route and is formatted as such:\nroute_name: path: some/url methods: [GET] defaults: _controller: 'PrestaShopBundle\\Controller\\Path\\To\\ControllerClass::{actionName}Action' _legacy_controller: LegacyController _legacy_link: {LegacyController}:{actionName} # In some cases several controllers/actions are managed by the same migrated controller # You have the possibility to set an array as _legacy_link thus preventing you from defining alias routes other_route_name: path: some/other/url methods: [GET] defaults: _controller: 'PrestaShopBundle\\Controller\\Path\\To\\Other\\ControllerClass::{actionName}Action' _legacy_controller: LegacyController _legacy_link: - {LegacyController}:{actionName} - {LegacyController}:{aliasActionName}  The actionName part is optional for the index action (equivalent to list), therefore these three notations are equivalent:\nadmin_emails: path: /emails methods: [GET] defaults: _controller: 'PrestaShopBundle:Admin\\Configure\\AdvancedParameters\\Email:index' _legacy_controller: AdminEmails _legacy_link: - AdminEmails - AdminEmails:index - AdminEmails:list  The Link-\u0026gt;getAdminLink conversion Not every developer use the getAdminLink method the same way, therefore the _legacy_link is able to recognize different uses of this method, for example via an action parameter (e.g: ?controller=AdminEmails\u0026amp;action=export).\nBut sometimes urls simply insert the action name as a parameter (e.g: ?controller=AdminPaymentPreferences\u0026amp;update). As long as the actions have been migrated and correctly set up they will be successfully converted.\nGiven this configuration:\nadmin_payment_preferences: path: /preferences methods: [GET] defaults: _controller: PrestaShopBundle:Admin\\Improve\\Payment\\PaymentPreferences:index _legacy_controller: AdminPaymentPreferences _legacy_link: AdminPaymentPreferences admin_payment_preferences_process: path: /preferences/update methods: [POST] defaults: _controller: PrestaShopBundle:Admin\\Improve\\Payment\\PaymentPreferences:processForm _legacy_controller: AdminPaymentPreferences _legacy_link: AdminPaymentPreferences:update  $link = New Link(); //These calls will return /preferences $link-\u0026gt;getAdminLink('AdminPaymentPreferences'); $link-\u0026gt;getAdminLink('AdminPaymentPreferences', true, ['action' =\u0026gt; 'list']); $link-\u0026gt;getAdminLink('AdminPaymentPreferences', true, [], ['action' =\u0026gt; 'index']); //These calls will return /preferences/update $link-\u0026gt;getAdminLink('AdminPaymentPreferences', true, [], ['action' =\u0026gt; 'update']); $link-\u0026gt;getAdminLink('AdminPaymentPreferences', true, [], ['update' =\u0026gt; true]); =\u0026gt; $link-\u0026gt;getAdminLink('AdminPaymentPreferences', true, [], ['update' =\u0026gt; '']); =\u0026gt; //This call will return ?controller=AdminPaymentPreferences\u0026amp;action=export //because the export action has not been migrated yet $link-\u0026gt;getAdminLink('AdminPaymentPreferences', true, [], ['action' =\u0026gt; 'export']);  The _legacy_link auto redirection Finally some urls might have been generated manually or hard coded. To avoid losing these legacy urls a Symfony listener checks each call to the back office and tries to match it to a migrated url if it is found then the response is automatically redirected to the new migrated url.\n admin/index.php?controller=AdminPaymentPreferences =\u0026gt; Redirected to /admin/preferences admin/index.php?controller=AdminPaymentPreferences\u0026amp;action=update =\u0026gt; Redirected to /admin/preferences/update admin/index.php?controller=AdminPaymentPreferences\u0026amp;action=export =\u0026gt; No redirection, the legacy controller is called  Be careful, Link is sometimes misused\nSome examples have been found where urls are generated by a mix of getAdminLink and concatenating parameters:\n$link = new Link(); $link-\u0026gt;getAdminLink('AdminPaymentPreferences') . '?action=update';  This won\u0026rsquo;t work because the parameters will be appended to the index url. You should be extra careful about these misused code and replace them, depending on what version of PrestaShop you are targeting, by:\n 1.7.x use the Router service directly with the appropriate route 1.6.x if you need your link to work both on 1.6 AND 1.7 use getAdminLink method with the parameters fully injected in the function   Remember that _legacy_link is only available since 1.7.5 version of PrestaShop, for older versions you need to update the Link class to manage routing conversion.\n// classes/Link.php, in getAdminLink() $routes = array( 'AdminModulesSf' =\u0026gt; 'admin_module_manage', 'AdminStockManagement' =\u0026gt; 'admin_stock_overview', //... 'LegacyController' =\u0026gt; 'migrated_route', );  This will only work for one route/one controller the association by action does not work before 1.7.5.\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/database/",
	"title": "Database",
	"tags": [],
	"description": "",
	"content": " Accessing the database The database structure By default, PrestaShop’s database tables start with the ps_ prefix. This can be customized during installation\nAll table names are in lowercase, and words are separated with an underscore character (“_”):\n ps_employee ps_manufacturer ps_product ps_product_comment ps_shop_url  When a table establishes the links between two entities, the names of both entities are mentioned in the table’s name. For instance, ps_category_product links products to their category.\nA few details to note about tables:\n Tables which contain translations must end with the _lang suffix. For instance, ps_product_lang contains all the translations for the ps_product table. Tables which contain the records linking to a specific shop must end with the _shop suffix. For instance, ps_category_shop contains the position of each category depending on the store.  There is also a couple of standard practices for data rows within a table:\n Use the id_lang field to store the language associated with a record. Use the id_shop field to store the store associated with a record.  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/keeping-up-to-date/upgrade/",
	"title": "How to upgrade PrestaShop",
	"tags": [],
	"description": "Everything you need to know to upgrade your PrestaShop to the latest version",
	"content": " How to upgrade PrestaShop Important\nDo not go further if you haven’t made a backup of your shop.\nRollback will be the only way to go back if something does not go well, and this requires a backup.\nLearn how to backup your shop\n This chapter describes several ways to complete an upgrade of PrestaShop.\nManual upgrade – Process details This guide gives you the full control on the process. This one has been applied by PrestaShop for several major versions, and thus can be applied on very old shops.\nRelease download The first step is to download the latest version on http://www.prestashop.com/.\nIf you upgrade to another version of PrestaShop 1.6, the release files can be found in a dedicated archives list.\nDownload can also be done in command line, as done here with the version 1.7.3.2:\nwget -O prestashop-upgrade.zip https://www.prestashop.com/download/old/prestashop_1.7.3.2.zip  Archive extraction Extract the files from the archive with a tool like 7zip\nNote starting from PrestaShop 1.7.0.0, the release package contains a zip file itself, which must be extracted as well.\nOn a Linux terminal, you can use the command `unzip`:\nunzip prestashop-upgrade.zip \u0026amp;\u0026amp; unzip prestashop.zip  Once you have the folders like classes/, modules/, themes/, etc. you may go on the next step.\nSample files cleanup Avoid overwrite the production resources (images, conf \u0026hellip;) with the default data. These folders can be removed from the new release:\n img/ overrides/  All the other files present in the new release will overwrite the existing files. All changes you made on the original source code will be lost (by the way, this is not recommended, you should never modify the core files).\nAlso, rename the “admin” folder to match your shop’s admin folder name. This will prevent an unwanted duplication of the administration content.\nTurning on maintenance mode The shop will now be modified. As it may cause unexpected behavior for you and your customers during the upgrade, we highly recommend you to turn on maintenance mode during the upgrade.\nThis can be done in your administration panel:\n On PrestaShop 1.7, in Shop parameters \u0026gt; General \u0026gt; Maintenance tab On PrestaShop 1.6, in Shop parameters \u0026gt; Maintenance  Adding your IP address will allow you to access your shop while it’s in maintenance mode. That way, you can make sure everything is working right before allowing your customers to access it again.\nFile copy In this step, we “upgrade” the PrestaShop files by copying the new release content in the existing shop.\nNote about `vendor` folder: Previous upgrades of PrestaShop 1.7 showed that conflicts may occur when merging the new vendor/ folder with the old one. To avoid this problem, we recommend to delete this folder in the existing shop before copying the new one.\nOn Windows, copy the new folder content and paste it in your shop folder. You will get warnings that files already exists in the destination folder. Choose “overwrite” to continue.\nOn linux, the copy can be done in your terminal:\ncp -R \u0026lt;path_to_the_new_release\u0026gt;/* \u0026lt;path_to_the_current_shop\u0026gt;/  Example:\ncp -R ~/Downloads/prestashop/* /var/www/html/  Database upgrade Once the files have been copied, your shop database is ready to be upgraded.\nAll the changes to apply have been defined in the `install` folder, running them can be done with a specific PHP script.\nWhen you’re ready, run the file `install/upgrade/upgrade.php`.\nThis can be done with a browser, by reaching the address http://\u0026lt;shop_domain\u0026gt;/install/upgrade/upgrade.php, or from your server\u0026rsquo;s command line:\nphp install/upgrade/upgrade.php  In both cases, an XML log will be displayed. The result can be found in the attribute result of the first tag \u0026lt;action\u0026gt;:\n ok if updates have been found and executed error if something went wrong info for next actions, displaying the details on the process  Execution log When the upgrade script found some upgrades to apply, the SQL queries run will be listed along their respective result.\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt;\u0026lt;action result=\u0026quot;ok\u0026quot; id=\u0026quot;\u0026quot;\u0026gt; \u0026lt;action result=\u0026quot;info\u0026quot; id=\u0026quot;1.7.0.5\u0026quot;\u0026gt;\u0026lt;![CDATA[[OK] PHP 1.7.0.5 : /* PHP:ps_update_tabs(); */]]\u0026gt;\u0026lt;/action\u0026gt; \u0026lt;action result=\u0026quot;info\u0026quot; id=\u0026quot;1.7.0.5\u0026quot;\u0026gt;\u0026lt;![CDATA[[OK] SQL 1.7.0.5 : ALTER TABLE `ps_currency` MODIFY `name` varchar(64) NOT NULL]]\u0026gt;\u0026lt;/action\u0026gt; \u0026lt;action result=\u0026quot;info\u0026quot; id=\u0026quot;1.7.1.0\u0026quot;\u0026gt;\u0026lt;![CDATA[[OK] SQL 1.7.1.0 : SET SESSION sql_mode = '']]\u0026gt;\u0026lt;/action\u0026gt; \u0026lt;action result=\u0026quot;info\u0026quot; id=\u0026quot;1.7.1.0\u0026quot;\u0026gt;\u0026lt;![CDATA[[OK] SQL 1.7.1.0 : SET NAMES 'utf8']]\u0026gt;\u0026lt;/action\u0026gt; [...]  You can double check that each action is marked as “OK”. If not, additional details will be shown after the request, which can help you fix the issue and re-execute the request manually on your database. In some cases, you may need to restore your database backup and start over.\nError codes An error code can also be displayed. Each code is related to a message described here:\n Error #27: The shop is running a newer version than the content provided by the install folder. Error #28: The shop is already at the version you try to upgrade to. Error #29: Could not find the current version. Check your database parameters file and the database connection. Error #31: Unable to find upgrade directory in the installation path, does the folder install/upgrade/sql exist and is not empty? Error #32: No upgrade needs to be applied. Error #33: Error while loading a SQL upgrade file. Check your permissions of the folder install/upgrade/sql. Error #40: The version provided in the file install/install_version.php is invalid. Error #43: Error while upgrading database schema using doctrine. Error #44: Error while updating translations. Error #45: Error while enabling theme.  Cleanup Before going further, a few things should now be cleaned.\n The `install` folder, used to run the database upgrades, is not needed anymore and can be safely deleted. When opening your shop (in the front or back office) on your browser, you may see some visual issues. This can be due to your old assets being still served by a cache. Reload them by force-refreshing the page (press ctrl+R on Windows / Linux or cmd+R on Mac OS) or clearing your browser’s cache.  Modules upgrade Your modules files have been upgraded during the file copy, however many of them may require additional changes on the database. Please check the module page in your Back Office to see if upgrades are waiting to be run.\nGo to your administration panel and login. You will notice the version displayed has changed on the login page. Then in the menu, click on the module page to reach your catalog.\nOn PrestaShop 1.6, this page can be found in “Module \u0026amp; Services”. Click on “Update all” at the top of the page to run all available upgrades:\n  On PrestaShop 1.7, the same feature can be found in the Improve \u0026gt;\u0026gt; Modules page, under the tab “Notifications”:\n  1-click upgrade module About If the manual process seems too tedious, other solutions exist to complete an upgrade.\nPrestaShop provides the module 1-click upgrade for free on the marketplace and your shop administration panel. It executes the previously given process automatically, and is available for almost all versions of PrestaShop.\nNote about version +4.0.0 This module has been reworked internally for PrestaShop 1.6 \u0026amp; 1.7.\nTechnical details about this major version can be found on a specific document (Google docs).\nDownload / Installation  Download from the marketplace: https://addons.prestashop.com/en/data-migration-backup/5496-.html  Then, import your module archive on the modules page. To do so, you can find the button “Upload a module” (PrestaShop 1.7) or “Add a module” (PrestaShop 1.6) at the top right of the page. Clicking on it will open a form that will allow you to upload your module zip.\nOn PrestaShop 1.7:\n  On PrestaShop 1.6:\n   From the administration panel  On PrestaShop 1.7:\n  On PrestaShop 1.6:\n  Usage The configuration page of the module displays some checks and the options available for an upgrade.\n  The first configuration lets you choose what kind of upgrade you want to run. It is always recommended to stick with the minor / major branches of the options, as they use some additional information provided by PrestaShop (md5 checksum, core files to delete\u0026hellip;).\n  It is always recommended to let the module make its own backup, because it will allow it to immediately run a rollback if something goes wrong during the upgrade.\nHowever, if you are confident in the backup you have made and are ready to rollback manually in case of trouble, you can disable the backup step.\n  Finally, the last options customizing the upgrade process let you keep any changes you have done to the default theme, mails etc.\n  If the configuration chosen and the self-checks are valid, a button “Upgrade Now” will be available. Clicking immediately start the upgrade.\nNote the interface may be unfriendly to you, but it displays as most information as possible to let you know what happened in case of trouble. Let the process run until the message “Upgrade successful” appears. If an error is found, you will be given the choice to rollback.\nSupport service Doing an upgrade by yourself can be risky. If you feel uncomfortable with doing it on your own, you can leave it to our support team who will handle the backup and the upgrade to the last minor version for you (1.6 → 1.6, 1.7 → 1.7 etc.).\nBasically, the process and the result will be the same. The existing data on the shop will be kept, as well as your module and your current theme.\nYou can subscribe for this service on the marketplace: https://addons.prestashop.com/en/support/18689-upgrade-pack-prestashop.html\nMany agencies and freelancers in your area may also provide this kind of service.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/legacy/",
	"title": "Legacy",
	"tags": [],
	"description": "",
	"content": " Legacy This section describes components from the Legacy architecture.\n Legacy Controllers   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/templates/notifications/",
	"title": "Notifications",
	"tags": [],
	"description": "",
	"content": " Notifications Throughout the whole front office, the customer can receive notification messages from PrestaShop, to inform about successes or errors for instance. Your theme can also send notifications when certain events occur.\nThe notification messages are not hard-coded in the template files, but are sent from the controller, so that you have consistency in case you update/change your theme. Thus, this way there is a better chance that all notification messages are already translated into your language!\nTypes of notifications An array of notification is passed to the templates, containing at least one of these:\n success An action was performed and everything went well. error Something went wrong. warning Important notice the merchant should know about. info \u0026ldquo;just so you know\u0026rdquo;.  How to display notifications In the Starter Theme, notifications are implemented as a partial template file:\n\u0026lt;aside id=\u0026quot;notifications\u0026quot;\u0026gt; {if $notifications.error} {block name='notifications_error'} \u0026lt;article class=\u0026quot;notification notification-danger\u0026quot; role=\u0026quot;alert\u0026quot; data-alert=\u0026quot;danger\u0026quot;\u0026gt; \u0026lt;ul\u0026gt; {foreach $notifications.error as $notif} \u0026lt;li\u0026gt;{$notif nofilter}\u0026lt;/li\u0026gt; {/foreach} \u0026lt;/ul\u0026gt; \u0026lt;/article\u0026gt; {/block} {/if} {if $notifications.warning} {block name='notifications_warning'} \u0026lt;article class=\u0026quot;notification notification-warning\u0026quot; role=\u0026quot;alert\u0026quot; data-alert=\u0026quot;warning\u0026quot;\u0026gt; \u0026lt;ul\u0026gt; {foreach $notifications.warning as $notif} \u0026lt;li\u0026gt;{$notif nofilter}\u0026lt;/li\u0026gt; {/foreach} \u0026lt;/ul\u0026gt; \u0026lt;/article\u0026gt; {/block} {/if} {if $notifications.success} {block name='notifications_success'} \u0026lt;article class=\u0026quot;notification notification-success\u0026quot; role=\u0026quot;alert\u0026quot; data-alert=\u0026quot;success\u0026quot;\u0026gt; \u0026lt;ul\u0026gt; {foreach $notifications.success as $notif} \u0026lt;li\u0026gt;{$notif nofilter}\u0026lt;/li\u0026gt; {/foreach} \u0026lt;/ul\u0026gt; \u0026lt;/article\u0026gt; {/block} {/if} {if $notifications.info} {block name='notifications_info'} \u0026lt;article class=\u0026quot;notification notification-info\u0026quot; role=\u0026quot;alert\u0026quot; data-alert=\u0026quot;info\u0026quot;\u0026gt; \u0026lt;ul\u0026gt; {foreach $notifications.info as $notif} \u0026lt;li\u0026gt;{$notif nofilter}\u0026lt;/li\u0026gt; {/foreach} \u0026lt;/ul\u0026gt; \u0026lt;/article\u0026gt; {/block} {/if} \u0026lt;/aside\u0026gt;  \u0026hellip;and are then included in the template file:\n{block name='notifications'} {include file='_partials/notifications.tpl'} {/block}  Add your own message in your front controller Your front controller holds the 4 following variables:\n $this-\u0026gt;errors $this-\u0026gt;success $this-\u0026gt;warning $this-\u0026gt;info  They are PHP arrays, and they hold messages as a string.\nSince PrestaShop 1.7, you can redirect the customer AND display a message after an action.\n$this-\u0026gt;success[] = $this-\u0026gt;l('Information successfully updated.'); $this-\u0026gt;redirectWithNotifications($this-\u0026gt;getCurrentURL());  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/payment/",
	"title": "Payment modules",
	"tags": [],
	"description": "",
	"content": " Payment modules PrestaShop 1.7 introduces a new payment API. Below, you\u0026rsquo;ll find information about how it works and also, how to migrate your module from PrestaShop 1.6 (and earlier) to PrestaShop 1.7.\nThe main reason why the change was needed is on the customer side: Now, there is only one button to validate the order, not one by payment module anymore.\nRequirements To make a payment module for PrestaShop 1.7, you\u0026rsquo;ll have to respect some elements:\n Your class will have to extend PaymentModule. You will need to declare the following namespace.\nuse PrestaShop\\PrestaShop\\Core\\Payment\\PaymentOption;  You\u0026rsquo;ll have to register the two following methods: hookPaymentOptions() \u0026amp; hookPaymentReturn() and register these hooks.\n You must not have a submit button into your module\u0026rsquo;s HTML code. It will automatically be generated by PrestaShop.\n  In the hookPaymentOptions() method, you have to return an array of PaymentOption.\nHow to generate your PaymentOption PaymentOption Here is a list of the PaymentOption class variables. They all have a getter and a setter and are accessible in the array sent to the front office template.\n $callToActionText: The text displayed as the payment method name. $additionalInformation: Additional information to display to the customer. This is free HTML, and may be used by modules such as bankwire to display to which account the bank transfer should be made. $logo: The URL to a picture to display in the payment option selection widget. $action: The URL to which the request to process the payment must be made. $inputs: An associative array of additional parameters to use when sending the request to $action. $form: The custom HTML to display like a form to enter the credit card information. $iframe: The custom HTML containing an iframe with the payment confirmation widget for modules like ATOS. $moduleName: The name of the module. $binary: A boolean to set if the module form was generated by binaries and contains a submit button. It\u0026rsquo;s necessary to adapt the behavior.  PaymentOption types You can find a example module illustrating the four identified cases of payment modules on GitHub.\nWe have identified four cases of payment module:\nOffline  This is the most simple case where you could be (e.g.:Bankwire, Cheque). It\u0026rsquo;s a simple URL to call, then various information are displayed to the customer.\nThe minimal variables to set are $callToActionText and $action. You can check the getOfflinePaymentOption() method of paymentexample to have an example.\n  External  It\u0026rsquo;s a simple URL to call, then the payment is directly processed on the Payment Service Provider\u0026rsquo;s website (e.g.: PayPal, Paybox).\nThe minimal variables to set are $callToActionText and $action. The form will be sent by POST and you can add hidden inputs such as a token, by using setInput() method. You can check the getExternalPaymentOption() method of paymentexample to have an example.\n  Embedded  You write your credit card number and all the required data directly on the merchant\u0026rsquo;s website (e.g.: Stripe).\nThe minimal variables to set are $callToActionText and $form. You can check the getEmbeddedPaymentOption() method of paymentexample to have an example.\n  iFrame  The payment form is displayed on the merchant\u0026rsquo;s website, but inside an iFrame.\nThe minimal variables to set are $callToActionText and $additionalInformation. You can check the getIframePaymentOption() method of paymentexample to have an example.\n  Migrating from 1.6 to 1.7 How-To You need to change the payment hook where your module is hooked on by paymentOption. It\u0026rsquo;s not a display hook anymore, so you must not use the $this-\u0026gt;display() method to retrieve a template, but use the $this-\u0026gt;context-\u0026gt;smarty-\u0026gt;fetch() method instead.\nThen, implement the hookPaymentOptions() function to return an array of PaymentOption.\nNext, you\u0026rsquo;ll need to identify the type of your payment module to know which variables are mandatory.\nWhat if I can\u0026rsquo;t remove the submit button? As you may read it above, you must not have a submit button into your module\u0026rsquo;s HTML code, because PrestaShop will automatically generate it. If you can\u0026rsquo;t remove the submit button from the form for some reasons (e.g.: the form is generated by binaries), we have implemented another way to make your module PrestaShop 1.7 compatible. But, note that this is NOT the recommended way to do it.\nTo do this, you\u0026rsquo;ll need to implement a supplementary hook: displayPaymentByBinaries. It\u0026rsquo;s made to display the payment form, and it will replace the unique payment button in the checkout.\nYou\u0026rsquo;ll also need to set the $binary variable to true. It will adapt the behavior to hide the payment button and replace it by the form when the payment option is selected.\nHooks The params passed to the following hooks have been modified:\n hookPaymentReturn hookDisplayOrderConfirmation  BEFORE    Key Value     total_to_pay Result of $order-\u0026gt;getOrdersTotalPaid()   currency Currency sign (string)   currencyObj The loaded currency (Currency class)   objOrder The current order object (Order class)    AFTER    Key Value     order The current order object (Order class)    Everything can be retrieved, for example:\n$currency = new Currency($params['order']-\u0026gt;id_currency); $total_to_pay = $params['order']-\u0026gt;getOrdersTotalPaid();  Real life example See the bankwire module for an example of how we migrated a simple 1.6 module to 1.7.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/getting-started/starter-theme/",
	"title": "Starter Theme",
	"tags": [],
	"description": "",
	"content": " Starter Theme PrestaShop 1.7 introduces a new way for designers to create their theme from scratch: the Starter Theme. The default theme for PS 1.7 is based on the Starter Theme.\nFor pretty much every CMS, the default theme is used as a framework to build custom theme: designers have to rework the default theme and reshape it into what they want to display. Sometimes that means having to spend a lot of time removing all the CSS rules and JavaScript code from the default theme, and rewriting everything. This means a LOT of work before even starting to actually create something original.\nThis means that a lot of themes are tied to the default theme\u0026rsquo;s technical choices, because this way of working makes it hard to make your own choices. For instance, since the default theme uses Bootstrap, it\u0026rsquo;s hard to use Foundation.\nWith the Starter Theme, the PrestaShop team decided to build a skeleton theme that will give you a kickstart for your custom theme, with all the minimum code (essential template files, markup and JavaScript code) and enough freedom to make your own choices. You can choose to use Bootstrap, Foundation or Blueprint. The Starter Theme is not opinionated: there is no decision made to use either one library or another.\nBy using the Starter Theme as the foundation for your custom theme, everything is ready for you, you just have to create upon it.\nDownloading the Starter Theme The Starter Theme is available on GitHub.\nIf you download the StarterTheme and select it as the theme for your store, you will see minimalistic theme with an overly simplistic style. This is only for development purpose. You should NOT use the Starter Theme as is, and you should NOT use its default CSS rules nor include them in your theme: please delete all files inside _dev/css.\nThe jQuery v2 library is loaded by the core.js file.\n Please note that if you want to sell your theme on the PrestaShop Addons marketplace, there are some specific requirements. For instance, Addons-distributed themes MUST use Bootstrap 4.\n Modify. Don\u0026rsquo;t override. When you want to create a new theme, copy and paste all files from the Starter Theme inside your empty theme directory. Then you start modifying it, and building your own theme.\nDo not use it as a parent theme, you will only run into trouble and waste your time.\nOnce you removed all style in _dev/css, your theme should like this:\nRead also our articles on build.prestashop.com.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/",
	"title": "Theme development reference",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://devdocs.prestashop.com/1.7/documentation/how/writing-markdown/",
	"title": "Writing Markdown",
	"tags": [],
	"description": "",
	"content": " Writing Markdown This site was created using the wonderful Hugo static site generator, but the content itself is written using Markdown.\nDon\u0026rsquo;t worry, you don\u0026rsquo;t need to know anything about Hugo or the Go language to write documentation. The Markdown syntax is basically plain text with some simple added syntax for styling.\nIf you don\u0026rsquo;t know Markdown yet, have a look at this quick Markdown guide from GitHub.\nExtended features: Shortcodes Hugo uses special short codes for many things. Read about them here.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/hooks/",
	"title": "Hooks",
	"tags": [],
	"description": "",
	"content": " How to migrate hooks Hooks are the most important feature for the PrestaShop developers because they allow them to improve PrestaShop by adding code or content in multiple points of the application. For Symfony developers, you can see that as Events on steroids. To keep some degree of compatibility with 1.6 or 1.7 (pre-Symfony migration) modules, we need to ensure that hooks are still available, invoked and/or rendered at the right place.\nGetting the list of available Hooks in modern pages is really easy. Thanks to the hook profiler introduced in 1.7.3, the Symfony debug bar displays the list of available hooks (alongside some useful information) on a given page. Sadly, this is only available on Symfony pages, since the legacy system doesn\u0026rsquo;t have any way to get the list of hooks dispatched for a page.\nGetting the list of hooks on a legacy page Use this trick to find out which hooks are called on a legacy page.\nIn classes/Hook, find the exec() function and add the following code:\nfile_put_contents('hooks.txt', PHP_EOL. $hook_name, FILE_APPEND | LOCK_EX);  After applying this change, access the url of the page you want to migrate. In admin-dev/hooks.txt, you\u0026rsquo;ll see the list of available hooks in the legacy page.\nNow, create a simple module that hooks on each one of these hooks and renders something visible that you can retrieve in the new page.\nNote that only hooks that are prefixed by \u0026ldquo;display\u0026rdquo; are rendered to a page. For the others ones in modern pages, you can register the hook, use the dump() function and then check if the dump() call has been registered by the profiler.\n This is an example with the Logs page (still in progress as of 12/12/2017):\n  Legacy page     Modern page   Dispatching hooks in a modern Controller You can dispatch a hook using the controller helper dispatchHook($name, array $parameters):\n$this-\u0026gt;dispatchHook('actionAdminPerformanceControllerPostProcessBefore', array('controller' =\u0026gt; $this));  Dispatching hooks using the Hook dispatcher If you need to dispatch a hook from a non-controller class, you\u0026rsquo;ll need to inject the HookDispatcher class.\nIf your class is defined as a Symfony service, the HookDispatcher is available as a service called prestashop.core.hook.dispatcher.\nuse PrestaShopBundle\\Service\\Hook\\HookEvent; use PrestaShop\\PrestaShop\\Core\\Hook\\HookDispatcher; $hookEvent = new HookEvent(); $this-\u0026gt;hookDispacher-\u0026gt;dispatchWithParameters($eventName, $parameters);  Under the hood, we use an instance of Symfony EventDispatcher.\n Dispatching/rendering hooks in Twig templates Some hooks are directly rendered in templates, because PrestaShop developers want to add/remove information from blocks. Of course you can do it using template override but you may lose compatibility if templates are updated in later versions of PrestaShop.\n{{ renderhook( 'hookName', { 'param1': 'value1', 'param2': 'value2' } ) }}  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/templates/listing/",
	"title": "Listing pages",
	"tags": [],
	"description": "",
	"content": " Listing pages Your catalog is mostly 2 things: a list of products and a detailed product page.\nThis section covers the listing pages, which includes: category, search result, products per brand, best seller list, new product list and so on.\nIn order to reduce code duplication, the only necessary template is the file catalog/listing/product-list.tpl.\nExtending product-list template We already covered how PrestaShop chooses the right template to use so we know that the category template extends the product-list template.\nWe already covered how the template inherience allows you to redefine only a small part of bigger template.\nSo basically you are all set to create a category template or a search result template that make much more than the product-list template!\nAJAX page update Your product list will change as the customer filters the result with faceted navigation or sorting options for instance.\nOne of the golden rule of StarterTheme and PrestaShop 1.7 is: No presentation code duplication. Hence we didn\u0026rsquo;t want to return json data about the result and let javascript reconsistitute the page.\nWe made the core generate the sub template part and return it to the client. In the end javascript is only used to the place the content of HTML placeholders.\nEach ajax call will regenerate the following templates:\n catalog/_partials/products-top.tpl catalog/_partials/products.tpl catalog/_partials/products-bottom.tpl  How to update the view PrestaShop will emit JavaScript events to let you know what to do something.\nExample:\nimport $ from 'jquery'; import prestashop from 'prestashop'; import 'velocity-animate'; $(document).ready(() =\u0026gt; { prestashop.on('updateProductList', (data) =\u0026gt; { updateProductListDOM(data); }); }); function updateProductListDOM (data) { $('#search_filters').replaceWith(data.rendered_facets); $('#js-active-search-filters').replaceWith(data.rendered_active_filters); $('#js-product-list-top').replaceWith(data.rendered_products_top); $('#js-product-list').replaceWith(data.rendered_products); $('#js-product-list-bottom').replaceWith(data.rendered_products_bottom); }  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/getting-started/theme-organization/",
	"title": "Theme organization",
	"tags": [],
	"description": "",
	"content": " Theme organization Directory structure A PrestaShop theme is a set of files which you can edit in order to change the look of your online shop.\nHere are a few important tidbits:\n All themes have their files located in the /themes folder, at the root of PrestaShop\u0026rsquo;s folder. Each theme has its own sub-folder, in the main themes folder. Each theme is made of template files (.tpl), image files (.jpg, .png and such), one or more CSS files (.css), and usually JavaScript files (.js). Each theme has a preview.png image file in its folder, enabling the shop-owner to see what the theme looks like directly from the back office, and select the theme appropriately.  The best way to learn how to create a theme for PrestaShop 1.7 is to dive into the StarterTheme.\nHere is its organization, which is explained further below.\n. ├── CONTRIBUTING.md ├── README.md ├── _dev │ ├── css │ │ └── ... │ ├── js │ │ └── ... │ ├── package.json │ └── webpack.config.js ├── assets │ ├── css │ │ ├── ... │ ├── img │ │ └── ... │ └── js │ └── ... ├── composer.json ├── config │ └── theme.yml ├── modules │ └── ... ├── plugins │ └── ... ├── preview.png └── templates ├── _partials │ └── ... ├── catalog │ ├── _partials │ │ └── ... │ ├── listing │ │ └── ... │ └── ... ├── checkout │ ├── _partials │ │ └── ... │ └── ... ├── cms │ ├── _partials │ │ └── ... │ └── ... ├── contact.tpl ├── customer │ ├── _partials │ │ └── ... │ └── ... ├── errors │ ├── ... │ └── static │ └── ... ├── index.tpl ├── layouts │ ├── layout-both-columns.tpl │ ├── layout-content-only.tpl │ ├── layout-error.tpl │ ├── layout-full-width.tpl │ ├── layout-left-side-column.tpl │ └── layout-right-side-column.tpl ├── page.tpl └── wrapper.tpl  The folders are used this way:\n /_dev/ Contains the raw development files for your SCSS, JavaScript and image assets.\nThey are to be compiled using Webpack, and turned into production assets. /assets/ Contains the production assets, compiled by Webpack from the _dev files. /config/ Contains configuration file. By default, it only has the theme.yml file. /module/ Contains either theme-specific modules, or the theme\u0026rsquo;s version of native modules\u0026rsquo; template files.\nFor instance, the themes/classic/modules/ps_categorytree/views/templates/front/ps_categorytree.tpl file replaces the Category module\u0026rsquo;s own modules/ps_categorytree/views/templates/front/ps_categorytree.tpl /plugins/ Your custom smarty plugins /templates/ Contains the template files themselves (.tpl), mostly in contextual subfolders (catalog, checkout, cms, etc.).\nThe _partials folder contains \u0026ldquo;partial templates\u0026rdquo;, which means parts that can used by / included into several templates: header.tpl, breadcrumb.tpl, footer.tpl, etc.\nThis prevents redundant code blocks, and makes themes easier to maintain.  Required templates and libraries Required templates When you install/enable a theme, PrestaShop checks if the theme is valid: it looks for the theme.yml file (and checks its content), its declared compatibility, and the existence of some files.\nThere is a list of files that need to exists, even if they\u0026rsquo;re empty. Please see dedicated documentation to know what makes a theme valid.\nIt could be that you\u0026rsquo;ve built some sort of groundbreaking theme and it doesn\u0026rsquo;t exactly work like the Starter Theme does. For instance, if you don\u0026rsquo;t have a product page, then you don\u0026rsquo;t need the product.tpl file. In that case, you just have to create an empty product.tpl file. Be nice to the next developer and add a comment indicating where the code related to products can be found ;)\nRequired libraries jQuery v2.1 is loaded by the core (bundled in core.js) file, but no other libraries, since the idea is that the Starter Theme should not be opinionated.\nRead more about assets management.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/grid-crud-page/",
	"title": "Grid / CRUD",
	"tags": [],
	"description": "",
	"content": " How to migrate a Grid/CRUD page In PrestaShop\u0026rsquo;s Back Office, most of the pages are organized the same way.\nWe can already see 2 categories of pages that represent almost 90% of back office:\n Configuration pages: forms that alter the configuration; CRUD pages: pages with a filterable/searchable table of data and some options to access a form of creation/edition;  CRUD pages provide a lot of features.\nAccess to a lot of data, ordered by column: this data can be simple (text) or more complex (display a thumbnail). These columns are ordered and can be altered by developers: we can change position, add or remove columns for instance.\nAll tables are paginated and can be filtered by value for a specific column, for instance re-organize the value ordered by decreasing price.\nFurthermore, all tables can be filtered using criteria: every column is a criterion and may be used to build the data.\nFinally, all tables are provided with common actions: export, access to SQL manager, \u0026hellip; and common bulk actions.\nIn PrestaShop, all grids in modern CRUD pages are managed by the Grid component.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/",
	"title": "PrestaShop components",
	"tags": [],
	"description": "",
	"content": " Components  The Position Updater component   The Import component   The Grid component   The Faceted Search component   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/testing/",
	"title": "Testing",
	"tags": [],
	"description": "",
	"content": " Testing Creating tests is an important part of a module life. In PrestaShop, we plan to cover our modules features with a bundle of unit and functional tests. We let you chose what frameworks suits you the best, but you have to know you\u0026rsquo;re not alone. As we have the same needs, we provide some tools you can reuse to help you during your journey.\nDocker images Docker isolate your application in containers, making their isolation and deployment easier. If you\u0026rsquo;re confident with using it, we created several images for easier deployment of PrestaShop:\n https://hub.docker.com/r/prestashop/prestashop/, in which all PrestaShop releases between 1.4 and 1.7 can be found. Covers most needs and is perfect for a quick start. https://hub.docker.com/r/prestashop/prestashop-git/, containing the git repository content with different PHP version. For advanced users. https://hub.docker.com/r/prestashop/base/, containing the required stack to run PrestaShop, without the core files. Recommended if you already have the shop files on your disk.  Please note we try to follow best practices, and the MySQL is NOT provided with these images. You have to deploy your own server in a dedicated container.\nWhen your environment is ready, it\u0026rsquo;s time to configure it before running tests.\nModule management in command line  From PrestaShop 1.7.2.0\n Managing your modules was only possible from the administration inferface. Continuous integration of modules may require preliminary steps like their installation, that\u0026rsquo;s why we added a simple way to manage them in command line.\nphp bin/console prestashop:module --help  Usage: prestashop:module \u0026lt;action\u0026gt; \u0026lt;module name\u0026gt; [\u0026lt;file path\u0026gt;] Arguments: action Action to execute (Allowed actions: install / uninstall / enable / disable / enable_mobile / disable_mobile / reset / upgrade / configure). module name Module on which the action will be executed file path YML file path for configuration  Use php app/console instead of php bin/console for versions prior to 1.7.4 \n Basic actions The basic actions are the same as you can see on the module list and only require the module name.\n install uninstall enable disable enable_mobile disable_mobile reset upgrade  Example:\nphp bin/console prestashop:module install paypal  Use php app/console instead of php bin/console for versions prior 1.7.4 \n Multishop In case you want to run your action for a specific shop or shop group, you have two optionnal parameters --id_shop=\u0026lt;id\u0026gt; and --id_shop_group=\u0026lt;id\u0026gt; which modify the current shop context before calling the actual command.\nConfiguration This feature allows an automatic configuration of your module but DOES NOT display the configuration page.\nThis feature targets any developers who would like to test its modules after an installation without having to pass the configuration screen, or an agency who has a generic configuration to set on every shops. With only one command, we expect a module to be totally functional for tests or production.\nIf we reuse the previous command, we could expect something like this:\nphp bin/console prestashop:module configure \u0026lt;module name\u0026gt; [\u0026lt;YML file path\u0026gt;]  Use php app/console instead of php bin/console for versions prior 1.7.4 \n Source of data configuration When not provided, we use by default a file self_config.yml stored in the module root folder. You can use another file by setting the the \u0026lt;YML file path\u0026gt;.\nFormat supported We are going to make it simple and allow only file extension: yaml.\nExample:\n# This file is an example of data configuration which can be applied to a module # Data to be updated in Configuration table configuration: update: # Option 1: having a pair key/value PAYPAL_SANDBOX: 1 PAYPAL_API_CARD: 0 # Option 2: use \u0026quot;value\u0026quot; subkey. Will allow to use additional keys later PAYPAL_SANDBOX: value: 1 multilang: false # Question: how to handle multi lang values ? delete: - \u0026quot;PAYPAL_ONBOARDING\u0026quot; # SQL files to execute sql: - file: \u0026quot;path/to/file1.sql\u0026quot; # But key is optional - \u0026quot;path/to/file2.sql\u0026quot; - \u0026quot;sql/default-config.sql\u0026quot; # File to copy from local disk or website files: - source: \u0026quot;/path/to/source/file.txt\u0026quot; dest: \u0026quot;/module/path/docs/file.txt\u0026quot; - source: \u0026quot;https://www.domain.wow/uri/of/file\u0026quot; dest: \u0026quot;/module/path/docs/another_file.txt\u0026quot; # Fox complex configuration data, allow PHP code to be executed php: - file: \u0026quot;path/to/file.php\u0026quot; # Must have a class which implements interface PrestaShop\\PrestaShop\\Adapter\\Module\\Configuration\\ModuleComplexConfigurationInterface params: - myParam1: 1 - oneArrayParam: - \u0026quot;value1\u0026quot; - \u0026quot;value2\u0026quot; - withSpecificKey: \u0026quot;value3\u0026quot;  Functional tests PrestaShop provides its own test suite, running with selenium. It covers the features of PrestaShop and grows each time a bug is resolved or a feature is added.\nThese tests are launched every time a change is suggested to the core, but you can also run them with your module installed. You will certify it did not break a critical feature of the core.\nThis section will be completed when these tests will be available on a dedicated repository. In the meantime you can already reach them on GitHub, in the tests/E2E folder of PrestaShop files.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/getting-started/theme-yml/",
	"title": "Theme.yml",
	"tags": [],
	"description": "",
	"content": " Theme.yml The theme\u0026rsquo;s theme.yml file defines all of the theme\u0026rsquo;s configuration and meta information, such as its version number, layouts, compatibility range, hook configuration, etc.\nTheme description The theme\u0026rsquo;s name MUST match its directory name. For instance, if the theme is named \u0026ldquo;My Awesome Theme\u0026rdquo; and its \u0026lsquo;name\u0026rsquo; value is set to \u0026ldquo;my-awesome-theme\u0026rdquo;, then the folder MUST be /my-awesome-theme .\nUsers will be able to choose the layout for each page from the theme\u0026rsquo;s settings page. Layouts are automatically parsed from the theme\u0026rsquo;s /templates/layouts folder, so this configuration key is optional, but it allows designers to provide some more user-friendly info than just a filename.\nname: StarterTheme # The name must match the directory name display_name: Starter Theme version: 1.0.0 theme_key: 3c6e0b8a9c15224a8228b9a98ca1531d # Needed by PrestaShop Addons author: name: \u0026quot;John Doe\u0026quot; email: \u0026quot;pub@prestashop.com\u0026quot; url: \u0026quot;http://www.prestashop.com\u0026quot; meta: compatibility: from: 1.7.0.0 to: ~ available_layouts: layout-full-width: name: Full width layout description: Ideal for product pages to maximize picture size layout-left-side-column: name: One small left column description: Great for CMS pages to show advertisements on the side  Global settings Configuration You can have the theme change the configuration of PrestaShop when the theme is enabled.\nglobal_settings: configuration: PS_QUICK_VIEW: false NEW_PRODUCTS_NBR: 4 PS_PNG_QUALITY: 8  Modules You can have the theme enable, disable or reset modules when the theme is enabled.\nglobal_settings: modules: to_enable: # All modules below are enabled when # the theme is enabled (and installed if needed). # They are disabled when the theme is disabled. - my-custom-module - yippeeslider to_disable: # All modules below are disabled when the theme is enabled. # They are re-enabled when the theme is disabled. - homeslider - blockwishlist to_reset: # All modules below are reset when the theme is enabled. - blockreassurance - blockwishlist  You can also have the theme create hooks and attach modules to custom and existing hooks when the theme is enabled.\nglobal_settings: hooks: custom_hooks: - name: displayFooterBefore title: displayFooterBefore description: Add a widget area above the footer modules_to_hook: displayHeaderTop: # displayHeaderTop will have exactly the following # modules hooked to it, in the specified order. # Each module in this list will be unhooked # from all other display hooks it is hooked to. - blocklanguages - blockcurrencies - blockuserinfo displayHeaderMiddle: # displayHeaderMiddle will have whatever is currently hooked to it # kept hooked to it, and blocksearch will be appended # to the list (or moved to the end if already hooked there). - ~ - blocksearch displayHeaderBottom: # displayHeaderBottom will have blocktopmenu and blockcart # prepended to it. - blocktopmenu - blockcart - ~ displayFooter: - blocknewsletter displayLeftColumn: # blockcategories is hooked on all pages on displayLeftColumn - blockcategories # blocktags is hooked on displayLeftColumn on all pages # except \u0026quot;category\u0026quot; and \u0026quot;index\u0026quot; - blocktags: except_pages: - category - index  Image settings Enabling the theme will remove all the existing image types.\nTherefore, themes MUST declare their image types, and what they apply to.\nglobal_settings: image_types: cart_default: width: 80 height: 80 scope: [products] small_default: width: 125 height: 125 scope: [products, categories, manufacturers, suppliers] medium_default: width: 300 height: 300 scope: [products, categories, manufacturers, suppliers] large_default: width: 500 height: 500 scope: [products] home_default: width: 250 height: 250 scope: [products] category_default: width: 960 height: 350 scope: [categories] product_listing: width: 220 height: 220 scope: [products, categories, manufacturers, suppliers] large_banner: width: 960 height: 400 scope: [categories]  Theme settings All the settings below can be changed through an interface in the theme\u0026rsquo;s back office interface, and only depend on the theme/shop combination.\nWhen the theme.yml file is parsed by PrestaShop, the \u0026lsquo;theme_settings\u0026rsquo; configuration key is copied to a file named settings_n.yml, where \u0026lsquo;n\u0026rsquo; is the id of the shop where the theme is installed (settings_123456.yml, for instance).\nWhen the configuration is changed through the back office interface, only the settings_n.yml file is updated - the theme.yml file remains unchanged.\nglobal_settings: theme_settings: default_layout: layout-full-width layouts: # Specific layout for some pages identity: layout-left-side-column order-confirmation: layout-left-side-column  Dependencies When making a theme you may want to add features with custom modules. It\u0026rsquo;s important that these modules are installed with your theme. These modules should be declared as dependencies so you\u0026rsquo;re sure prestashop will export them when creating your theme zipball.\nSo far themes only have modules dependencies.\ndependencies: modules: - xx_customslider - xx_customproductpage  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/internationalization/",
	"title": "Internationalization",
	"tags": [],
	"description": "",
	"content": " Internationalization PrestaShop has been designed to be adaptable to any country, region, language or culture. In this section you\u0026rsquo;ll learn more about how to work with PrestaShop\u0026rsquo;s internationalization features.\nIn this section  Translation   Right-To-Left languages   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/clean-up/",
	"title": "Cleaning up",
	"tags": [],
	"description": "",
	"content": " Cleaning up Once everything is migrated, refactored, extracted to specific classes and working like a charm, it\u0026rsquo;s time to remove the old, migrated parts:\n Delete the old controller. Delete the old templates (delete the admin-dev/themes/default/template/controller/{name} folder. Delete the related \u0026ldquo;legacy tests\u0026rdquo;.  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/core_updates/",
	"title": "Core changes",
	"tags": [],
	"description": "",
	"content": " Core changes In this section you can find important changes in the core that may impact your modules.\n Changes in PrestaShop 1.7.5   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/employee-name-with-avatar/",
	"title": "EmployeeNameWithAvatarColumn reference",
	"tags": [],
	"description": "",
	"content": " EmployeeNameWithAvatarColumn Type  It is special type of column that allows you to add employee name with avatar column to your Grid. You can see how it looks be default:\n  Employee name with avatar column   Available options    Properties Type Expected value     field string required Employee\u0026rsquo;s name field.    field type: string required\nEmployee\u0026rsquo;s name field.\nExample usage use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Employee\\EmployeeNameWithAvatarColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $employeeColumn = new EmployeeNameWithAvatarColumn('employee'); $employeeColumn-\u0026gt;setName('Employee'); $employeeColumn-\u0026gt;setOptions([ 'field' =\u0026gt; 'employee', ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($employeeColumn);  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/register-new-hook/",
	"title": "Register a new hook",
	"tags": [],
	"description": "",
	"content": " How to register a new Hook in PrestaShop This is basically three steps:\n dispatch the hook in the code (in templates or PHP classes/files); update the hooks xml definition of Installer; update the hooks table for \u0026ldquo;Auto Upgrade\u0026rdquo; system;  Dispatching hooks Most of the time, you will dispatch the hook using an instance of HookDispatcher. It can be retrieved from the service container and/or injected, as it\u0026rsquo;s done for example in Form Handlers:\nfinal class FormHandler extends AbstractFormHandler { /* [...] */ public function getForm() { $formBuilder = $this-\u0026gt;formFactory-\u0026gt;createBuilder() -\u0026gt;add('general', GeneralType::class) -\u0026gt;add('upload_quota', UploadQuotaType::class) -\u0026gt;add('notifications', NotificationsType::class) -\u0026gt;setData($this-\u0026gt;formDataProvider-\u0026gt;getData()) ; $this-\u0026gt;hookDispatcher-\u0026gt;dispatchWithParameters( 'displayAdministrationPageForm', ['form_builder' =\u0026gt; \u0026amp;$formBuilder] ); return $formBuilder-\u0026gt;setData($formBuilder-\u0026gt;getData())-\u0026gt;getForm(); } /* [...] */ }  Hooks definition file During the installation, hooks listed in the install-dev/data/xml/hook.xml file are stored on database and made available in PrestaShop. Even if this step is not a requirement – hooks can be declared from templates or generated dynamically – it\u0026rsquo;s a good practice to do it. Also, every hook registered in Database will be displayed in the Hook debugger, so it will help the developer figure out which hooks are available.\nEach hook has a name, a title and a definition. They are identified by an additional id attribute in XML, which is the same as its name.\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;entity_hook\u0026gt; \u0026lt;fields id=\u0026quot;name\u0026quot;\u0026gt; \u0026lt;field name=\u0026quot;name\u0026quot;/\u0026gt; \u0026lt;field name=\u0026quot;title\u0026quot;/\u0026gt; \u0026lt;field name=\u0026quot;description\u0026quot;/\u0026gt; \u0026lt;/fields\u0026gt; \u0026lt;entities\u0026gt; \u0026lt;hook id=\u0026quot;...\u0026quot;\u0026gt; \u0026lt;name\u0026gt;...\u0026lt;/name\u0026gt; \u0026lt;title\u0026gt;...\u0026lt;/title\u0026gt; \u0026lt;description\u0026gt;...\u0026lt;/description\u0026gt; \u0026lt;/hook\u0026gt; \u0026lt;hook id=\u0026quot;actionMaintenancePageFormSave\u0026quot;\u0026gt; \u0026lt;name\u0026gt;actionMaintenancePageFormSave\u0026lt;/name\u0026gt; \u0026lt;title\u0026gt;Processing Maintenance page form\u0026lt;/title\u0026gt; \u0026lt;description\u0026gt;This hook is called when the Maintenance Page form is processed\u0026lt;/description\u0026gt; \u0026lt;/hook\u0026gt; \u0026lt;/entities\u0026gt; \u0026lt;/entity_hook\u0026gt; \u0026lt;/xml\u0026gt;  Always add new hooks at the bottom of the list, as hooks are registered sequentially.\n Prepare database update for auto upgrades The last step is to describe the update process for the auto upgrade module – essentially, the insertion of new hooks in hooks table. Locate the X.Y.Z.sql file that refers to the PrestaShop version that will include your change: for instance, if the release expected to include this change is 1.7.5.0, locate that file in install-dev/upgrade/sql folder.\nThis process is explained here: Structure and content upgrades\n Then add the corresponding SQL commands to add new hooks:\nINSERT IGNORE INTO `PREFIX_hook` (`id_hook`, `name`, `title`, `description`, `position`) VALUES (NULL, 'displayAdministrationPageForm', 'Manage Administration Page form fields', 'This hook adds, update or remove fields of the Administration Page form', '1'), (NULL, 'actionMaintenancePageFormSave', 'Processing Maintenance page form', 'This hook is called when the Maintenance Page form is processed', '1');  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/compile-assets/",
	"title": "How to compile assets",
	"tags": [],
	"description": "",
	"content": " How to compile assets Some components in PrestaShop, like Javascript or SCSS files, need to be compiled to be usable.\nRequirements We use Webpack to compile assets. You only need NodeJS 8.x (get it here), NPM will take care of it all.\nAssets that need to be compiled  Back Office\n Default theme  SASS files\nLocated in admin-dev/themes/default/sass  New theme  SCSS files\nLocated in admin-dev/themes/new-theme/scss JS files\nLocated in admin-dev/themes/new-theme/js   Front Office  Core assets  JS files\nLocated in themes/_core/js  Classic theme  SCSS files\nLocated in themes/classic/_dev/css JS files\nLocated in themes/classic/_dev/js    Compiling assets  Switch to the root of the subproject\n   Subproject Path     Default theme cd admin-dev/themes/default/   New theme cd admin-dev/themes/new-theme/   FO Core cd themes/   Classic theme cd themes/classic/_dev/    Run npm install (first time only)\nnpm install  Run webpack\nnpm run build   Build all assets at once  You can rebuild all the assets at once by executing this command from the project root:\nsh tools/assets/build.sh  Watching for changes You can also make webpack listen for changes and compile only what\u0026rsquo;s needed as you work on your files:\nnpm run watch  Rebuild your changes before committing.\nThe \u0026ldquo;watch\u0026rdquo; build will optimize your assets for development. Please remember to rebuild for production when you are done using npm run build.\n Troubleshooting If npm install fails with error: Failed at the ... postinstall script.:\nYou may be using node version 9 or 10, you should use node version 8.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/mail/",
	"title": "How to send e-mails",
	"tags": [],
	"description": "",
	"content": " How to send e-mails Using the Mail::send() method The Mail core class extends ObjectModel\n This example is assuming you are using in a controller named mycontroller of a module named mymodule\n class mymodulemycontrollerModuleFrontController extends ModuleFrontController { public function initContent() { parent::initContent(); Mail::Send( (int)(Configuration::get('PS_LANG_DEFAULT')), // defaut language id 'contact', // email template file to be use ' Module Installation', // email subject array( '{email}' =\u0026gt; Configuration::get('PS_SHOP_EMAIL'), // sender email address '{message}' =\u0026gt; 'Hello world' // email content ), Configuration::get('PS_SHOP_EMAIL'), // receiver email address NULL, //receiver name NULL, //from email address NULL //from name ); } }  Prestashop will use the Shop Configuration to decide if use smtp connection or php mail function so check it out on backoffice or in app/config/parameter.php\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/sell/",
	"title": "Selling your modules on the Addons Marketplace",
	"tags": [],
	"description": "",
	"content": " Selling your modules on the Addons Marketplace Have you already developed modules or themes for your customers? Are you looking for a new revenue stream? You can sell your modules on the Addons Marketplace.\nLearn all about it in the Addons site: How to sell on the PrestaShop Addons.\nContributor modules need to pass a technical validation before being sold on the Marketplace.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/severity-level/",
	"title": "SeverityLevelColumn reference",
	"tags": [],
	"description": "",
	"content": " SeverityLevelColumn Type  Use this column to display severity level in your Grid.\nAvailable options    Properties Type Expected value     field string required Record field name which is used as severity level.   with_message bool default: false Whether to show severity level message in addition with numeric severity level value.    Example usage use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Status\\SeverityLevelColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $severityColumn = new SeverityLevelColumn('severity'); $severityColumn-\u0026gt;setName('Severity (1-4)'); $severityColumn-\u0026gt;setOptions([ 'field' =\u0026gt; 'severity', 'with_message' =\u0026gt; true, // enable severity messages ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($severityColumn);  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/testing/",
	"title": "Testing",
	"tags": [],
	"description": "",
	"content": " Testing You are encouraged to add both unit and functional tests for every new class you have created.\nYou must add a smoke test (also called \u0026ldquo;survival\u0026rdquo;) for every new page you migrate.\nSmoke testing A smoke test is a really simple and basic test that ensure the page will load with the right HTTP code. This won\u0026rsquo;t ensure the page will works as expected but if the test fails, this ensure the page is not functional.\nTo add a new test, you need to add a new entry in the Data Provider of SurvivalTest class:\n\u0026lt;?php namespace LegacyTests\\Integration\\PrestaShopBundle\\Controller\\Admin; // ... /** * @group demo * * To execute these tests: use \u0026quot;./vendor/bin/phpunit -c tests-legacy/phpunit-admin.xml --filter=SurvivalTest\u0026quot; command. */ class SurvivalTest extends WebTestCase { // [...] public function getDataProvider() { return [ 'symfony_route_of_page' =\u0026gt; ['Page title', 'symfony_route_of_page'], // ... ]; } }  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/",
	"title": "1.7",
	"tags": [],
	"description": "",
	"content": " PrestaShop 1.7  Basics   Core Development   Testing   PrestaShop modules   Themes   Documentation   Contribute   Scale   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/getting-started/asset-management/",
	"title": "Asset management",
	"tags": [],
	"description": "",
	"content": " Asset Management PrestaShop 1.7 has significantly improved the way assets (CSS, JavaScript and image files) are managed.\nWe advise theme developers to compile most of their style and JavaScript code into a single concatenated/minified file (see the Webpack section below).\nIf you need to add special assets, for example an extra JavaScript library on the home page or the product page, there are a few ways to do so.\nYour theme have to print assets correctly in the smarty template, and it\u0026rsquo;s explained in the template section.\nRegistering assets In PrestaShop 1.7+, it\u0026rsquo;s easy to register custom assets on each pages. The major improvement is that you can easily manage them from your theme, without any modules.\nWe introduced new methods to register assets, and especially new cool options.\nFor instance, you can register your asset specifically in the head or bottom of your HTML code; you can load it with attributes like async or defer; and you can even inline it easily.\nOne favorite option is the priority one, which makes it very easy to ensure everything is loaded in the order you need.\nBackward compatibility is kept for the addJS(), addCSS(), addJqueryUI() and addJqueryPlugin() methods. Incidentally, now is the best time to update your libraries and use the new method.\n Here is a list of options, and what they do.\nOptions PrestaShop\u0026rsquo;s FrontController class provides 2 new methods to easily register new assets: registerStylesheet() and registerJavascript().\nIn order to have the most extensible signatures, these 2 methods take 3 arguments. The first one is the unique ID of the asset, the second one is the relative path, and the third one is an array of all other optional parameters, as described below.\nID\nThis unique identifier needed for each asset. This is useful to either override or unregister something already loaded by the Core or a native module.\nRelative path\nThis is the path of your asset. In order to make your assets fully overridable and compatible with the parent/child feature, you need to provide the path from the theme\u0026rsquo;s root directory, or PrestaShop\u0026rsquo;s root directory if it\u0026rsquo;s a module.\nFor example:\n \u0026lsquo;assets/css/example.css\u0026rsquo; for something in your theme. \u0026lsquo;modules/modulename/css/example.cs\u0026rsquo; for something in your module.  Extra parameters for stylesheet\n  Name Values Comment  media  all|braille|embossed|handheld| print|projection|screen|speech| tty|tv (default: all)\n  no comment.  priority 0-999 (default: 50) 0 is the highest priority  inline true|false (default: false) If true, your style will be printed inside the \u0026lt;style\u0026gt; tag in your HTML \u0026lt;head\u0026gt;. Use with caution.    Extra parameters for JavaScript\n  Name Values Comment  position head|bottom (default: bottom) JavaScript files should be loaded in the bottom as much as possible. Remember: core.js is loaded first thing in the bottom so jQuery won't be loaded in the \u0026lt;head\u0026gt; part.  priority 0-999 (default: 50) 0 is the highest priority  inline true|false (default: false) If true, your style will be printed inside \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; tags inside your HTML. Use with caution.  attribute async|defer|none (default: none) Load JavaScript file with the corresponding attribute (Read more: Async vs Defer attributes)    Registered by the Core Every page of every theme loads the following files:\n theme.css custom.css rtl.css (if a right-to-left language is detected) core.js theme.js custom.js    Filename ID Priority Comment  theme.css theme-main 0 Most (all?) of your theme's styles. Should be minified.  rtl.css theme-rtl 900 Loaded only for Right-To-Left language  custom.css theme-custom 1000 Empty file loaded at the very end to allow user to override some simple style.  core.js corejs 0 Provided by PrestaShop. Contains Jquery2, dispatches PrestaShop events and holds PrestaShop logic.  theme.js theme-main 50  Most of your theme's JavaScript. Should embed libraries required on all pages, and be minified.\n   custom.js theme-custom 1000 Empty file loaded at the very end, to allow user to override behavior or add simple script.    Registering in themes By now you probably understood that this theme.yml file became the heart of PrestaShop themes.\nTo register assets, create a new assets key at the top level of your theme.yml, and register your files according to your needs. Page identifiers are based on the php_self property of each controller (example)\nFor example, if you want to add an external library on each page and a custom library on the Product page:\nassets: css: product: - id: product-extra-style path: assets/css/product.css media: all priority: 100 js: all: - id: this-cool-lib path: assets/js/external-lib.js priority: 30 position: bottom product: - id: product-custom-lib path: assets/js/product.js priority: 200 attribute: async  Registering in modules When developing a PrestaShop module, you may want to add specific styles for your templates. The best way is to use the registerStylesheet and registerJavascript methods provided by the parent FrontController class.\nIf you\u0026rsquo;re developing a custom module that only works on your themes, don\u0026rsquo;t put any style or JavaScript code inside the module: put it in the theme\u0026rsquo;s files instead (theme.js and theme.css).\n With a front controller module If you develop a front controller, simply extend the setMedia() method. For instance:\npublic function setMedia() { parent::setMedia(); if ('product' === $this-\u0026gt;php_self) { $this-\u0026gt;registerStylesheet( 'module-modulename-style', 'modules/'.$this-\u0026gt;module-\u0026gt;name.'/css/modulename.css', [ 'media' =\u0026gt; 'all', 'priority' =\u0026gt; 200, ] ); $this-\u0026gt;registerJavascript( 'module-modulename-simple-lib', 'modules/'.$this-\u0026gt;module-\u0026gt;name.'/js/lib/simple-lib.js', [ 'priority' =\u0026gt; 200, 'attribute' =\u0026gt; 'async', ] ); } }  Without a front controller module If you only have your module\u0026rsquo;s class, register your code on the actionFrontControllerSetMedia hook, and add your asset on the go inside the hook:\npublic function hookActionFrontControllerSetMedia($params) { // Only on product page if ('product' === $this-\u0026gt;context-\u0026gt;controller-\u0026gt;php_self) { $this-\u0026gt;context-\u0026gt;controller-\u0026gt;registerStylesheet( 'module-modulename-style', 'modules/'.$this-\u0026gt;name.'/css/modulename.css', [ 'media' =\u0026gt; 'all', 'priority' =\u0026gt; 200, ] ); $this-\u0026gt;context-\u0026gt;controller-\u0026gt;registerJavascript( 'module-modulename-simple-lib', 'modules/'.$this-\u0026gt;name.'/js/lib/simple-lib.js', [ 'priority' =\u0026gt; 200, 'attribute' =\u0026gt; 'async', ] ); } // On every pages $this-\u0026gt;context-\u0026gt;controller-\u0026gt;registerJavascript( 'google-analytics', 'modules/'.$this-\u0026gt;name.'/ga.js', [ 'position' =\u0026gt; 'head', 'inline' =\u0026gt; true, 'priority' =\u0026gt; 10, ] ); }  Unregistering You can unregister assets! That\u0026rsquo;s the whole point of an id. For example if you want to improve your theme/module\u0026rsquo;s compatibility with a module, you can unregister its assets and handle them yourself.\nLet\u0026rsquo;s say you want to be fully compatible with a popular navigation module. You could create a template override of course, but you could also remove the style that comes with it and bundle your specific style in your theme.css (since it\u0026rsquo;s loaded on every page).\nTo unregister an assets, you need to know its ID.\nIn themes As of today, the only way to unregister an asset without any module is to place an empty file where the module override would be.\nIf the module registers a JavaScript file placed in views/js/file.js, you simply need to create an empty file in modules/modulename/views/js/file.js.\nIt works for both JavaScript and CSS assets.\nIn modules Both unregisterJavascript and unregisterStylesheet methods take only one argument: the unique ID of the resource you want to remove.\n// In a front controller public function setMedia() { parent::setMedia(); $this-\u0026gt;unregisterJavascript('the-identifier'); } // In a module class public function hookActionFrontControllerSetMedia($params) { $this-\u0026gt;context-\u0026gt;controller-\u0026gt;unregisterJavascript('the-identifier'); }  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/documentation/shortcodes/callout/",
	"title": "Callout",
	"tags": [],
	"description": "",
	"content": " Callout This shortcode allows you to display a block inside your document to make some information stand out.\nAs with all shortcodes, keep in mind that headers inside won\u0026rsquo;t appear in the article\u0026rsquo;s table of contents.\n {{% callout %}} #### This is a callout This is a very important block of text. Also, notice how the title doesn't appear in the table of contents. {{% /callout %}}  Rendered result:\nThis is a callout This is a very important block of text. Also, notice how the title doesn\u0026rsquo;t appear in the table of contents.\n "
},
{
	"uri": "https://devdocs.prestashop.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/core_updates/1.7.5/",
	"title": "Changes in PrestaShop 1.7.5",
	"tags": [],
	"description": "",
	"content": " Notable changes in PrestaShop 1.7.5 LazyArrays Starting with PrestaShop 1.7.5, the business objects (Product, Order\u0026hellip;) available on the front-office are LazyArray instances. If your module relies on data available in the hook parameters or in the template, you may be concerned by this update.\nThey used to be arrays with all the data available. This change has been introduced to load the needed properties of an object only when requested, and globally improve the performance of the front-office.\nGetting properties from the object should not change between first versions of PS 1.7 and 1.7.5.\nHowever it appeared that some modules, especially the ones with a large compatibility range like PrestaShop 1.6 \u0026amp; 1.7, apply an array cast when the variable in not an array. Casting these variables as arrays on PS 1.7.5+ will throw notices when getting their properties.\n    1.6 1.7.0+ 1.7.5+     Variable type / class ObjectModel array PrestaShop\\PrestaShop\\Adapter\\Presenter\\AbstractLazyArray   Getting a property {(array)$var}['id'] or $var-\u0026gt;id $var['id'] $var['id'] or $var-\u0026gt;id    Applying an (array) cast is valid only when you have a ObjectModel instance, for instance Product. Otherwise, you already have an array-compliant variable.\npublic function hookdisplayFooterProduct($params) { /* * Depending on the PrestaShop you run, the $product type won't be the same. * On PrestaShop 1.7, it can be directly used as an array. * * However, if the module is also compatible with PrestaShop 1.6, 1.5... * an ObjectModel class will be returned. * Casting it as an array *in this specific situation* will allow to cover all cases. */ $product = $params['product']; if ($product instanceof Product /* or ObjectModel */) { $product = (array) $product; } // Getting product details. echo $product['id']; }  Links:\n Related issue on module Google Analytics (GitHub)  Automated link generation PrestaShop now automatically converts links generated by Link::getAdminLink() calls into links to the newly migrated Symfony pages. This means that if you used this method somewhere in your modules to link to a page that has since been migrated, PrestaShop will automatically \u0026ldquo;upgrade\u0026rdquo; it so that it points to the new Symfony-style URL.\nWith this change, module developers no longer need to update their links each time a page is migrated. However in many places the method is not used with URL parameters as arguments, and parameters are concatenated as a string after the getAdminLink call instead. This can result in wrong conversion use cases, so you might need to refactor the way you use this method.\nExample:\n// Code compliant from PrestaShop 1.5 to 1.7.4 $link-\u0026gt;getAdminLink('AdminOrders') . '\u0026amp;amp;id_order={$order-\u0026gt;id|intval}\u0026amp;amp;vieworder'; // Recommended code from PrestaShop 1.7.5 $link-\u0026gt;getAdminLink('AdminOrders', true, [], ['id_customer' =\u0026gt; $customer-\u0026gt;id|intval, 'viewcustomer' =\u0026gt; 1]); // If you need to be compatible from 1.5 to the latest 1.7 version, then you can combine both styles $link-\u0026gt;getAdminLink('AdminOrders', true, [], ['id_customer' =\u0026gt; $customer-\u0026gt;id|intval, 'viewcustomer' =\u0026gt; 1]) . '\u0026amp;amp;id_order={$order-\u0026gt;id|intval}\u0026amp;amp;vieworder';  Although this won\u0026rsquo;t be a problem for legacy controllers, if it\u0026rsquo;s not used properly, the generated link won\u0026rsquo;t work anymore once the page is migrated to Symfony. We recommend refactoring your calls to getAdminLink beforehand.\nYou can find more details about this new feature in the Controller and Routing page.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/distribution/",
	"title": "Distribution",
	"tags": [],
	"description": "",
	"content": " Distribution Now that you created an amazing theme, you probably want to release it. The following documentation will walk you through creating a zip and passing Addons validation.\nBut first, you need to test your theme!\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/distribution/exporting/",
	"title": "Exporting your theme",
	"tags": [],
	"description": "",
	"content": " Exporting your theme Creating a valid zip file There is no longer any theme data in the database with PrestaShop 1.7. Hence a theme is installed as soon as it\u0026rsquo;s on the disk.\nIf you want to theme to appears in the backoffice, it\u0026rsquo;s simply have to contain a config/theme.yml file. This will only display it, if you want to select it as your active theme, it has to be valid. Read :doc:What makes a valid theme \u0026lt;testing\u0026gt;\nOnce it\u0026rsquo;s active you can export your theme using the \u0026ldquo;Export current theme\u0026rdquo; button or use the command from your terminal.\nphp bin/console prestashop:theme:export THEME_DIRECTORY_NAME  Use php app/console instead of php bin/console for versions prior to 1.7.4 \n What is exported Exporting your theme using the button or the command line will export the following data:\n All theme files in directory Dependencies specified in theme.yml (See theme.yml doc) Theme translations  Distributing on Addons Please note that if you want to sell your theme on the PrestaShop Addons, there are a few rules to follow:\n** LIST OF REQUIREMENTS **\n Use BootStrap 4 alpha 4 \u0026ndash; follow the appropriate doc. Add your key \u0026ndash; follow the appropriate doc.  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/documentation/shortcodes/funcdef/",
	"title": "Function definition",
	"tags": [],
	"description": "",
	"content": " Function definition To render a list of function definitions, use funcdef in combination with Markdown definition list:\n{{% funcdef %}} __construct($id = NULL, $id_lang = NULL) : Build object. add($autodate = true, $nullValues = false) : Save current object to database (add or update). {{% /funcdef %}}  Rendered result:\n __construct($id = NULL, $id_lang = NULL)  Build object. add($autodate = true, $nullValues = false)  Save current object to database (add or update).    Be aware that you need to leave at lease one trailing space after each : for the markup to be correctly interpreted as a definition list.\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/creation/good-practices/",
	"title": "Good practices for developing modules",
	"tags": [],
	"description": "",
	"content": " Good practices for developing modules DOs and DON\u0026rsquo;Ts Do  Add a link to your documentation included in your ZIP File and to your support page on Addons in the module interface. Follow our Coding Standards Create your own database tables, do not alter PrestaShop\u0026rsquo;s. Develop your module in English, then use PrestaShop translation system to translate your module. Go through directories using PrestaShop variables like: _PS_CONFIG_DIR_ . '/config.inc.php'  Don\u0026rsquo;t  Don\u0026rsquo;t insert external links into your module code or module documentation. Don\u0026rsquo;t provide your personal contact details in your module or module documentation. Don\u0026rsquo;t send your customers to your own support/ticket management platform. Don\u0026rsquo;t use external ajax files to perform ajax tasks. Don\u0026rsquo;t go through directories using code and variables like: dirname(__FILE__).'/../../config/config.inc.php' Don\u0026rsquo;t edit the SQL structure of PrestaShop tables.  A few recommendations for your modules  Prefix what belongs to you:\n modules configuration parameters (ps_configuration) tables CSS classes   Consider deleting your configurations, tables, and other entities unique to your product during the de-installation of your modules.\n You shouldn\u0026rsquo;t use HTML code in your PHP code. Here are alternatives to separate the view into your code:\n display content with Smarty use helpers for your configuration pages include PrestUI, a graphic library created by the community for your configuration pages.  Your module interface has to match the back office interface. Customized interfaces aren’t validated/accepted. Please use the alternatives explained before to help you create an interface that matches merchants\u0026rsquo; BO.\n For modules compatible before the 1.7 PrestaShop version, the minimal compatibility has to be PHP 5.3. You will be then able to use, for example, namespaces.\n If you add function to add a file, check the type of the file to make sure you avoid security issues. Here are more information for the function mime_content_type().\n When uninstalling the module, delete all tabs you might have added during the installation.\n When your module has forms, you should:\n show a confirmation message if everything is fine or an error message if not. make sure information entered by customers are correct. If you ask a sum, it has to be only numbers. More information about the Validate class of PrestaShop here.  Consider carefully casting your variables and use pSQL/bqSQL in the SQL requests to avoid any injections (read Best Practices of the Db Class). Make sure your files are properly protected (especially if your module uses a cron for example) to avoid anyone being able to execute them. As a result, you are required to use a token!\n The use of overrides is permitted, however if we decide that too many (2 / 3 max) have been used and/or the modifications are too dangerous, we will refuse your module. If you\u0026rsquo;re unsure, don\u0026rsquo;t hesitate to get in touch.\n If you need to upload a .js or .tpl (containing JavaScript) to the back-office, put restrictions in place on your back-office hooks (hookbackofficeheader/top/footer)! Specific examples: If your JS only applies to your module\u0026rsquo;s configuration page, use:\n  if (Tools::getValue('configure') === $this-\u0026gt;name) { // code }  A few recommendations for your themes  PrestaShop does not yet feature a \u0026ldquo;theme validator\u0026rdquo;. However, each of the modules present in your theme must be tested via our Validator. Don\u0026rsquo;t remove the default hooks in PrestaShop, whether via PHP or in the theme! You will risk preventing a third party module from working properly. Prefix what belongs to you:  modules image standards  You should not have HTML in your PHP code; use Smarty or helper classes for views. We do not accept themes using the PrestaShop base them to which only color, font and image changes etc. have been made. You should create a unique theme! :-) You should keep the store logo by default in your theme\u0026rsquo;s zip, in the header and footer of your theme.  A few recommendations for your email templates\n Use our official SDK to develop your emails: Make sure to submit on Addons a valid zip, built with the SDK. Test your emails with the official module.  "
},
{
	"uri": "https://devdocs.prestashop.com/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": " PrestaShop Developer Documentation PrestaShop is a free and Open Source e-commerce web platform, committed to providing the best shopping cart experience for both merchants and customers. It is written in PHP, is highly customizable, supports all the major payment services, is translated in many languages and localized for many countries, has a fully responsive design (both front and back office), and more! Learn more about PrestaShop.\nThis site covers the technical aspects of PrestaShop and it\u0026rsquo;s tailored for theme, module and core developers.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/legacy/legacy-controllers/",
	"title": "Legacy Controllers",
	"tags": [],
	"description": "",
	"content": " Legacy Controllers Legacy controllers are based on PrestaShop\u0026rsquo;s custom framework and go a long way back. All front controllers and all Admin controllers that haven\u0026rsquo;t been migrated to Symfony yet are based on this.\nExecution flow Legacy controllers work best when a Controller performs a single action, for example, render a page. The process has been divided in several methods, which simplifies customization via method override.\n  Execution flow of legacy controllers   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/migration-from-16/",
	"title": "Migrating from PrestaShop 1.6",
	"tags": [],
	"description": "",
	"content": " Migrating from PrestaShop 1.6 PrestaShop 1.7 introduces a totally reworked theme system from version 1.6, with the goal of making PrestaShop upgrades easier, and making it easier and faster to create a brand new theme.\nThe huge change to the theme system means that there is no easy way to migrate your PrestaShop 1.6 theme to PrestaShop 1.7.\nWhen using the automatic upgrade from PrestaShop 1.6 to 1.7, your theme will be switched to the new default theme, called \u0026ldquo;Classic\u0026rdquo;. We therefore recommend working on your 1.7 theme before you make the switch to PrestaShop 1.7.\nSome features have been dropped with PrestaShop 1.7. They were either already deprecated in 1.6, or proved too problematic to maintain.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/internationalization/translation/native-module-translation/",
	"title": "Native module translation",
	"tags": [],
	"description": "",
	"content": " Native module translation The module\u0026rsquo;s text strings are written in English, but you might want French, Spanish or Polish shop owners to use your module too. You therefore have to translate those strings into those languages, both the front office and the back office strings. Ideally, you should translate your module in all the languages that are installed on your shop. This could be a tedious task, but a whole system has been put in place in order to help you out.\nIn short, PrestaShop 1.7 implements Symfony\u0026rsquo;s translation system, through the use of the trans() method, used to encapsulate the strings to be translated. This method is applied in a different way depending of the file type.\nThis system only works with native modules.\nSee here for 3rd party modules.\n The process of preparing text strings for translation is called internationalization, or i18n.\nInternationalizing strings in Smarty (.tpl) files Strings in TPL files will need to be turned into dynamic content using the {l} function call, which Smarty will replace by the translation for the chosen language.\nPrestaShop 1.6 used to require the mod parameter for context. PrestaShop 1.7 now requires that parameter to be \u0026ldquo;d\u0026rdquo;, and to use the same domain as all the other strings in the module.\nIn our sample module, the mymodule.tpl file\u0026hellip;\n\u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{$base_dir}modules/mymodule/mymodule_page.php\u0026quot; title=\u0026quot;Click this link\u0026quot;\u0026gt;Click me!\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;!-- Block mymodule --\u0026gt; \u0026lt;div id=\u0026quot;mymodule_block_left\u0026quot; class=\u0026quot;block\u0026quot;\u0026gt; \u0026lt;h4\u0026gt;{l s='Welcome!' d='Modules.MyModule'}\u0026lt;/h4\u0026gt; \u0026lt;div class=\u0026quot;block_content\u0026quot;\u0026gt; \u0026lt;p\u0026gt;Hello, {if isset($my_module_name) \u0026amp;\u0026amp; $my_module_name} {$my_module_name} {else} World {/if} ! \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{$my_module_link}\u0026quot; title=\u0026quot;Click this link\u0026quot;\u0026gt;Click me!\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- /Block mymodule --\u0026gt;  \u0026hellip;becomes:\n\u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{$base_dir}modules/mymodule/mymodule_page.php\u0026quot; title=\u0026quot;{l s='Click this link' d='Modules.MyModule'}\u0026quot;\u0026gt;{l s='Click me!' d='Modules.MyModule'}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;!-- Block mymodule --\u0026gt; \u0026lt;div id=\u0026quot;mymodule_block_left\u0026quot; class=\u0026quot;block\u0026quot;\u0026gt; \u0026lt;h4\u0026gt;{l s='Welcome!' d='Modules.MyModule'}\u0026lt;/h4\u0026gt; \u0026lt;div class=\u0026quot;block_content\u0026quot;\u0026gt; \u0026lt;p\u0026gt; {if !isset($my_module_name) || !$my_module_name} {capture name='my_module_tempvar'}{l s='World' d='Modules.MyModule'}{/capture} {assign var='my_module_name' value=$smarty.capture.my_module_tempvar} {/if} {l s='Hello %1$s!' sprintf=$my_module_name d='Modules.MyModule'} \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{$my_module_link}\u0026quot; title=\u0026quot;{l s='Click this link' d='Modules.MyModule'}\u0026quot;\u0026gt;{l s='Click me!' d='Modules.MyModule'}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- /Block mymodule --\u0026gt;  \u0026hellip;and the display.tpl file:\nWelcome to this page!  \u0026hellip;becomes:\n{l s='Welcome to this page!' d='Modules.MyModule'}  Notice that we always use the d parameter. This is used by PrestaShop to assert which module the string belongs to. The translation tool needs it in order to match the string to translate with its translation. This parameter is mandatory for module translation.\nTranslating complex code As we can see, the basis of template file translation is to enclose them in the {l s='The string' mod='name_of_the_module'}. The changes in display.tpl and in mymodule.tpl\u0026rsquo;s link and title texts are thus easy to understand. But added a trickier block of code for the \u0026ldquo;Hello World!\u0026rdquo; string: an if/else/then clause, and a text variable. Let\u0026rsquo;s explore this code:\nHere is the original code:\nHello, {if isset($my_module_name) \u0026amp;\u0026amp; $my_module_name} {$my_module_name} {else} World {/if} !  As you can see, we need to get the \u0026ldquo;Hello World\u0026rdquo; string translatable, but also to cater for the fact that there is a variable. As explained in the \u0026ldquo;Translations in PrestaShop 1.5\u0026rdquo; chapter, variables are to be marked using sprintf() markers, such as %s or %1$s.\nMaking \u0026ldquo;Hello %s!\u0026rdquo; translatable words in easy: we just need to use this code:\n{l s='Hello %s!' sprintf=$my_module_name d='Modules.MyModule'}  But in our case, we also need to make sure that the %s is replaced by \u0026ldquo;World\u0026rdquo; in case the \u0026ldquo;my_module_name\u0026rdquo; value does not exist\u0026hellip; and we must make \u0026ldquo;World\u0026rdquo; translatable too. This can be achieved by using Smarty {capture} function, which collects the output of the template between the tags into a variable instead of displaying, so that we can use it later on. We are going to use it in order to replace the variable with the translated \u0026ldquo;World\u0026rdquo; if the variable is empty or absent, using a temporary variable. Here is the final code:\n{if !isset($my_module_name) || !$my_module_name} {capture name='my_module_tempvar'}{l s='World' d='Modules.MyModule'}{/capture} {assign var='my_module_name' value=$smarty.capture.my_module_tempvar} {/if} {l s='Hello %s!' sprintf=$my_module_name d='Modules.MyModule'}  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/documentation/shortcodes/notice/",
	"title": "Note block",
	"tags": [],
	"description": "",
	"content": " Notes / tip block You can add notice blocks to make some information stand out:\nNote {{% notice note %}} This is something you may want to know. {{% /notice %}}  Renders to:\nThis is something you may want to know.\n Tip {{% notice tip %}} Everything will be fine, trust me. {{% /notice %}}  Renders to:\nEverything will be fine, trust me.\n Info {{% notice info %}} This is pretty important, you should pay attention. {{% /notice %}}  Renders to:\nThis is pretty important, you should pay attention.\n Warning {{% notice warning %}} Watch out, danger zone! {{% /notice %}}  Renders to:\nWatch out, danger zone!\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/scale/optimizations/",
	"title": "Optimize your PrestaShop",
	"tags": [],
	"description": "",
	"content": " How to Optimize the performance of your PrestaShop In order to properly benchmark your shop, you need to check the settings of PHP, Apache and MySQL.\n1) PHP Settings Try to use PHP \u0026gt;=7, it will speed up a lot your shop!\nIf you\u0026rsquo;re using PHP-FPM (which should be the case in most of \u0026ldquo;modern\u0026rdquo; installations), you have to check the pool configuration. It\u0026rsquo;s usually stored in the file /etc/php/7.x/fpm/pool.d/www.conf. Inside this file, the most important setting is the pm.max_children setting. It must be greater than the max number of concurrent users you want to simulate during the bench.\nMake sure Zend Opcache is enabled.\n Note this configuration of PHP should be used in Production environments only.\n Use the following settings to optimize the performances:\n[Date] date.timezone = UTC [Session] session.auto_start = Off [PHP] short_open_tag = Off realpath_cache_size = 4096K realpath_cache_ttl = 600 display_errors = Off magic_quotes_gpc = off ; Increase this value if you are able to do it memory_limit = 512M max_execution_time = 300 max_input_time = 300 upload_max_filesize = 20M post_max_size = 22M ; Increase this value if you work with products with a lot of combinations max_input_vars = 20000 allow_url_fopen = on [opcache] opcache.enable_file_override = On opcache.interned_strings_buffer=64 opcache.fast_shutdown=1 opcache.memory_consumption=256 opcache.max_accelerated_files=20000 ; Extra-optimization https://symfony.com/doc/current/performance.html#don-t-check-php-files-timestamps ; opcache.validate_timestamps=0  2) Composer (Autoloading optimizations) The class loader used while developing the application is optimized to find new and changed classes. In production servers, PHP files should never change, unless a new application version is deployed. That\u0026rsquo;s why you can optimize Composer\u0026rsquo;s autoloader to scan the entire application once and build a \u0026ldquo;class map\u0026rdquo;, which is a big array of the locations of all the classes and it\u0026rsquo;s stored in vendor/composer/autoload_classmap.php.\nExecute this command to generate the class map (and make it part of your deployment process too):\ncomposer dump-autoload --optimize --no-dev --classmap-authoritative   --optimize dumps every PSR-0 and PSR-4 compatible class used in your application; --no-dev excludes the classes that are only needed in the development environment (e.g. tests); --classmap-authoritative prevents Composer from scanning the file system for classes that are not found in the class map.   If you install a new module in production, you need to execute again this command.\n 3) Apache Settings If you\u0026rsquo;re using PHP-FPM, you should be enable to use apache mpm_event. Using the following configuration (to set in the mpm_event.conf file) should allow you to test up to 400 concurrent users:\n ServerLimit 16 MaxClients 400 StartServers 3 ThreadLimit 64 ThreadsPerChild 25 MaxRequestWorkers 400 MaxConnectionsPerChild 0  4) MySQL/MariaDB Settings If you using MySQL \u0026lt; 8 or MariaDB, enable the query cache by putting this setting in the /etc/mysql/my.cnf file:\nquery_cache_limit = 128K query_cache_size = 32M query_cache_type = ON  Other important settings are:\ntable_open_cache = 1000 read_buffer_size = 2M read_rnd_buffer_size = 1M thread_cache_size = 80 join_buffer_size = 2M sort_buffer_size = 2M max_connections = 400 tmp_table_size = 32M max_heap_table_size = 32M table_definition_cache = 1000 performance_schema = OFF  Try to set the value of innodb_buffer_pool_size to something greater than the size of your database on disk.\nBefore launching the benchmark, and after importing the data, it\u0026rsquo;s always great to launch an ANALYZE TABLE on all your database by running on your server:\nmysqlcheck -a -A -uroot -pyour_password  5) Use a CDN Always try to use a CDN to reduce the amount of hits on your server. Cloudflare is a good and free service. You can use as well to minify your page or to easily enable SSL on your site.\n6) Optimize your prestashop In the performances tab of your prestashop:\n Do not enable \u0026ldquo;Multi-Front synchronisation\u0026rdquo; if you only have one front server or if your smarty cache is shared across all your front servers on the same filesystem. Use the \u0026ldquo;File System\u0026rdquo; cache type, not \u0026ldquo;MySQL\u0026rdquo; Enable the Smarty cache Do not enable the Cache from the \u0026ldquo;Cache\u0026rdquo; section if you have MySQL ( "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/overriding-modules/",
	"title": "Overriding modules",
	"tags": [],
	"description": "",
	"content": " Overriding modules When you write a theme, you often need to override the templates and assets coming from a module so that they match your theme\u0026rsquo;s specific markup needs. Themes can override modules\u0026rsquo; assets (CSS and JavaScript only) by placing the corresponding file at a specific location.\nWith PrestaShop 1.7, all module overriding code goes to the modules directory (in your module\u0026rsquo;s own directory). Every PS 1.7 module developer should be aware of this change (introduced with PR 5020: https://github.com/PrestaShop/PrestaShop/pull/5020).\nIf your asset override is empty, PrestaShop will load nothing (neither the module one nor your override). This is useful if you want to fully remove this module style and add your own to your compiled theme.css.\n Examples in this page are based on this sample module directory structure:\n. ├── css │ ├── external-lib.css │ └── style.css ├── js │ └── app.js ├── moduledemo.php └── views └── templates └── front ├── included-template.tpl └── moduledemo.tpl 5 directories, 6 files  Overriding templates and assets With PrestaShop 1.7, here are the folder paths to create in order to override templates and assets:\n. └── modules ├── css │ ├── external-lib.css │ └── style.css ├── js │ └── app.js └── views └── templates └── front ├── included-template.tpl └── moduledemo.tpl 6 directories, 5 files  Compared to what was needed in PrestaShop 1.6, it is much simpler:\n. ├── css │ └── modules │ └── css │ ├── external-lib.css │ └── style.css ├── js │ └── modules │ └── js │ └── app.js └── modules └── views └── templates └── front ├── included-template.tpl └── moduledemo.tpl 10 directories, 5 files  Overriding with the \u0026lsquo;include\u0026rsquo; method There is one very important issue that you should be aware of. When loading a template file (for instance \u0026lsquo;moduledemo.tpl\u0026rsquo;), PrestaShop will look for overriding first, in the following order:\n /themes/THEME_NAME/modules/MODULE_NAME/views/templates/front/moduledemo.tpl /modules/MODULE_NAME/views/templates/front/moduledemo.tpl  But if your moduledemo.tpl file includes the included-template.tpl file, you will have to override \u0026lsquo;included-template.tpl\u0026rsquo; as well, even if you don\u0026rsquo;t want to modify it (nor to edit the path). This means that every file that an overridden file includes needs to be copy-pasted as-is in order for your override to work properly.\nThe issue goes both ways: if you want to modify the included-template.tpl file, you will have to override the moduledemo.tpl file that includes it.\n{include file='./included-template.tpl'}  PrestaShop 1.7 introduces a new cool way to include files in module templates. By using this method, all the expected rules will be followed:\n{include file='module:MODULE_NAME/views/templates/front/included-template.tpl'}  SmartyDev helps you debug! PrestaShop 1.7 also introduces our own SmartyDev tool, an Smarty extension which allows you to see the template\u0026rsquo;s name within your generated HTML markup. This will help debugging a lot, especially because of template override.\nHere an example of generated markup with SmartyDev activated:\n[...] \u0026lt;a href=\u0026quot;http://prestashop.ps/en/\u0026quot; class=\u0026quot;dropdown-item\u0026quot;\u0026gt;English\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- end /Users/julien/Sites/PrestaShop/themes/classic/modules/blocklanguages/blocklanguages.tpl --\u0026gt; \u0026lt;!-- begin /Users/julien/Sites/PrestaShop/themes/classic/modules/blockuserinfo/blockuserinfo.tpl --\u0026gt; \u0026lt;div class=\u0026quot;user-info\u0026quot;\u0026gt; \u0026lt;i class=\u0026quot;material-icons _gray-darker\u0026quot;\u0026gt;\u0026amp;#xE7FF;\u0026lt;/i\u0026gt; \u0026lt;a class=\u0026quot;logout\u0026quot; href=\u0026quot;http://prestashop.ps/fr/?mylogout=\u0026quot; rel=\u0026quot;nofollow\u0026quot; title=\u0026quot;Me déconnecter\u0026quot;\u0026gt;Déconnexion\u0026lt;/a\u0026gt; \u0026lt;a class=\u0026quot;account\u0026quot; href=\u0026quot;http://prestashop.ps/fr/mon-compte\u0026quot; title=\u0026quot;Voir mon compte client\u0026quot; rel=\u0026quot;nofollow\u0026quot;\u0026gt;\u0026lt;span\u0026gt;Julien Bourdeau\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- end /Users/julien/Sites/PrestaShop/themes/classic/modules/blockuserinfo/blockuserinfo.tpl --\u0026gt; \u0026lt;!-- begin /Users/julien/Sites/PrestaShop/themes/classic/modules/blockcart/blockcart.tpl --\u0026gt; \u0026lt;div class=\u0026quot;blockcart cart-preview \u0026quot; data-refresh-url=\u0026quot;http://prestashop.ps/fr/module/blockcart/ajax\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;header\u0026quot;\u0026gt; \u0026lt;a rel=\u0026quot;nofollow\u0026quot; href=\u0026quot;#\u0026quot; title=\u0026quot;cart\u0026quot;\u0026gt; [...]  To use it, simply set the _PS_MODE_DEV_ constant to true in your installation\u0026rsquo;s /config/defines.inc.php file: add the define('_PS_MODE_DEV_', true); line to that file in order to turn the PrestaShop Developer Mode on, which features SmartyDev.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/template-inheritance/parent-child-feature/",
	"title": "Parent/child theme",
	"tags": [],
	"description": "",
	"content": " Parent/child theme PrestaShop 1.7 relies a lot on template inheritance in order to create the most consistent theme possible while heavily reducing the amount of duplicated code.\nWe took it even further introducing the Parent Child theme feature. The point to is to avoid modifying the main theme so you can update it!\nThis feature is only useful if you want to slightly modify a theme (to add a block for example). If you need to modify the markup more deeply, modify the theme, don\u0026rsquo;t create a child theme.\n Do not use StarterTheme as a parent theme EVER. StarterTheme is meant to be modified.\n The principle So far we talked about extending template within the same theme. In PrestaShop 1.7 you can now extend templates from another theme.\nAs a theme developer, you want to create as many block as possible so your user can override the minimum amount of code.\n How to create a child theme First you need to have the theme you want to use as parent in your store /themes folder.\nThen you can create a very minimal theme, containing only the following files:\n. ├── config │ └── theme.yml └── preview.png  It\u0026rsquo;s recommended to copy these files from the Parent theme.\n Once you have this, you will specify in your child theme theme.yml which theme should be used as a parent. The value must be the theme technical name (ie: the theme folder name).\nparent: classic name: childtheme display_name: My first child Theme version: 1.0.0 assets: use_parent_assets: true  Go ahead, select this theme in your backoffice and you\u0026rsquo;re all set.\nOverriding templates Without any further modification the child theme will use every template from the parent theme.\nIn the following example we\u0026rsquo;ll modify the category template.\nRe-defining the whole template Create the category template in your child theme templates/catalog/listing/category.tpl. At this point you can do anything you want in this template but most likely you still want to extend product-list template. If so, you don\u0026rsquo;t have to copy product-list template to your child theme, PrestaShop will use the parent file.\nExtend product-list the normal way and override the block you need.\n{extends file='catalog/listing/product-list.tpl'}  Extending the same template Another way to overriding the category template would be to extend the parent template and define just the block you need. There is a little difference if you want to override the same template, you need to add the parent resource (note the parent keyword in the example below).\n{extends file='parent:catalog/listing/category.tpl'}  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/rtl/",
	"title": "RTL support",
	"tags": [],
	"description": "",
	"content": " RTL support PrestaShop supports RTL (Right-to-left) themes natively.\nRTL stylesheets There are two ways of customizing your theme for RTL: either by adding an override file that is only loaded for RTL languages, or by using completely different version of the theme\u0026rsquo;s stylesheets.\nCSS override file PrestaShop will try to load a css file named rtl.css after your theme\u0026rsquo;s ones when displayed in an RTL language. You can use this file to place any style override you need for RTL.\nRTL version  When the shop is displayed in an RTL language, PrestaShop will automatically try and load RTL versions of the theme\u0026rsquo;s stylesheets if they are available, instead of the \u0026ldquo;normal\u0026rdquo; ones.\nRTL versions are automatically \u0026ldquo;discovered\u0026rdquo; by PrestaShop using a simple convention: to obtain the RTL version name, you just need to add _rtl to the end of the standard file name.\nExample:\n   Original name RTL version name     theme.css theme_rtl.css   theme-custom.css theme-custom_rtl.css    Stylesheet generation  PrestaShop can also automagically generate an RTL version of your theme\u0026rsquo;s stylesheets based on the original CSS files.\nFollow this steps to generate RTL stylesheets for your theme:\n Open your shop\u0026rsquo;s Back Office. Go to the \u0026ldquo;Design \u0026gt; Theme \u0026amp; Logo\u0026rdquo; page. Scroll down to the \u0026ldquo;Adaptation to right-to-left languages\u0026rdquo; section.\nNote: this is only visible if you have an RTL language installed on your shop. Choose the theme you want to generate stylesheets for. Toggle \u0026ldquo;Generate RTL stylesheet\u0026rdquo; to \u0026ldquo;Yes\u0026rdquo;. Press \u0026ldquo;Save\u0026rdquo;.    RTL generation in the back office   This process will generate _rtl.css files for every .css file in the theme.\nPrestaShop won\u0026rsquo;t generate a file if one with the same name already exists.\nIf you want to regenerate a file, you have to delete it first.\n Polishing it up Sometimes the automatic transformation won\u0026rsquo;t be enough to get your theme exactly how you want it.\nYou should never modify generated _rtl.css files – they are generated automatically by PrestaShop.\nIf you need to add some specific css to fix your RTL transformed files, use .rtlfix files. The content of those files is appended to the RTL version of that file after it\u0026rsquo;s transformed.\nThis is what PrestaShop does for each .css file in the theme:\n Take a file (let\u0026rsquo;s say it\u0026rsquo;s called my-file.css) If my-file_rtl.css exists, move on to the next file. Transform my-file.css to RTL and save its contents to my-file_rtl.css If a file named my-file.rtlfix exists, append its contents to my-file_rtl.css.  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/internationalization/rtl/",
	"title": "Right-To-Left languages",
	"tags": [],
	"description": "",
	"content": " Right-to-Left languages PrestaShop supports Right-to-Left (RTL) languages natively, both in the Back Office and the Front Office. It can automatically transform themes to make them compatible with RTL languages.\nAny Front Office theme can be transformed automatically by PrestaShop. Read \u0026ldquo;RTL support\u0026rdquo; in the Themes section to learn more about this system.\nBack Office support The Back Office uses the same \u0026ldquo;theme-flipping\u0026rdquo; system as the Front Office feature. While for Front Office themes the transformation procedure must be triggered manually, in the BO this is performed automatically whenever an RTL language is activated on the shop, either by installing an RTL language or by setting up a language as RTL via edit in the BO.\nRegenerating the RTL theme This assumes you have read the \u0026ldquo;RTL support\u0026rdquo; article linked above.\n Remember that PrestaShop won\u0026rsquo;t overwrite already existing files. You need to delete the files you want to regenerate beforehand.\n If you changed something in your Back Office theme and you want your change to be applied to the RTL theme, you can regenerate any RTL generated file by using this simple trick:\n First, delete the _rtl.css file you want to regenerate. Go to International \u0026gt; Localization, then click the \u0026ldquo;Languages\u0026rdquo; tab. Edit any language. Toggle the \u0026ldquo;Is RTL language\u0026rdquo; (see figure below) to \u0026ldquo;Yes\u0026rdquo; and save.\nIf the language was already RTL, toggle it to \u0026ldquo;No\u0026rdquo; and save before changing it back to \u0026ldquo;Yes\u0026rdquo;.    Toggling RTL for a language   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/documentation/shortcodes/",
	"title": "Shortcodes",
	"tags": [],
	"description": "",
	"content": " Shortcodes Hugo provides a nice feature that extends Markdown: shortcodes.\nHow they work Shortcodes are a special tags that you can use when writing your content that are interpreted by Hugo before the Markdown parser. You can think of them as \u0026ldquo;template macros\u0026rdquo;.\nThere are two kinds of shortcodes:\n Tag style (surrounds your content)\n{{% ExampleShortcode %}} My custom content goes here {{% /ExampleShortcode %}}  Placeholder style (self-closing, adds some content)\n{{% ExampleShortcode %}}   Markdown expansion vs raw HTML You can choose to delimit your shortcodes with either {{% %}} or {{\u0026lt; \u0026gt;}}.\nIf you use the {{% %}} notation, the content you include between the opening and the closing tag will be processed using Markdown. Otherwise, it will be treated as raw HTML.\nParameters Some shortcodes also accept parameters. Use them like this:\n{{% ExampleShortcode param1=\u0026quot;value1\u0026quot; params2=\u0026quot;value2\u0026quot; %}}  Quick reference Some default shortcodes are provided by Hugo (read shortcodes documentation) and some have been custom-made for this theme.\nHere are the most useful shortcodes, both native and custom:\n callout – Displays a styled function definition list. funcdef – Displays a styled function definition list. minver – Displays a version pill. notice – Displays a \u0026ldquo;note\u0026rdquo;, \u0026ldquo;tip\u0026rdquo; or \u0026ldquo;warning\u0026rdquo; box to highlight important information. ref – Links to another DevDocs page or a section of the page.  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/smarty-helpers/",
	"title": "Smarty helper functions",
	"tags": [],
	"description": "",
	"content": " Helpers: functions and modifiers {url} PrestaShop 1.7 introduces a new Smarty helper to generate URLs. This will take care of SSL, domain name, virtual and physical base URI, parameters concatenation, and of course URL rewritting.\n{url} uses the Link class internally.\nPlease see the $urls dataset to find already regenerated urls (such as home, cart, login and so on).\n An instance of the Link object is still passed to the templates for backward compatibility purposes, since it was heavily used. It is strongly recommended not to use it.\n Here is a few examples:\n{url entity=address id=$id_address} {url entity=address params=['id_address' =\u0026gt; $id_address]} {url entity=address id=$id_address params=['delete' =\u0026gt; 1]}  \u0026hellip;will respectively output:\nhttp://prestashop.ps/it/address?id_address=3 http://prestashop.ps/it/address?id_address=3 http://prestashop.ps/it/address?id_address=3\u0026amp;delete=1  Widgets {widget} PrestaShop 1.7 introduces a new way to display modules in a theme. Instead of using a hook and hooking your module to it, the widget\u0026rsquo;s function lets you display any content from the module in your template.\nHere is an example from classic theme, it displays the shop contact details wherever you want.\n\u0026lt;div id=\u0026quot;sidebar\u0026quot;\u0026gt; {widget name=\u0026quot;ps_contactinfo\u0026quot;} \u0026lt;/div\u0026gt;  Since the module may have a different behavior depending on which hook they are hooked on, you can pass the hook name.\n\u0026lt;div id=\u0026quot;footer\u0026quot;\u0026gt; {widget name=\u0026quot;ps_contactinfo\u0026quot; hook=\u0026quot;displayFooter\u0026quot;} \u0026lt;/div\u0026gt;  {widget_block} Even better, you can rewrite the template on the go. The module will use your Smarty code instead of loading the template file.\nTaking the ps_linklist module as an example. Instead of using ps_linklist/views/templates/hook/linkblock.tpl, you can override it this way:\n{widget_block name=\u0026quot;ps_linklist\u0026quot;} {foreach $linkBlocks as $linkBlock} \u0026lt;ul\u0026gt; {foreach $linkBlock.links as $link} \u0026lt;li\u0026gt; \u0026lt;h4\u0026gt;\u0026lt;a href=\u0026quot;{$link.url}\u0026quot;\u0026gt;{$link.title}\u0026lt;/a\u0026gt;\u0026lt;/h4\u0026gt; \u0026lt;p\u0026gt;{$link.description}\u0026lt;/p\u0026gt; \u0026lt;/li\u0026gt; {/foreach} \u0026lt;/ul\u0026gt; {/foreach} {/widget_block}  {render} Some elements coming from the controller might need to be passed to this function. So far, it is only used for forms (customer information and checkout).\n{render file='customer/_partials/login-form.tpl' ui=$login_form}  {form_field} {form_field} function will help you building forms, it can be compared to the backoffice helpers introduced in PrestaShop 1.5. It helps you keeping the form markup very consistent.\nAs a template designer you will find the markup of each elements in _partials/form-fields.tpl.\n{form_field field=$field}  \u0026hellip;where $field is an array, like this example:\n$field = [ 'name' =\u0026gt; 'user_email', 'type' =\u0026gt; 'email', 'required' =\u0026gt; 1, 'label' =\u0026gt; 'Email', 'value' =\u0026gt; null, 'availableValues' =\u0026gt; [], 'errors' =\u0026gt; [], ];  Class name modifiers In order to use the data from controller to generate classnames, we added 2 modifiers: \u0026lsquo;classname\u0026rsquo; and \u0026lsquo;classnames\u0026rsquo;.\nclassname The classname data modifier will ensure that your string is a valid class name.\nIt will:\n Put it in lowercase. Replace any non-ASCII characters (such as accented characters) with their ASCII equivalent. See the code here . Replace all non-alphanumerical characters with a single dash. Ensure only one consecutive dash is used.  {assign var=attr value='Hérè-Is_a-Clàssnåme--@#$$ˆ*(\u0026amp;-----'} {$attr|classname}  \u0026hellip;will output:\n here-is-a-classname-v  classnames This data modifier takes an array, where the key is the classname and the value is a boolean indicating if it should be outputted or not.\nNote that each class name is passed through the classname modifier.\n$body_classes = [ \u0026quot;lang-fr\u0026quot; =\u0026gt; true, \u0026quot;rtl\u0026quot; =\u0026gt; false, \u0026quot;country-FR\u0026quot; =\u0026gt; true, \u0026quot;currency-EUR\u0026quot; =\u0026gt; true, \u0026quot;layout-full-width\u0026quot; =\u0026gt; true, \u0026quot;page-index\u0026quot; =\u0026gt; true, ];  This way, this Smarty code:\n\u0026lt;body class=\u0026quot;{$page.body_classes|classnames}\u0026quot;\u0026gt;  \u0026hellip;will generate:\n\u0026lt;body class=\u0026quot;lang-fr country-fr currency-eur layout-full-width page-index\u0026quot;\u0026gt;  "
},
{
	"uri": "https://devdocs.prestashop.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/sell/technical-validation/",
	"title": "Technical validation",
	"tags": [],
	"description": "",
	"content": " Technical validation 3 tools to help you get off to a good start 1. The Validator The Validator (http://validator.prestashop.com) is a tool created to check your module is technically compatible with the PrestaShop requirements. You can:\n upload a zip or specify the URL of your Github submission.  The Validator then automatically creates a detailed report explaining what needs to be improved in your module. By following this report, you can submit your module error-free!\nImportant!\nSince version 1.6.1.0, PrestaShop uses the PSR-2 norm. Even if we recommend you to use this norm, it\u0026rsquo;s not mandatory and it won’t be a reason to decline your module. Here are more details in this blog article.\n 2. Method search engine A search engine is available within the Validator to help you work out which methods are available for the various versions of PrestaShop. Make the most of this and use it to save time!\n3. The Module Generator Have you thought about saving time with our Module Generator yet? All you have to do is choose your module type and follow the instructions. A skeleton module is then automatically generated to facilitate the creation of your module. For quicker technical validation!\nTo finish the technical validation process, manual verification of the module is carried out by our team of developers. They upload, install, configure and verify your module\u0026rsquo;s code.\n3 steps to passing the technical validation 1. A development environment Create and test your module in a local development environment, with the help of WampServer (Windows) for example. This will allow you to display errors, warnings and other PHP alerts without having to depend on your online server. To make this easier, PrestaShop features a Dev Mode, which allows you to configure your use of PHP to display error messages. To activate Dev Mode: in the directory/config of your PrestaShop installation, open the file defines.inc.php. The Dev Mode is activated at the very start of the file: you must modify the following line to change the defined value to true (it\u0026rsquo;s set to false by default):\ndefine('_PS_MODE_DEV_', true);  Important: stores which are up and running must not be used in Dev Mode!\n2. Follow our good practices Read our article: Good practices for developing modules.\n3. Use the Validator to optimize your module The Validator explains exactly what you need to modify for your module to be compliant with our technical requirements (technical errors, forbidden features or structural problems, etc.). By following the Validator\u0026rsquo;s recommendations, your module will be on sale sooner!\nAre the recommendations provided preventing your module from working properly?\nContact us, we will be happy to help you develop your module!\n If you encounter any problems, you can contact the technical team when submitting your module. Take advantage of their experience to perfect your module!\nUpdate your modules and create themes for PrestaShop 1.7 All well-written 1.6 modules should work with little to no changes in version 1.7, except those which target:\n The theme/front office – because we rewrote the way themes are written. Payment modules – should be especially taken care of, since the payment API has seen a slight update. The BO Product page – because the DOM of this page has changed. The BO Modules page – again, because the DOM of this page has changed.  What this means for any shop upgrade is that in order for a PS 1.6 to migrate to PS 1.7, you will have to:\n Rewrite the theme. You can use the Starter Theme or the default theme as a foundation. Adapt the Product page modules (CSS and JavaScript). Adapt the Modules page modules (CSS and JavaScript).  Everything you should know is gathered in the following pages:\n Details on every changes concerning modules on this article of the Build devblog; The Theme Developer documentation is being written in the open. Don\u0026rsquo;t hesitate to contribute or ask questions! Payment modules:  Get inspired by our payment module demo to develop yours and use our dedicated documentation!   And of course our 1.7 Project FAQ that should already be your bedtime reading!\nHow to submit a product to the Addons marketplace After creating the perfect product page using the Contributor Kit, submit your module for technical validation.\nInformation At this stage, you can find the module_key for your module. This is to be entered into the constructor in this format:\npublic function __construct() { // etc. $this-\u0026gt;module_key = 'c1614c239af92968e5fae97f366e9961'; }  This will signal to the seller when an update of your module is available in the back-office. You should describe the modifications made one by one when an update is made. Don\u0026rsquo;t forget to indicate which versions of PrestaShop your module is compatible with!\nYour file and the permanent name of your module The zip archive submitted to our team must contain all the necessary files for your module, and have the same name as your module: if the main file of your module is called \u0026ldquo;module_name.php\u0026rdquo;, then it should be in the folder \u0026ldquo;module_name\u0026rdquo;, and the zip file must have the same name - without a version number.\nMake sure that the name used for your file and zip is the same that you have given to your product page (so that the online seller can quickly identify your module in the back office of their store). So think carefully about the name you choose for your product (without using either \u0026ldquo;PrestaShop\u0026rdquo; or \u0026ldquo;module\u0026rdquo;). Feel free to personalize the name, for example with the name of your company or your initials\nWhat happens next? Once your module has been verified by the technical team, you will receive an email from us informing you of its status (validated or refused).\nIf refused, you will be told the points to improve. You can respond directly to the team via a link in the email informing you of the refusal in order to receive further information. Then it\u0026rsquo;s up to you to follow these recommendations and resubmit your module to us!\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/template-inheritance/",
	"title": "Template inheritance",
	"tags": [],
	"description": "",
	"content": " Template inheritance PrestaShop 1.7 relies a lot on template inheritance in order to create the most consistant theme possible while heavily reducing the amount of duplicated code.\nThe principle Template inheritance allow you to extend a parent template and only redefine the block you need.\nThe picture below illustrates the example of a specific product page extending a generic one. Say you have three files: product-pack.tpl extending product.tpl, itself extending page.tpl.\n  Schema for template inheritance   The product-pack.tpl file will only contain the product description part. Everything else will be exactly the same as product page. Even better, the product page will only define the main content of the page, everything else will be taken from its own parent template (ie page.tpl).\nThe wrong way of doing this would be to extract header, footer and reusable part of the template and include them in each file.\nThe official Smarty documentation has a nice and simple example. In their own words:\n \u0026ldquo;Template inheritance is an approach to managing templates that resembles object-oriented programming techniques. Instead of the traditional use of {include \u0026hellip;} tags to manage parts of templates, you can inherit the contents of one template to another (like extending a class) and change blocks of content therein (like overriding methods of a class.) This keeps template management minimal and efficient, since each template only contains the differences from the template it extends.\u0026rdquo;\n PrestaShop real life example In a PrestaShop theme, many pages are very similar, for example template listing products: categories, new products, search results, and so on. All of them display a list of products so in PS 1.7 they all extend catalog/listing/product-list.tpl (which extends the main layout).\n{extends file=$layout} {block name='content'} \u0026lt;section id=\u0026quot;main\u0026quot;\u0026gt; {block name='product_list_header'} \u0026lt;h2 class=\u0026quot;h2\u0026quot;\u0026gt;{$listing.label}\u0026lt;/h2\u0026gt; {/block} {block name='product_list'} {include file='catalog/_partials/products.tpl' listing=$listing} {/block} \u0026lt;/section\u0026gt; {/block}  The template will show a title and a list of products underneath. For category page, we want a nice description with an cover image. So we can simply override the product_list_header\n{extends file='catalog/listing/product-list.tpl'} {block name='product_list_header'} \u0026lt;h1\u0026gt;{$category.name}\u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026quot;category-cover\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;{$category.image.large.url}\u0026quot; alt=\u0026quot;{$category.image.legend}\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026quot;category-description\u0026quot;\u0026gt;{$category.description nofilter}\u0026lt;/div\u0026gt; {/block}  This reduce code to the minimum, without any repetition.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/templates/",
	"title": "Templates",
	"tags": [],
	"description": "",
	"content": " Templates The following section describes the purpose of each template and how to use them.\nPrestaShop front office is based on Smarty template engine, for this part it\u0026rsquo;s very important you understood well how Smarty works, especially template inheritance.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/theme-translation/",
	"title": "Theme translation",
	"tags": [],
	"description": "",
	"content": " Theme translation PrestaShop 1.7 comes with a new translation system for themes.\nIt is explained in details in this Build article.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/documentation/shortcodes/minver/",
	"title": "Version pill",
	"tags": [],
	"description": "",
	"content": " Version pill When highlighting a new feature, you may want to highlight the version on which that feature was added. You can add a version pill using minver:\nEverything's better on {{\u0026lt; minver v=\u0026quot;1.7.4\u0026quot; \u0026gt;}}  Which renders to:\nEverything\u0026rsquo;s better on 1.7.4 \n To align a pill with a title, use the parameter title=\u0026quot;true\u0026quot;:\n#### Example title {{\u0026lt; minver v=\u0026quot;1.7.4\u0026quot; title=\u0026quot;true\u0026quot;\u0026gt;}}  Which is rendered like this:\nExample title   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/getting-started/asset-management/webpack/",
	"title": "Webpack",
	"tags": [],
	"description": "",
	"content": " About Webpack  Webpack is a module bundler. Webpack takes modules with dependencies and generates static assets representing those modules.\n The main interest of using Webpack is that it will compile all your styles - which we advise you to write using Sass  - into a single CSS file. This way, your theme will make only one HTTP request for this single file, and since your browser will cache it for later re-use, it will even donwload this file only once.\nThe same goes with your JavaScript code. Instead of loading jQuery along with its community plugins, your own custom plugins and any extra code you might need, Webpack compiles and minifies all this JavaScript code into a single file, which will be loaded once - and cached.\nWebpack is not at all required by PrestaShop, you are free to use your favorite tool! The documentation explains Webpack since it\u0026rsquo;s the tool we chose for the Classic theme, and StarterTheme ships with a ready-to-use configuration file.\n Installing webpack If you want to compile your assets using Webpack (and we advise you to), follow these steps:\n Download and install Node.js, which contains the npm tool. In your command line tool, open the _dev folder. Install npm: npm install. You then have a choice:  To build your assets once, type npm run build. To rebuild your assets every time you change a file in the _dev folder, type npm run watch.   Webpack configuration The Webpack configuration file for StarterTheme is thus:\n All CSS rules go to the assets/css/theme.css file. All JavaScript code go to the assets/js/theme.js file.  It provides proper configuration for compile your Sass, Less, Stylus or CSS files into a single CSS file.\nJavaScript code is written in ES6, and compiled to ES5 with Babel.\nIf you want to use Stylus or Less, simply edit the command line under the \u0026ldquo;scripts\u0026rdquo; section.\nvar webpack = require('webpack'); var ExtractTextPlugin = require(\u0026quot;extract-text-webpack-plugin\u0026quot;); var plugins = []; plugins.push( new ExtractTextPlugin('../css/theme.css') ); module.exports = [{ // JavaScript entry: [ './js/theme.js' ], output: { path: '../assets/js', filename: 'theme.js' }, module: { loaders: [{ test: /\\.js$/, exclude: /node_modules/, loaders: ['babel-loader'] }] }, externals: { prestashop: 'prestashop' }, plugins: plugins, resolve: { extensions: ['', '.js'] } }, { // CSS entry: [ './css/normalize.css', './css/example.less', './css/st/dev.styl', './css/theme.scss' ], output: { path: '../assets/js', filename: 'theme.js' }, module: { loaders: [{ test: /\\.scss$/, loader: ExtractTextPlugin.extract( \u0026quot;style\u0026quot;, \u0026quot;css-loader?sourceMap!postcss!sass-loader?sourceMap\u0026quot; ) }, { test: /\\.styl$/, loader: ExtractTextPlugin.extract( \u0026quot;style\u0026quot;, \u0026quot;css-loader?sourceMap!postcss!stylus-loader?sourceMap\u0026quot; ) }, { test: /\\.less$/, loader: ExtractTextPlugin.extract( \u0026quot;style\u0026quot;, \u0026quot;css-loader?sourceMap!postcss!less-loader?sourceMap\u0026quot; ) }, { test: /\\.css$/, loader: ExtractTextPlugin.extract( 'style', 'css-loader?sourceMap!postcss-loader' ) }, { test: /.(png|woff(2)?|eot|ttf|svg)(\\?[a-z0-9=\\.]+)?$/, loader: 'file-loader?name=../css/[hash].[ext]' }] }, plugins: plugins, resolve: { extensions: ['', '.scss', '.styl', '.less', '.css'] } }];  "
}]