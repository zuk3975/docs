<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Column Types reference on PrestaShop Developer Documentation</title>
    <link>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/</link>
    <description>Recent content in Column Types reference on PrestaShop Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Feb 2019 18:54:04 +0100</lastBuildDate>
    
	<atom:link href="https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>BadgeColumn reference</title>
      <link>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/badge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/badge/</guid>
      <description> BadgeColumn Type  This basic BadgeColumn displays a raw field data in Grid, associated with a badge.
Available options    Properties Type Expected value     field string required Record field name which column displays.   badge_type string default: success Indicates which field of the row contains the image source. (Allowed values: success, info, danger, warning)    Example usage use PrestaShop\PrestaShop\Core\Grid\Column\Type\Common\BadgeColumn; use PrestaShop\PrestaShop\Core\Grid\Column\ColumnCollection; $badgeColumn = new BadgeColumn(&#39;total_spent&#39;); $badgeColumn-&amp;gt;setName(&#39;Sales&#39;); $badgeColumn-&amp;gt;setOptions([ &#39;field&#39; =&amp;gt; &#39;total_spent&#39;, &#39;badge_type&#39; =&amp;gt; &#39;success&#39;, &#39;empty_value&#39; =&amp;gt; &#39;--&#39;, ]); $columns = new ColumnCollection(); $columns-&amp;gt;add($badgeColumn);  </description>
    </item>
    
    <item>
      <title>DataColumn reference</title>
      <link>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/data/</guid>
      <description> DataColumn Type  The most basic column is DataColumn. It is used to display raw field data in Grid.
Available options    Properties Type Expected value     field string required Record field name which column displays.    Example usage use PrestaShop\PrestaShop\Core\Grid\Column\Type\DataColumn; use PrestaShop\PrestaShop\Core\Grid\Column\ColumnCollection; $dataColumn = new DataColumn(&#39;id_product&#39;); $dataColumn-&amp;gt;setName(&#39;ID&#39;); $dataColumn-&amp;gt;setOptions([ &#39;field&#39; =&amp;gt; &#39;id_product&#39;, ]); $columns = new ColumnCollection(); $columns-&amp;gt;add($dataColumn);  </description>
    </item>
    
    <item>
      <title>DateTimeColumn reference</title>
      <link>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/datetime/</guid>
      <description>DateTimeColumn Type  You can use this column type in your Grid to format datetime values. It is common to get datetime value (e.g. Created at, Updated at &amp;amp; etc.) from database and format them before displaying.
Available options    Properties Type Expected value     field string required Record field name which column displays.   format string default: Y-m-d H:i:s Format to use when formatting datetime.</description>
    </item>
    
    <item>
      <title>ImageColumn reference</title>
      <link>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/image/</guid>
      <description> ImageColumn Type  This column is used to display an image from a row. You need to specify which field of the row contains the image source.
Available options    Properties Type Expected value     src_field string required Indicates which field of the row contains the image source    Example usage use PrestaShop\PrestaShop\Core\Grid\Column\Type\Common\ImageColumn; use PrestaShop\PrestaShop\Core\Grid\Column\ColumnCollection; $imageColumn = new ImageColumn(&#39;flag&#39;); $imageColumn-&amp;gt;setName(&#39;Flag&#39;); $imageColumn-&amp;gt;setOptions([ &#39;src_field&#39; =&amp;gt; &#39;flag&#39;, ]); $columns = new ColumnCollection(); $columns-&amp;gt;add($imageColumn);  </description>
    </item>
    
    <item>
      <title>LinkColumn reference</title>
      <link>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/link/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/link/</guid>
      <description>LinkColumn Type  This LinkColumn displays a raw field data encapsulated in a link (very useful to add an edition link on a name for example).
Available options    Properties Type Expected value     field string required Record field name which column displays.   route string required Route used to generated link url.   route_param_name string required Parameter name used by the route to generate the url.</description>
    </item>
    
    <item>
      <title>ToggleColumn reference</title>
      <link>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/toggle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/toggle/</guid>
      <description>ToggleColumn Type  This ToggleColumn is used to display booleans, it will display an icon instead of the value. If user clicks on it, this triggers a toggle of the boolean value.
Available options    Properties Type Expected value     field string required Record field name which column displays.   primary_field string required Record field name which column displays.   route string required Route used to generated link url.</description>
    </item>
    
    <item>
      <title>ActionColumn reference</title>
      <link>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/action/</guid>
      <description>ActionColumn Type  This type of column allows to add actions to your Grid rows. The action target the corresponding row. For more info about possible actions see Actions reference.
Available options    Properties Type Expected value     actions array default: null List of actions assigned to each row.    Example usage use PrestaShop\PrestaShop\Core\Grid\Column\Type\Common\ActionColumn; use PrestaShop\PrestaShop\Core\Grid\Column\ColumnCollection; $actionColumn = new ActionColumn(&#39;actions&#39;); $actionColumn-&amp;gt;setName(&#39;Actions&#39;); $actionColumn-&amp;gt;setOptions([ &#39;actions&#39; =&amp;gt; [ -&amp;gt;add((new LinkRowAction(&#39;delete&#39;)) -&amp;gt;setIcon(&#39;delete&#39;) -&amp;gt;setOptions([ &#39;route&#39; =&amp;gt; &#39;admin_custom_route&#39;, &#39;route_param_name&#39; =&amp;gt; &#39;mailId&#39;, &#39;route_param_field&#39; =&amp;gt; &#39;id_mail&#39;, &#39;confirm_message&#39; =&amp;gt; &#39;Delete selected item?</description>
    </item>
    
    <item>
      <title>BulkActionColumn reference</title>
      <link>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/bulk-action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/bulk-action/</guid>
      <description> BulkActionColumn Type  This type of column allows to add bulk action checkboxes to your Grid. This only add the checkbox in the grid, you can then manage bulk actions via javascript.
Available options    Properties Type Expected value     bulk_field string required: Record field name which will be used as bulk action checkbox value.    Example usage use PrestaShop\PrestaShop\Core\Grid\Column\Type\Common\BulkActionColumn; use PrestaShop\PrestaShop\Core\Grid\Column\ColumnCollection; $bulkActionColumn = new BulkActionColumn(&#39;bulk_action&#39;); $bulkActionColumn-&amp;gt;setName(&#39;&#39;); // it is common set empty name for bulk action columns $bulkActionColumn-&amp;gt;setOptions([ &#39;bulk_field&#39; =&amp;gt; &#39;id_product&#39;, ]); $columns = new ColumnCollection(); $columns-&amp;gt;add($bulkActionColumn);  </description>
    </item>
    
    <item>
      <title>PositionColumn reference</title>
      <link>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/position/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/position/</guid>
      <description>PositionColumn Type  This type of columns allows you to define rows position using a drag and drop feature. Besides this column definition you need to use our javascript PositionExtension and prepare a route to manage the positions update. To help you create this controller you can use our PositionUpdater component.
Available options    Properties Type Expected value     id_field string required Record field containing its id.</description>
    </item>
    
    <item>
      <title>EmployeeNameWithAvatarColumn reference</title>
      <link>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/employee-name-with-avatar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/employee-name-with-avatar/</guid>
      <description> EmployeeNameWithAvatarColumn Type  It is special type of column that allows you to add employee name with avatar column to your Grid. You can see how it looks be default:
  Employee name with avatar column   Available options    Properties Type Expected value     field string required Employee&amp;rsquo;s name field.    field type: string required
Employee&amp;rsquo;s name field.
Example usage use PrestaShop\PrestaShop\Core\Grid\Column\Type\Employee\EmployeeNameWithAvatarColumn; use PrestaShop\PrestaShop\Core\Grid\Column\ColumnCollection; $employeeColumn = new EmployeeNameWithAvatarColumn(&#39;employee&#39;); $employeeColumn-&amp;gt;setName(&#39;Employee&#39;); $employeeColumn-&amp;gt;setOptions([ &#39;field&#39; =&amp;gt; &#39;employee&#39;, ]); $columns = new ColumnCollection(); $columns-&amp;gt;add($employeeColumn);  </description>
    </item>
    
    <item>
      <title>SeverityLevelColumn reference</title>
      <link>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/severity-level/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/severity-level/</guid>
      <description> SeverityLevelColumn Type  Use this column to display severity level in your Grid.
Available options    Properties Type Expected value     field string required Record field name which is used as severity level.   with_message bool default: false Whether to show severity level message in addition with numeric severity level value.    Example usage use PrestaShop\PrestaShop\Core\Grid\Column\Type\Status\SeverityLevelColumn; use PrestaShop\PrestaShop\Core\Grid\Column\ColumnCollection; $severityColumn = new SeverityLevelColumn(&#39;severity&#39;); $severityColumn-&amp;gt;setName(&#39;Severity (1-4)&#39;); $severityColumn-&amp;gt;setOptions([ &#39;field&#39; =&amp;gt; &#39;severity&#39;, &#39;with_message&#39; =&amp;gt; true, // enable severity messages ]); $columns = new ColumnCollection(); $columns-&amp;gt;add($severityColumn);  </description>
    </item>
    
  </channel>
</rss>